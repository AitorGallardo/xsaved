{"version":3,"file":"service-worker.js","mappingsdhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1splsources":["webpack://xsaved-extension-v2/./src/config/limits.ts","webpack://xsaved-extension-v2/./node_modules/dexie/import-wrapper-prod.mjs","webpack://xsaved-extension-v2/./src/db/database.ts","webpack://xsaved-extension-v2/./src/db/config.ts","webpack://xsaved-extension-v2/./src/db/index.ts","webpack://xsaved-extension-v2/./node_modules/dexie/dist/dexie.min.js","webpack://xsaved-extension-v2/webpack/bootstrap","webpack://xsaved-extension-v2/webpack/runtime/define property getters","webpack://xsaved-extension-v2/webpack/runtime/global","webpack://xsaved-extension-v2/webpack/runtime/hasOwnProperty shorthand","webpack://xsaved-extension-v2/./src/search/query-parser.ts","webpack://xsaved-extension-v2/./src/db/query-builder.ts","webpack://xsaved-extension-v2/./src/search/search-executor.ts","webpack://xsaved-extension-v2/./src/search/search-engine.ts","webpack://xsaved-extension-v2/./src/search/index.ts","webpack://xsaved-extension-v2/./src/extension/utils/helpers.js","webpack://xsaved-extension-v2/./src/extension/utils/fetcher.js","webpack://xsaved-extension-v2/./src/utils/sortIndex-utils.ts","webpack://xsaved-extension-v2/./src/extension/utils/communicator.js","webpack://xsaved-extension-v2/./src/extension/service-worker.ts"],"sourcesContent":["/**\n * XSaved Extension v2 - Centralized Limits Configuration\n * Prevents hardcoded limits and ensures consistent behavior across the application\n */\n/**\n * Default limits configuration\n * These values are carefully chosen based on performance testing and user experience\n */\nexport const DEFAULT_LIMITS = {\n    pagination: {\n        initialLoad: 200, // First load: 200 bookmarks for good UX\n        pageSize: 200, // Each subsequent load: 200 more bookmarks\n        maxPages: 50, // Maximum 50 pages (10,000 bookmarks total)\n        scrollThreshold: 0.9 // Trigger next load when 90% scrolled\n    },\n    search: {\n        defaultLimit: 5000, // Default search: 3000 results (matches content script)\n        maxSearchLimit: 20000, // Maximum search: 10,000 results\n        quickSearchLimit: 20, // Fast search: 20 results\n        textSearchLimit: 3000, // Text search: 3000 results\n        tagSearchLimit: 50, // Tag search: 50 results\n        authorSearchLimit: 50 // Author search: 50 results\n    },\n    database: {\n        defaultQueryLimit: 50, // Default database: 50 results\n        maxQueryLimit: 10000, // Maximum database: 10,000 results\n        substringSearchLimit: 5000, // Substring search: 5000 results\n        indexSearchLimit: 2000, // Index search: 2000 results\n        popularTagsLimit: 20, // Popular tags: 20 results\n        searchTagsLimit: 10 // Tag search: 10 results\n    },\n    performance: {\n        batchSize: 1000, // Bulk operations: 1000 items\n        cacheSize: 100, // Cache: 100 entries\n        maxBookmarksForExport: 500, // Export: 500 bookmarks max\n        maxTokensPerBookmark: 100, // Tokenization: 100 tokens max\n        maxTagsPerBookmark: 50 // Tags: 50 tags max per bookmark\n    },\n    ui: {\n        gridColumns: 3, // Grid: 3 columns\n        maxVisibleBookmarks: 3000, // UI: 3000 visible bookmarks\n        debounceMs: 300, // Search: 300ms debounce\n        loadingTimeoutMs: 5000 // Loading: 5s timeout\n    }\n};\n/**\n * Production limits configuration\n * More conservative limits for production environments\n */\nexport const PRODUCTION_LIMITS = {\n    ...DEFAULT_LIMITS,\n    pagination: {\n        ...DEFAULT_LIMITS.pagination,\n        initialLoad: 100, // Production: 100 bookmarks first load\n        pageSize: 100, // Production: 100 bookmarks per page\n        maxPages: 100 // Production: 100 pages max\n    },\n    search: {\n        ...DEFAULT_LIMITS.search,\n        defaultLimit: 2000, // Production: 2000 default results\n        maxSearchLimit: 5000 // Production: 5000 max results\n    }\n};\n/**\n * Development limits configuration\n * More generous limits for development and testing\n */\nexport const DEVELOPMENT_LIMITS = {\n    ...DEFAULT_LIMITS,\n    search: {\n        ...DEFAULT_LIMITS.search,\n        defaultLimit: 5000, // Dev: 5000 default results\n        maxSearchLimit: 20000 // Dev: 20,000 max results\n    },\n    database: {\n        ...DEFAULT_LIMITS.database,\n        defaultQueryLimit: 100, // Dev: 100 default results\n        maxQueryLimit: 20000 // Dev: 20,000 max results\n    }\n};\n/**\n * Get limits configuration - simplified version\n */\nexport function getLimitsConfig() {\n    return DEFAULT_LIMITS;\n}\n/**\n * Validate limit value against configuration\n */\nexport function validateLimit(limit, category, key) {\n    const config = getLimitsConfig();\n    const maxLimit = config[category][key];\n    if (limit > maxLimit) {\n        console.warn(`⚠️ Limit ${limit} exceeds maximum ${maxLimit} for ${category}.${key}`);\n        return maxLimit;\n    }\n    return limit;\n}\n/**\n * Get limit with fallback\n */\nexport function getLimit(requestedLimit, category, key) {\n    const config = getLimitsConfig();\n    const defaultLimit = config[category][key];\n    if (requestedLimit === undefined || requestedLimit === null) {\n        return defaultLimit;\n    }\n    return validateLimit(requestedLimit, category, key);\n}\n// Export commonly used limit getters for convenience\nexport const Limits = {\n    // Pagination\n    get initialLoad() { return getLimitsConfig().pagination.initialLoad; },\n    get pageSize() { return getLimitsConfig().pagination.pageSize; },\n    get maxPages() { return getLimitsConfig().pagination.maxPages; },\n    get scrollThreshold() { return getLimitsConfig().pagination.scrollThreshold; },\n    // Search\n    get defaultSearchLimit() { return getLimitsConfig().search.defaultLimit; },\n    get maxSearchLimit() { return getLimitsConfig().search.maxSearchLimit; },\n    get quickSearchLimit() { return getLimitsConfig().search.quickSearchLimit; },\n    get textSearchLimit() { return getLimitsConfig().search.textSearchLimit; },\n    get tagSearchLimit() { return getLimitsConfig().search.tagSearchLimit; },\n    get authorSearchLimit() { return getLimitsConfig().search.authorSearchLimit; },\n    // Database\n    get defaultQueryLimit() { return getLimitsConfig().database.defaultQueryLimit; },\n    get maxQueryLimit() { return getLimitsConfig().database.maxQueryLimit; },\n    get substringSearchLimit() { return getLimitsConfig().database.substringSearchLimit; },\n    get indexSearchLimit() { return getLimitsConfig().database.indexSearchLimit; },\n    get popularTagsLimit() { return getLimitsConfig().database.popularTagsLimit; },\n    get searchTagsLimit() { return getLimitsConfig().database.searchTagsLimit; },\n    // Performance\n    get batchSize() { return getLimitsConfig().performance.batchSize; },\n    get cacheSize() { return getLimitsConfig().performance.cacheSize; },\n    get maxBookmarksForExport() { return getLimitsConfig().performance.maxBookmarksForExport; },\n    get maxTokensPerBookmark() { return getLimitsConfig().performance.maxTokensPerBookmark; },\n    get maxTagsPerBookmark() { return getLimitsConfig().performance.maxTagsPerBookmark; },\n    // UI\n    get gridColumns() { return getLimitsConfig().ui.gridColumns; },\n    get maxVisibleBookmarks() { return getLimitsConfig().ui.maxVisibleBookmarks; },\n    get debounceMs() { return getLimitsConfig().ui.debounceMs; },\n    get loadingTimeoutMs() { return getLimitsConfig().ui.loadingTimeoutMs; }\n};\n","// Making the module version consumable via require - to prohibit\n// multiple occurrancies of the same module in the same app\n// (dual package hazard, https://nodejs.org/api/packages.html#dual-package-hazard)\nimport _Dexie from \"./dist/dexie.min.js\";\nconst DexieSymbol = Symbol.for(\"Dexie\");\nconst Dexie = globalThis[DexieSymbol] || (globalThis[DexieSymbol] = _Dexie);\nif (_Dexie.semVer !== Dexie.semVer) {\n    throw new Error(`Two different versions of Dexie loaded in the same app: ${_Dexie.semVer} and ${Dexie.semVer}`);\n}\nconst {\n    liveQuery, mergeRanges, rangesOverlap, RangeSet, cmp, Entity,\n    PropModification, replacePrefix, add, remove } = Dexie;\nexport { liveQuery, mergeRanges, rangesOverlap, RangeSet, cmp, Dexie, Entity,\n    PropModification, replacePrefix, add, remove };\nexport default Dexie;\n","/**\n * XSaved Extension v2 - Consolidated Database Layer\n * Single Dexie implementation with consistent API\n * Replaces: database.ts (877 lines) + database-dexie.ts (534 lines)\n */\nimport Dexie from 'dexie';\nimport { Limits } from '../config/limits';\n// ========================\n// DATABASE SCHEMA DESIGN\n// ========================\nexport class XSavedDatabase extends Dexie {\n    constructor() {\n        super('XSavedDB');\n        this.isInitialized = false;\n        // Define schema with indexes\n        this.version(1).stores({\n            // Bookmarks: Primary storage with multi-entry indexes for fast queries\n            bookmarks: `\n        id,\n        author,\n        created_at,\n        bookmarked_at,\n        *tags,\n        *textTokens\n      `,\n            // Tags: Separate analytics table for tag management\n            tags: `\n        name,\n        usageCount,\n        createdAt,\n        category\n      `,\n            // Collections: User-defined bookmark groupings\n            collections: `\n        id,\n        name,\n        createdAt,\n        *bookmarkIds\n      `,\n            // Settings: App configuration\n            settings: `\n        key,\n        value,\n        updatedAt\n      `,\n            // Search Index: Full-text search optimization\n            searchIndex: `\n        bookmarkId,\n        *tokens,\n        relevanceScore,\n        lastUpdated\n      `\n        });\n        // Version 2: Add avatar_url field to bookmarks\n        // Note: Dexie automatically handles schema changes by preserving existing data\n        this.version(2).stores({\n            // Bookmarks: Updated schema with avatar_url field\n            bookmarks: `\n        id,\n        author,\n        avatar_url,\n        created_at,\n        bookmarked_at,\n        *tags,\n        *textTokens\n      `,\n            // Keep other stores unchanged\n            tags: `\n        name,\n        usageCount,\n        createdAt,\n        category\n      `,\n            collections: `\n        id,\n        name,\n        createdAt,\n        *bookmarkIds\n      `,\n            settings: `\n        key,\n        value,\n        updatedAt\n      `,\n            searchIndex: `\n        bookmarkId,\n        *tokens,\n        relevanceScore,\n        lastUpdated\n      `\n        });\n        // Add hooks for automatic data processing\n        this.bookmarks.hook('creating', (primKey, obj, trans) => {\n            // Auto-generate textTokens if not provided\n            if (!obj.textTokens) {\n                obj.textTokens = this.tokenizeBookmark(obj);\n            }\n            // Ensure both timestamps are valid ISO strings\n            const now = new Date().toISOString();\n            if (!obj.created_at || !this.isValidDate(obj.created_at)) {\n                obj.created_at = now;\n                console.warn(`⚠️ Invalid created_at for ${obj.id}, using current time`);\n            }\n            else if (!obj.created_at.includes('T')) {\n                // Convert Twitter format to ISO format\n                obj.created_at = new Date(obj.created_at).toISOString();\n            }\n            if (!obj.bookmarked_at || !this.isValidDate(obj.bookmarked_at)) {\n                obj.bookmarked_at = obj.created_at || now;\n                console.warn(`⚠️ Invalid bookmarked_at for ${obj.id}, using created_at`);\n            }\n            else if (!obj.bookmarked_at.includes('T')) {\n                // Convert Twitter format to ISO format\n                obj.bookmarked_at = new Date(obj.bookmarked_at).toISOString();\n            }\n            console.log(`🔄 Creating bookmark: ${obj.id}`);\n        });\n        this.bookmarks.hook('updating', (modifications, primKey, obj, trans) => {\n            console.log(`🔄 Updating bookmark: ${primKey}`, modifications);\n            // Auto-regenerate textTokens if any searchable field was modified\n            if (modifications.text !== undefined || modifications.author !== undefined || modifications.tags !== undefined) {\n                // Merge current object with modifications to get full context\n                const updatedObj = { ...obj, ...modifications };\n                modifications.textTokens = this.tokenizeBookmark(updatedObj);\n                console.log(`🔄 Regenerated textTokens for bookmark: ${primKey}`);\n            }\n        });\n        this.bookmarks.hook('deleting', (primKey, obj, trans) => {\n            console.log(`🗑️ Deleting bookmark: ${primKey}`);\n        });\n    }\n    // ========================\n    // INITIALIZATION & UTILITIES\n    // ========================\n    /**\n     * Initialize database connection\n     */\n    async initialize() {\n        try {\n            await this.open();\n            this.isInitialized = true;\n            console.log('✅ Consolidated Dexie database initialized');\n            return { success: true };\n        }\n        catch (error) {\n            console.error('❌ Failed to initialize database:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Database initialization failed'\n            };\n        }\n    }\n    /**\n     * Get database instance (for compatibility)\n     */\n    get database() {\n        try {\n            return this.backendDB();\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    /**\n     * Performance tracking wrapper\n     */\n    async withPerformanceTracking(operation, fn) {\n        const startTime = performance.now();\n        try {\n            const result = await fn();\n            const duration = performance.now() - startTime;\n            const metrics = {\n                operation,\n                duration,\n                recordCount: Array.isArray(result) ? result.length : 1,\n                timestamp: new Date().toISOString()\n            };\n            if (duration > 50) { // Log slow operations\n                console.warn(`⚠️ Slow operation: ${operation} took ${duration.toFixed(2)}ms`);\n            }\n            return { result, metrics };\n        }\n        catch (error) {\n            const duration = performance.now() - startTime;\n            console.error(`❌ Operation failed: ${operation} (${duration.toFixed(2)}ms)`, error);\n            throw error;\n        }\n    }\n    // ========================\n    // BOOKMARK OPERATIONS\n    // ========================\n    /**\n     * Add a bookmark with consistent API\n     */\n    async addBookmark(bookmark) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('addBookmark', () => this._addBookmarkInternal(bookmark));\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to add bookmark'\n            };\n        }\n    }\n    /**\n     * Internal bookmark addition\n     */\n    async _addBookmarkInternal(bookmark) {\n        await this.bookmarks.add(bookmark);\n        console.log(`✅ Bookmark added successfully: ${bookmark.id}`);\n        return bookmark;\n    }\n    /**\n     * Get bookmark by ID\n     */\n    async getBookmark(id) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('getBookmark', () => this.bookmarks.get(id));\n            return {\n                success: true,\n                data: result || null,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get bookmark'\n            };\n        }\n    }\n    /**\n     * Update existing bookmark\n     */\n    async updateBookmark(id, updates) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('updateBookmark', async () => {\n                const updated = await this.bookmarks.update(id, updates);\n                if (updated) {\n                    const updatedBookmark = await this.bookmarks.get(id);\n                    console.log(`✅ Bookmark updated: ${id}`);\n                    return updatedBookmark || null;\n                }\n                else {\n                    console.warn(`⚠️ Bookmark not found for update: ${id}`);\n                    return null;\n                }\n            });\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to update bookmark'\n            };\n        }\n    }\n    /**\n     * Delete bookmark by ID\n     */\n    async deleteBookmark(id) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('deleteBookmark', async () => {\n                await this.bookmarks.delete(id);\n                console.log(`✅ Bookmark deleted: ${id}`);\n                return true;\n            });\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to delete bookmark'\n            };\n        }\n    }\n    /**\n     * Get all bookmarks with optional sorting and pagination\n     * ENHANCED: Now supports offset for pagination\n     */\n    async getAllBookmarks(options = {}) {\n        try {\n            console.log(`🔍 getAllBookmarks called with options:`, options);\n            // OPTION A: Ultra-simple Dexie pagination (works because dates are normalized when saving)\n            let query = this.bookmarks.orderBy(options.sortBy || 'created_at');\n            // Apply sort order\n            if (options.sortOrder === 'asc') {\n                // Keep ascending order\n            }\n            else {\n                query = query.reverse(); // Default to descending (newest first)\n            }\n            // Apply pagination (Dexie handles this efficiently)\n            if (options.offset) {\n                query = query.offset(options.offset);\n            }\n            if (options.limit) {\n                query = query.limit(options.limit);\n            }\n            const bookmarks = await query.toArray();\n            console.log(`🔍 getAllBookmarks found ${bookmarks.length} bookmarks in database`);\n            // Clean: No console logging\n            return bookmarks;\n        }\n        catch (error) {\n            console.error('❌ Failed to get all bookmarks:', error);\n            return [];\n        }\n    }\n    // ========================\n    // SEARCH OPERATIONS\n    // ========================\n    /**\n     * Search bookmarks by tags\n     */\n    async searchByTags(tags, options = {}) {\n        try {\n            let query;\n            if (options.matchAll) {\n                // AND operation: bookmark must have ALL tags\n                query = this.bookmarks.where('tags').anyOf(tags);\n                const results = await query.toArray();\n                // Filter to only bookmarks that have ALL required tags\n                return results.filter(bookmark => tags.every(tag => bookmark.tags?.includes(tag))).slice(0, options.limit || Limits.defaultQueryLimit);\n            }\n            else {\n                // OR operation: bookmark must have ANY of the tags\n                query = this.bookmarks\n                    .where('tags')\n                    .anyOf(tags)\n                    .reverse()\n                    .limit(options.limit || Limits.defaultQueryLimit);\n                return await query.toArray();\n            }\n        }\n        catch (error) {\n            console.error('❌ Tag search failed:', error);\n            return [];\n        }\n    }\n    /**\n     * Search bookmarks by author\n     */\n    async searchByAuthor(author, options = {}) {\n        try {\n            const results = await this.bookmarks\n                .where('author')\n                .equalsIgnoreCase(author)\n                .reverse()\n                .limit(options.limit || Limits.defaultQueryLimit)\n                .toArray();\n            console.log(`👤 Found ${results.length} bookmarks by @${author}`);\n            return results;\n        }\n        catch (error) {\n            console.error(`❌ Author search failed for @${author}:`, error);\n            return [];\n        }\n    }\n    /**\n     * Get all unique authors with bookmark count\n     */\n    async getAllAuthors() {\n        try {\n            const authorMap = new Map();\n            // Use the author index for efficient grouping\n            await this.bookmarks.orderBy('author').each(bookmark => {\n                const author = bookmark.author;\n                authorMap.set(author, (authorMap.get(author) || 0) + 1);\n            });\n            // Convert to array and sort by count\n            const authors = Array.from(authorMap.entries())\n                .map(([author, count]) => ({ author, count }))\n                .sort((a, b) => b.count - a.count);\n            console.log(`👥 Found ${authors.length} unique authors`);\n            return authors;\n        }\n        catch (error) {\n            console.error('❌ Failed to get all authors:', error);\n            return [];\n        }\n    }\n    /**\n     * Search authors by name (for autocomplete)\n     */\n    async searchAuthors(query, limit = 10) {\n        try {\n            if (!query.trim()) {\n                // Return all authors if no query\n                const allAuthors = await this.getAllAuthors();\n                return allAuthors.slice(0, limit);\n            }\n            const queryLower = query.toLowerCase();\n            const authorMap = new Map();\n            // Search authors that contain the query string\n            await this.bookmarks\n                .where('author')\n                .startsWithIgnoreCase(query)\n                .each(bookmark => {\n                const author = bookmark.author;\n                authorMap.set(author, (authorMap.get(author) || 0) + 1);\n            });\n            // Also search for authors that contain the query (not just start with)\n            await this.bookmarks.filter(bookmark => bookmark.author.toLowerCase().includes(queryLower) &&\n                !authorMap.has(bookmark.author)).each(bookmark => {\n                const author = bookmark.author;\n                authorMap.set(author, (authorMap.get(author) || 0) + 1);\n            });\n            // Convert to array and sort by count\n            const authors = Array.from(authorMap.entries())\n                .map(([author, count]) => ({ author, count }))\n                .sort((a, b) => b.count - a.count)\n                .slice(0, limit);\n            console.log(`🔍 Found ${authors.length} authors matching \"${query}\"`);\n            return authors;\n        }\n        catch (error) {\n            console.error(`❌ Author search failed for \"${query}\":`, error);\n            return [];\n        }\n    }\n    // ========================\n    // TAG OPERATIONS\n    // ========================\n    /**\n     * Get all tags with usage analytics\n     */\n    async getAllTags() {\n        try {\n            return await this.tags.orderBy('usageCount').reverse().toArray();\n        }\n        catch (error) {\n            console.error('❌ Failed to get tags:', error);\n            return [];\n        }\n    }\n    /**\n     * Get popular tags (by usage count)\n     */\n    async getPopularTags(limit = Limits.popularTagsLimit) {\n        try {\n            return await this.tags\n                .orderBy('usageCount')\n                .reverse()\n                .limit(limit)\n                .toArray();\n        }\n        catch (error) {\n            console.error('❌ Failed to get popular tags:', error);\n            return [];\n        }\n    }\n    /**\n     * Search tags by name\n     */\n    async searchTags(query, limit = Limits.searchTagsLimit) {\n        try {\n            if (!query.trim())\n                return [];\n            return await this.tags\n                .filter(tag => tag.name.toLowerCase().includes(query.toLowerCase()))\n                .limit(limit)\n                .toArray();\n        }\n        catch (error) {\n            console.error('❌ Failed to search tags:', error);\n            return [];\n        }\n    }\n    /**\n     * Update tag analytics when bookmarks change\n     */\n    async updateTagAnalytics(tags) {\n        if (!tags || tags.length === 0)\n            return;\n        try {\n            const timestamp = new Date().toISOString();\n            await this.transaction('rw', this.tags, async () => {\n                for (const tagName of tags) {\n                    if (!tagName.trim())\n                        continue;\n                    const existingTag = await this.tags.get(tagName);\n                    if (existingTag) {\n                        await this.tags.update(tagName, {\n                            usageCount: (existingTag.usageCount || 0) + 1\n                        });\n                    }\n                    else {\n                        await this.tags.add({\n                            name: tagName,\n                            usageCount: 1,\n                            createdAt: timestamp\n                        });\n                    }\n                }\n            });\n            console.log(`📊 Updated analytics for ${tags.length} tags`);\n        }\n        catch (error) {\n            console.error('❌ Failed to update tag analytics:', error);\n        }\n    }\n    // ========================\n    // UTILITY METHODS\n    // ========================\n    /**\n     * Tokenize text for search indexing\n     * ENHANCED: Now includes text, author, and tags for comprehensive search\n     */\n    tokenizeText(text) {\n        if (!text)\n            return [];\n        return text\n            .toLowerCase()\n            .replace(/[^\\w\\s#@]/g, ' ') // Keep hashtags and mentions\n            .split(/\\s+/)\n            .filter(token => token.length > 2) // Only tokens longer than 2 chars\n            .slice(0, Limits.maxTokensPerBookmark); // Limit tokens per bookmark\n    }\n    /**\n     * Tokenize bookmark for comprehensive search indexing\n     * NEW: Includes text, author, and tags\n     */\n    tokenizeBookmark(bookmark) {\n        const tokens = new Set();\n        // Tokenize tweet text\n        if (bookmark.text) {\n            const textTokens = this.tokenizeText(bookmark.text);\n            textTokens.forEach(token => tokens.add(token));\n        }\n        // Tokenize author name\n        if (bookmark.author) {\n            const authorTokens = this.tokenizeText(bookmark.author);\n            authorTokens.forEach(token => tokens.add(token));\n        }\n        // Tokenize tags\n        if (bookmark.tags && Array.isArray(bookmark.tags)) {\n            bookmark.tags.forEach(tag => {\n                if (typeof tag === 'string') {\n                    const tagTokens = this.tokenizeText(tag);\n                    tagTokens.forEach(token => tokens.add(token));\n                }\n            });\n        }\n        return Array.from(tokens).slice(0, Limits.maxTokensPerBookmark); // Limit total tokens per bookmark\n    }\n    /**\n     * Get recent bookmarks (compatibility method for search engine)\n     */\n    async getRecentBookmarks(options = {}) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('getRecentBookmarks', () => this.getAllBookmarks({\n                sortBy: options.sortBy || 'created_at',\n                sortOrder: 'desc',\n                limit: options.limit || Limits.defaultQueryLimit,\n                offset: options.offset // CRITICAL FIX: Pass offset to getAllBookmarks\n            }));\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            console.error(`🔍 getRecentBookmarks error:`, error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get recent bookmarks'\n            };\n        }\n    }\n    /**\n     * Get bookmarks by tag (compatibility method for search engine)\n     */\n    async getBookmarksByTag(tag) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('getBookmarksByTag', () => this.searchByTags([tag], { limit: Limits.maxQueryLimit, matchAll: false }));\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get bookmarks by tag'\n            };\n        }\n    }\n    /**\n     * Search bookmarks with various criteria (compatible with service worker)\n     * ENHANCED: Now supports pagination with offset\n     */\n    async searchBookmarks(options = {}) {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('searchBookmarks', async () => {\n                let results = [];\n                // Handle different search types\n                if (options.text) {\n                    results = await this._searchBookmarksByText(options.text, {\n                        limit: options.limit,\n                        offset: options.offset, // NEW: Pass offset for pagination\n                        sortBy: options.sortBy,\n                        sortOrder: options.sortOrder\n                    });\n                }\n                else if (options.tags && options.tags.length > 0) {\n                    results = await this.searchByTags(options.tags, {\n                        limit: options.limit,\n                        matchAll: false\n                    });\n                }\n                else if (options.author) {\n                    results = await this.searchByAuthor(options.author, {\n                        limit: options.limit\n                    });\n                }\n                else {\n                    results = await this.getAllBookmarks({\n                        sortBy: options.sortBy === 'relevance' ? 'created_at' : options.sortBy,\n                        sortOrder: options.sortOrder,\n                        limit: options.limit,\n                        offset: options.offset // NEW: Pass offset for pagination\n                    });\n                }\n                // Apply date filtering if specified\n                if (options.dateFrom || options.dateTo) {\n                    results = results.filter(bookmark => {\n                        const bookmarkDate = new Date(bookmark.created_at);\n                        const fromDate = options.dateFrom ? new Date(options.dateFrom) : null;\n                        const toDate = options.dateTo ? new Date(options.dateTo) : null;\n                        if (fromDate && bookmarkDate < fromDate)\n                            return false;\n                        if (toDate && bookmarkDate > toDate)\n                            return false;\n                        return true;\n                    });\n                }\n                return results;\n            });\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Search failed'\n            };\n        }\n    }\n    /**\n     * Internal text search method\n     * ENHANCED: Now supports offset for pagination\n     */\n    async _searchBookmarksByText(query, options = {}) {\n        if (!query.trim()) {\n            return this.getAllBookmarks(options);\n        }\n        const tokens = this.tokenizeText(query);\n        // Search using multi-entry textTokens index with pagination\n        let query_builder = this.bookmarks\n            .where('textTokens')\n            .anyOfIgnoreCase(tokens);\n        // Apply sorting\n        if (options.sortOrder === 'asc') {\n            // Keep natural order\n        }\n        else {\n            query_builder = query_builder.reverse(); // Default to newest first\n        }\n        // Apply pagination\n        if (options.offset) {\n            query_builder = query_builder.offset(options.offset);\n        }\n        if (options.limit) {\n            query_builder = query_builder.limit(options.limit);\n        }\n        const results = await query_builder.toArray();\n        // Apply pagination to search results\n        const result = results.slice(options.offset || 0, (options.offset || 0) + (options.limit || Limits.maxQueryLimit));\n        console.log(`🔍 Text search \"${query}\" returned ${result.length} bookmarks`);\n        return result;\n    }\n    // REMOVED: Unnecessary date normalization - dates are already consistent\n    /**\n     * Get database statistics\n     */\n    async getStats() {\n        try {\n            const { result, metrics } = await this.withPerformanceTracking('getStats', async () => {\n                const [bookmarkCount, tagCount, collectionCount] = await Promise.all([\n                    this.bookmarks.count(),\n                    this.tags.count(),\n                    this.collections.count()\n                ]);\n                return {\n                    totalBookmarks: bookmarkCount,\n                    totalTags: tagCount,\n                    totalCollections: collectionCount\n                };\n            });\n            return {\n                success: true,\n                data: result,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get database stats'\n            };\n        }\n    }\n    /**\n     * Validate date string (accepts both ISO and Twitter formats)\n     */\n    isValidDate(dateString) {\n        if (!dateString || typeof dateString !== 'string')\n            return false;\n        const date = new Date(dateString);\n        return !isNaN(date.getTime()) && date.getTime() > 0;\n    }\n    /**\n     * Clear all data (for testing/reset)\n     */\n    async clearAllData() {\n        try {\n            const { metrics } = await this.withPerformanceTracking('clearAllData', async () => {\n                await this.transaction('rw', [this.bookmarks, this.tags, this.collections, this.settings], async () => {\n                    await this.bookmarks.clear();\n                    await this.tags.clear();\n                    await this.collections.clear();\n                    await this.settings.clear();\n                });\n                console.log('🧹 All data cleared');\n            });\n            return {\n                success: true,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to clear data'\n            };\n        }\n    }\n    /**\n     * Clear all bookmarks only (keep other data)\n     */\n    async clearAllBookmarks() {\n        try {\n            const { metrics } = await this.withPerformanceTracking('clearAllBookmarks', async () => {\n                await this.bookmarks.clear();\n                console.log('🧹 All bookmarks cleared');\n            });\n            return {\n                success: true,\n                metrics\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to clear bookmarks'\n            };\n        }\n    }\n    /**\n     * Verify database functionality (for debugging)\n     */\n    async verifyDatabase() {\n        console.log('🧪 Testing database functionality...');\n        // Test bookmark creation\n        const testBookmark = {\n            id: 'test_' + Date.now(),\n            text: 'Test bookmark for verification',\n            author: 'test_user',\n            created_at: new Date().toISOString(),\n            bookmarked_at: new Date().toISOString(),\n            tags: ['test'],\n            media_urls: [],\n            textTokens: ['test', 'bookmark', 'verification']\n        };\n        try {\n            // Add test bookmark\n            const addResult = await this.addBookmark(testBookmark);\n            if (addResult.success) {\n                console.log('✅ Test bookmark added successfully');\n            }\n            else {\n                console.error('❌ Failed to add test bookmark:', addResult.error);\n                return;\n            }\n            // Retrieve test bookmark\n            const getResult = await this.getBookmark(testBookmark.id);\n            if (getResult.success && getResult.data) {\n                console.log('✅ Test bookmark retrieved successfully');\n                // Clean up test bookmark\n                await this.bookmarks.delete(testBookmark.id);\n                console.log('✅ Test bookmark cleaned up');\n                console.log('🎉 Database verification completed successfully!');\n            }\n            else {\n                console.error('❌ Failed to retrieve test bookmark');\n            }\n        }\n        catch (error) {\n            console.error('❌ Database verification failed:', error);\n        }\n    }\n    /**\n     * Close database connection\n     */\n    async close() {\n        try {\n            await super.close();\n            this.isInitialized = false;\n            console.log('✅ Database closed successfully');\n        }\n        catch (error) {\n            console.error('❌ Failed to close database:', error);\n        }\n    }\n}\n// Create and export database instance\nexport const db = new XSavedDatabase();\n","/**\n * XSaved Extension v2 - Database Configuration\n * IndexedDB schema with performance-optimized indexes\n */\nexport const DATABASE_NAME = 'XSavedDB';\nexport const DATABASE_VERSION = 4;\n// Store names\nexport const STORES = {\n    BOOKMARKS: 'bookmarks',\n    SEARCH_INDEX: 'search_index',\n    TAGS: 'tags',\n    COLLECTIONS: 'collections',\n    SETTINGS: 'settings'\n};\n// Database schema configuration\nexport const DB_CONFIG = {\n    name: DATABASE_NAME,\n    version: DATABASE_VERSION,\n    stores: {\n        // Primary bookmarks store with optimized indexes\n        [STORES.BOOKMARKS]: {\n            keyPath: 'id',\n            autoIncrement: false,\n            indexes: [\n                {\n                    name: 'created_at',\n                    keyPath: 'created_at',\n                    unique: false\n                },\n                {\n                    name: 'author',\n                    keyPath: 'author',\n                    unique: false\n                },\n                {\n                    name: 'tags',\n                    keyPath: 'tags',\n                    multiEntry: true // ← KEY: Each tag creates separate index entry\n                },\n                {\n                    name: 'bookmarked_at',\n                    keyPath: 'bookmarked_at',\n                    unique: false\n                },\n                {\n                    name: 'text_search',\n                    keyPath: 'textTokens',\n                    multiEntry: true // ← KEY: Each token creates separate index entry\n                }\n            ]\n        },\n        // Search index for performance optimization\n        [STORES.SEARCH_INDEX]: {\n            keyPath: 'bookmarkId',\n            autoIncrement: false,\n            indexes: [\n                {\n                    name: 'tokens',\n                    keyPath: 'tokens',\n                    multiEntry: true\n                },\n                {\n                    name: 'relevance_score',\n                    keyPath: 'relevanceScore',\n                    unique: false\n                },\n                {\n                    name: 'last_updated',\n                    keyPath: 'lastUpdated',\n                    unique: false\n                }\n            ]\n        },\n        // Tags store for organization and analytics\n        [STORES.TAGS]: {\n            keyPath: 'name',\n            autoIncrement: false,\n            indexes: [\n                {\n                    name: 'usage_count',\n                    keyPath: 'usageCount',\n                    unique: false\n                },\n                {\n                    name: 'created_at',\n                    keyPath: 'createdAt',\n                    unique: false\n                },\n                {\n                    name: 'category',\n                    keyPath: 'category',\n                    unique: false\n                }\n            ]\n        },\n        // Collections/folders store\n        [STORES.COLLECTIONS]: {\n            keyPath: 'id',\n            autoIncrement: false,\n            indexes: [\n                {\n                    name: 'name',\n                    keyPath: 'name',\n                    unique: false\n                },\n                {\n                    name: 'created_at',\n                    keyPath: 'createdAt',\n                    unique: false\n                },\n                {\n                    name: 'updated_at',\n                    keyPath: 'updatedAt',\n                    unique: false\n                }\n            ]\n        },\n        // Settings store\n        [STORES.SETTINGS]: {\n            keyPath: 'key',\n            autoIncrement: false,\n            indexes: [\n                {\n                    name: 'updated_at',\n                    keyPath: 'updatedAt',\n                    unique: false\n                }\n            ]\n        }\n    }\n};\n// Performance configuration\nexport const PERFORMANCE_CONFIG = {\n    // Search performance targets\n    SEARCH_TARGET_MS: 50, // Target search time\n    BATCH_SIZE: 1000, // Bulk operation batch size\n    INDEX_REBUILD_THRESHOLD: 10000, // When to rebuild search index\n    // Memory management\n    HOT_CACHE_SIZE: 100, // Recent bookmarks in memory\n    CACHE_TTL_MS: 5 * 60 * 1000, // 5 minutes cache TTL\n    // Database maintenance\n    CLEANUP_INTERVAL_HOURS: 24, // Cleanup old data\n    VACUUM_THRESHOLD_MB: 100 // Compact database threshold\n};\n// Default settings\nexport const DEFAULT_SETTINGS = {\n    // Search preferences\n    search_mode: 'smart', // 'simple' | 'smart' | 'advanced'\n    results_per_page: 50,\n    enable_fuzzy_search: true,\n    // UI preferences  \n    theme: 'auto', // 'light' | 'dark' | 'auto'\n    grid_columns: 3, // Grid layout columns\n    show_media_previews: true,\n    // Performance\n    enable_background_sync: true,\n    max_cache_size_mb: 50,\n    enable_performance_monitoring: false\n};\n// Error messages\nexport const DB_ERRORS = {\n    NOT_SUPPORTED: 'IndexedDB is not supported in this browser',\n    OPEN_FAILED: 'Failed to open database',\n    TRANSACTION_FAILED: 'Database transaction failed',\n    STORE_NOT_FOUND: 'Object store not found',\n    INDEX_NOT_FOUND: 'Index not found',\n    QUOTA_EXCEEDED: 'Storage quota exceeded',\n    DATA_CORRUPTION: 'Database corruption detected'\n};\n// Migration helpers (for future schema updates)\nexport const MIGRATION_HELPERS = {\n    // Version 1 → 2 migration (example for future use)\n    v1_to_v2: async (db) => {\n        // Migration logic would go here\n        console.log('Migrating database from v1 to v2...');\n    }\n};\n","/**\n * XSaved Extension v2 - Database Module\n * Consolidated single database implementation\n */\n// Main database class (consolidated Dexie implementation)\nexport { XSavedDatabase, db } from './database';\n// Configuration\nexport { DATABASE_NAME, DATABASE_VERSION, STORES, DB_CONFIG, PERFORMANCE_CONFIG, DEFAULT_SETTINGS, DB_ERRORS } from './config';\n","(function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).Dexie=t()})(this,function(){\"use strict\";var s=function(e,t){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};var _=function(){return(_=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function i(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||((r=r||Array.prototype.slice.call(t,0,i))[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}var f=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:global,x=Object.keys,k=Array.isArray;function a(t,n){return\"object\"!=typeof n||x(n).forEach(function(e){t[e]=n[e]}),t}\"undefined\"==typeof Promise||f.Promise||(f.Promise=Promise);var c=Object.getPrototypeOf,n={}.hasOwnProperty;function m(e,t){return n.call(e,t)}function r(t,n){\"function\"==typeof n&&(n=n(c(t))),(\"undefined\"==typeof Reflect?x:Reflect.ownKeys)(n).forEach(function(e){l(t,e,n[e])})}var u=Object.defineProperty;function l(e,t,n,r){u(e,t,a(n&&m(n,\"get\")&&\"function\"==typeof n.get?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function o(t){return{from:function(e){return t.prototype=Object.create(e.prototype),l(t.prototype,\"constructor\",t),{extend:r.bind(null,t.prototype)}}}}var h=Object.getOwnPropertyDescriptor;var d=[].slice;function b(e,t,n){return d.call(e,t,n)}function p(e,t){return t(e)}function y(e){if(!e)throw new Error(\"Assertion Failed\")}function v(e){f.setImmediate?setImmediate(e):setTimeout(e,0)}function O(e,t){if(\"string\"==typeof t&&m(e,t))return e[t];if(!t)return e;if(\"string\"!=typeof t){for(var n=[],r=0,i=t.length;r<i;++r){var o=O(e,t[r]);n.push(o)}return n}var a=t.indexOf(\".\");if(-1!==a){var u=e[t.substr(0,a)];return null==u?void 0:O(u,t.substr(a+1))}}function P(e,t,n){if(e&&void 0!==t&&!(\"isFrozen\"in Object&&Object.isFrozen(e)))if(\"string\"!=typeof t&&\"length\"in t){y(\"string\"!=typeof n&&\"length\"in n);for(var r=0,i=t.length;r<i;++r)P(e,t[r],n[r])}else{var o,a,u=t.indexOf(\".\");-1!==u?(o=t.substr(0,u),\"\"===(a=t.substr(u+1))?void 0===n?k(e)&&!isNaN(parseInt(o))?e.splice(o,1):delete e[o]:e[o]=n:P(u=!(u=e[o])||!m(e,o)?e[o]={}:u,a,n)):void 0===n?k(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=n}}function g(e){var t,n={};for(t in e)m(e,t)&&(n[t]=e[t]);return n}var t=[].concat;function w(e){return t.apply([],e)}var e=\"BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey\".split(\",\").concat(w([8,16,32,64].map(function(t){return[\"Int\",\"Uint\",\"Float\"].map(function(e){return e+t+\"Array\"})}))).filter(function(e){return f[e]}),K=new Set(e.map(function(e){return f[e]}));var E=null;function S(e){E=new WeakMap;e=function e(t){if(!t||\"object\"!=typeof t)return t;var n=E.get(t);if(n)return n;if(k(t)){n=[],E.set(t,n);for(var r=0,i=t.length;r<i;++r)n.push(e(t[r]))}else if(K.has(t.constructor))n=t;else{var o,a=c(t);for(o in n=a===Object.prototype?{}:Object.create(a),E.set(t,n),t)m(t,o)&&(n[o]=e(t[o]))}return n}(e);return E=null,e}var j={}.toString;function A(e){return j.call(e).slice(8,-1)}var C=\"undefined\"!=typeof Symbol?Symbol.iterator:\"@@iterator\",T=\"symbol\"==typeof C?function(e){var t;return null!=e&&(t=e[C])&&t.apply(e)}:function(){return null};function q(e,t){t=e.indexOf(t);return 0<=t&&e.splice(t,1),0<=t}var D={};function I(e){var t,n,r,i;if(1===arguments.length){if(k(e))return e.slice();if(this===D&&\"string\"==typeof e)return[e];if(i=T(e)){for(n=[];!(r=i.next()).done;)n.push(r.value);return n}if(null==e)return[e];if(\"number\"!=typeof(t=e.length))return[e];for(n=new Array(t);t--;)n[t]=e[t];return n}for(t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return n}var B=\"undefined\"!=typeof Symbol?function(e){return\"AsyncFunction\"===e[Symbol.toStringTag]}:function(){return!1},R=[\"Unknown\",\"Constraint\",\"Data\",\"TransactionInactive\",\"ReadOnly\",\"Version\",\"NotFound\",\"InvalidState\",\"InvalidAccess\",\"Abort\",\"Timeout\",\"QuotaExceeded\",\"Syntax\",\"DataClone\"],F=[\"Modify\",\"Bulk\",\"OpenFailed\",\"VersionChange\",\"Schema\",\"Upgrade\",\"InvalidTable\",\"MissingAPI\",\"NoSuchDatabase\",\"InvalidArgument\",\"SubTransaction\",\"Unsupported\",\"Internal\",\"DatabaseClosed\",\"PrematureCommit\",\"ForeignAwait\"].concat(R),M={VersionChanged:\"Database version changed by other database connection\",DatabaseClosed:\"Database has been closed\",Abort:\"Transaction aborted\",TransactionInactive:\"Transaction has already completed or failed\",MissingAPI:\"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb\"};function N(e,t){this.name=e,this.message=t}function L(e,t){return e+\". Errors: \"+Object.keys(t).map(function(e){return t[e].toString()}).filter(function(e,t,n){return n.indexOf(e)===t}).join(\"\\n\")}function U(e,t,n,r){this.failures=t,this.failedKeys=r,this.successCount=n,this.message=L(e,t)}function V(e,t){this.name=\"BulkError\",this.failures=Object.keys(t).map(function(e){return t[e]}),this.failuresByPos=t,this.message=L(e,this.failures)}o(N).from(Error).extend({toString:function(){return this.name+\": \"+this.message}}),o(U).from(N),o(V).from(N);var z=F.reduce(function(e,t){return e[t]=t+\"Error\",e},{}),W=N,Y=F.reduce(function(e,n){var r=n+\"Error\";function t(e,t){this.name=r,e?\"string\"==typeof e?(this.message=\"\".concat(e).concat(t?\"\\n \"+t:\"\"),this.inner=t||null):\"object\"==typeof e&&(this.message=\"\".concat(e.name,\" \").concat(e.message),this.inner=e):(this.message=M[n]||r,this.inner=null)}return o(t).from(W),e[n]=t,e},{});Y.Syntax=SyntaxError,Y.Type=TypeError,Y.Range=RangeError;var $=R.reduce(function(e,t){return e[t+\"Error\"]=Y[t],e},{});var Q=F.reduce(function(e,t){return-1===[\"Syntax\",\"Type\",\"Range\"].indexOf(t)&&(e[t+\"Error\"]=Y[t]),e},{});function G(){}function X(e){return e}function H(t,n){return null==t||t===X?n:function(e){return n(t(e))}}function J(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function Z(i,o){return i===G?o:function(){var e=i.apply(this,arguments);void 0!==e&&(arguments[0]=e);var t=this.onsuccess,n=this.onerror;this.onsuccess=null,this.onerror=null;var r=o.apply(this,arguments);return t&&(this.onsuccess=this.onsuccess?J(t,this.onsuccess):t),n&&(this.onerror=this.onerror?J(n,this.onerror):n),void 0!==r?r:e}}function ee(n,r){return n===G?r:function(){n.apply(this,arguments);var e=this.onsuccess,t=this.onerror;this.onsuccess=this.onerror=null,r.apply(this,arguments),e&&(this.onsuccess=this.onsuccess?J(e,this.onsuccess):e),t&&(this.onerror=this.onerror?J(t,this.onerror):t)}}function te(i,o){return i===G?o:function(e){var t=i.apply(this,arguments);a(e,t);var n=this.onsuccess,r=this.onerror;this.onsuccess=null,this.onerror=null;e=o.apply(this,arguments);return n&&(this.onsuccess=this.onsuccess?J(n,this.onsuccess):n),r&&(this.onerror=this.onerror?J(r,this.onerror):r),void 0===t?void 0===e?void 0:e:a(t,e)}}function ne(e,t){return e===G?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function re(i,o){return i===G?o:function(){var e=i.apply(this,arguments);if(e&&\"function\"==typeof e.then){for(var t=this,n=arguments.length,r=new Array(n);n--;)r[n]=arguments[n];return e.then(function(){return o.apply(t,r)})}return o.apply(this,arguments)}}Q.ModifyError=U,Q.DexieError=N,Q.BulkError=V;var ie=\"undefined\"!=typeof location&&/^(http|https):\\/\\/(localhost|127\\.0\\.0\\.1)/.test(location.href);function oe(e){ie=e}var ae={},ue=100,e=\"undefined\"==typeof Promise?[]:function(){var e=Promise.resolve();if(\"undefined\"==typeof crypto||!crypto.subtle)return[e,c(e),e];var t=crypto.subtle.digest(\"SHA-512\",new Uint8Array([0]));return[t,c(t),e]}(),R=e[0],F=e[1],e=e[2],F=F&&F.then,se=R&&R.constructor,ce=!!e;var le=function(e,t){be.push([e,t]),he&&(queueMicrotask(Se),he=!1)},fe=!0,he=!0,de=[],pe=[],ye=X,ve={id:\"global\",global:!0,ref:0,unhandleds:[],onunhandled:G,pgp:!1,env:{},finalize:G},me=ve,be=[],ge=0,we=[];function _e(e){if(\"object\"!=typeof this)throw new TypeError(\"Promises must be constructed via new\");this._listeners=[],this._lib=!1;var t=this._PSD=me;if(\"function\"!=typeof e){if(e!==ae)throw new TypeError(\"Not a function\");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&Oe(this,this._value))}this._state=null,this._value=null,++t.ref,function t(r,e){try{e(function(n){if(null===r._state){if(n===r)throw new TypeError(\"A promise cannot be resolved with itself.\");var e=r._lib&&je();n&&\"function\"==typeof n.then?t(r,function(e,t){n instanceof _e?n._then(e,t):n.then(e,t)}):(r._state=!0,r._value=n,Pe(r)),e&&Ae()}},Oe.bind(null,r))}catch(e){Oe(r,e)}}(this,e)}var xe={get:function(){var u=me,t=Fe;function e(n,r){var i=this,o=!u.global&&(u!==me||t!==Fe),a=o&&!Ue(),e=new _e(function(e,t){Ke(i,new ke(Qe(n,u,o,a),Qe(r,u,o,a),e,t,u))});return this._consoleTask&&(e._consoleTask=this._consoleTask),e}return e.prototype=ae,e},set:function(e){l(this,\"then\",e&&e.prototype===ae?xe:{get:function(){return e},set:xe.set})}};function ke(e,t,n,r,i){this.onFulfilled=\"function\"==typeof e?e:null,this.onRejected=\"function\"==typeof t?t:null,this.resolve=n,this.reject=r,this.psd=i}function Oe(e,t){var n,r;pe.push(t),null===e._state&&(n=e._lib&&je(),t=ye(t),e._state=!1,e._value=t,r=e,de.some(function(e){return e._value===r._value})||de.push(r),Pe(e),n&&Ae())}function Pe(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)Ke(e,t[n]);var i=e._PSD;--i.ref||i.finalize(),0===ge&&(++ge,le(function(){0==--ge&&Ce()},[]))}function Ke(e,t){if(null!==e._state){var n=e._state?t.onFulfilled:t.onRejected;if(null===n)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++ge,le(Ee,[n,e,t])}else e._listeners.push(t)}function Ee(e,t,n){try{var r,i=t._value;!t._state&&pe.length&&(pe=[]),r=ie&&t._consoleTask?t._consoleTask.run(function(){return e(i)}):e(i),t._state||-1!==pe.indexOf(i)||function(e){var t=de.length;for(;t;)if(de[--t]._value===e._value)return de.splice(t,1)}(t),n.resolve(r)}catch(e){n.reject(e)}finally{0==--ge&&Ce(),--n.psd.ref||n.psd.finalize()}}function Se(){$e(ve,function(){je()&&Ae()})}function je(){var e=fe;return he=fe=!1,e}function Ae(){var e,t,n;do{for(;0<be.length;)for(e=be,be=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}}while(0<be.length);he=fe=!0}function Ce(){var e=de;de=[],e.forEach(function(e){e._PSD.onunhandled.call(null,e._value,e)});for(var t=we.slice(0),n=t.length;n;)t[--n]()}function Te(e){return new _e(ae,!1,e)}function qe(n,r){var i=me;return function(){var e=je(),t=me;try{return We(i,!0),n.apply(this,arguments)}catch(e){r&&r(e)}finally{We(t,!1),e&&Ae()}}}r(_e.prototype,{then:xe,_then:function(e,t){Ke(this,new ke(null,null,e,t,me))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=e,n=arguments[1];return\"function\"==typeof t?this.then(null,function(e){return(e instanceof t?n:Te)(e)}):this.then(null,function(e){return(e&&e.name===t?n:Te)(e)})},finally:function(t){return this.then(function(e){return _e.resolve(t()).then(function(){return e})},function(e){return _e.resolve(t()).then(function(){return Te(e)})})},timeout:function(r,i){var o=this;return r<1/0?new _e(function(e,t){var n=setTimeout(function(){return t(new Y.Timeout(i))},r);o.then(e,t).finally(clearTimeout.bind(null,n))}):this}}),\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&l(_e.prototype,Symbol.toStringTag,\"Dexie.Promise\"),ve.env=Ye(),r(_e,{all:function(){var o=I.apply(null,arguments).map(Ve);return new _e(function(n,r){0===o.length&&n([]);var i=o.length;o.forEach(function(e,t){return _e.resolve(e).then(function(e){o[t]=e,--i||n(o)},r)})})},resolve:function(n){return n instanceof _e?n:n&&\"function\"==typeof n.then?new _e(function(e,t){n.then(e,t)}):new _e(ae,!0,n)},reject:Te,race:function(){var e=I.apply(null,arguments).map(Ve);return new _e(function(t,n){e.map(function(e){return _e.resolve(e).then(t,n)})})},PSD:{get:function(){return me},set:function(e){return me=e}},totalEchoes:{get:function(){return Fe}},newPSD:Ne,usePSD:$e,scheduler:{get:function(){return le},set:function(e){le=e}},rejectionMapper:{get:function(){return ye},set:function(e){ye=e}},follow:function(i,n){return new _e(function(e,t){return Ne(function(n,r){var e=me;e.unhandleds=[],e.onunhandled=r,e.finalize=J(function(){var t,e=this;t=function(){0===e.unhandleds.length?n():r(e.unhandleds[0])},we.push(function e(){t(),we.splice(we.indexOf(e),1)}),++ge,le(function(){0==--ge&&Ce()},[])},e.finalize),i()},n,e,t)})}}),se&&(se.allSettled&&l(_e,\"allSettled\",function(){var e=I.apply(null,arguments).map(Ve);return new _e(function(n){0===e.length&&n([]);var r=e.length,i=new Array(r);e.forEach(function(e,t){return _e.resolve(e).then(function(e){return i[t]={status:\"fulfilled\",value:e}},function(e){return i[t]={status:\"rejected\",reason:e}}).then(function(){return--r||n(i)})})})}),se.any&&\"undefined\"!=typeof AggregateError&&l(_e,\"any\",function(){var e=I.apply(null,arguments).map(Ve);return new _e(function(n,r){0===e.length&&r(new AggregateError([]));var i=e.length,o=new Array(i);e.forEach(function(e,t){return _e.resolve(e).then(function(e){return n(e)},function(e){o[t]=e,--i||r(new AggregateError(o))})})})}),se.withResolvers&&(_e.withResolvers=se.withResolvers));var De={awaits:0,echoes:0,id:0},Ie=0,Be=[],Re=0,Fe=0,Me=0;function Ne(e,t,n,r){var i=me,o=Object.create(i);o.parent=i,o.ref=0,o.global=!1,o.id=++Me,ve.env,o.env=ce?{Promise:_e,PromiseProp:{value:_e,configurable:!0,writable:!0},all:_e.all,race:_e.race,allSettled:_e.allSettled,any:_e.any,resolve:_e.resolve,reject:_e.reject}:{},t&&a(o,t),++i.ref,o.finalize=function(){--this.parent.ref||this.parent.finalize()};r=$e(o,e,n,r);return 0===o.ref&&o.finalize(),r}function Le(){return De.id||(De.id=++Ie),++De.awaits,De.echoes+=ue,De.id}function Ue(){return!!De.awaits&&(0==--De.awaits&&(De.id=0),De.echoes=De.awaits*ue,!0)}function Ve(e){return De.echoes&&e&&e.constructor===se?(Le(),e.then(function(e){return Ue(),e},function(e){return Ue(),Xe(e)})):e}function ze(){var e=Be[Be.length-1];Be.pop(),We(e,!1)}function We(e,t){var n,r=me;(t?!De.echoes||Re++&&e===me:!Re||--Re&&e===me)||queueMicrotask(t?function(e){++Fe,De.echoes&&0!=--De.echoes||(De.echoes=De.awaits=De.id=0),Be.push(me),We(e,!0)}.bind(null,e):ze),e!==me&&(me=e,r===ve&&(ve.env=Ye()),ce&&(n=ve.env.Promise,t=e.env,(r.global||e.global)&&(Object.defineProperty(f,\"Promise\",t.PromiseProp),n.all=t.all,n.race=t.race,n.resolve=t.resolve,n.reject=t.reject,t.allSettled&&(n.allSettled=t.allSettled),t.any&&(n.any=t.any))))}function Ye(){var e=f.Promise;return ce?{Promise:e,PromiseProp:Object.getOwnPropertyDescriptor(f,\"Promise\"),all:e.all,race:e.race,allSettled:e.allSettled,any:e.any,resolve:e.resolve,reject:e.reject}:{}}function $e(e,t,n,r,i){var o=me;try{return We(e,!0),t(n,r,i)}finally{We(o,!1)}}function Qe(t,n,r,i){return\"function\"!=typeof t?t:function(){var e=me;r&&Le(),We(n,!0);try{return t.apply(this,arguments)}finally{We(e,!1),i&&queueMicrotask(Ue)}}}function Ge(e){Promise===se&&0===De.echoes?0===Re?e():enqueueNativeMicroTask(e):setTimeout(e,0)}-1===(\"\"+F).indexOf(\"[native code]\")&&(Le=Ue=G);var Xe=_e.reject;var He=String.fromCharCode(65535),Je=\"Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.\",Ze=\"String expected.\",et=[],tt=\"__dbnames\",nt=\"readonly\",rt=\"readwrite\";function it(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}var ot={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function at(t){return\"string\"!=typeof t||/\\./.test(t)?function(e){return e}:function(e){return void 0===e[t]&&t in e&&delete(e=S(e))[t],e}}function ut(){throw Y.Type()}function st(e,t){try{var n=ct(e),r=ct(t);if(n!==r)return\"Array\"===n?1:\"Array\"===r?-1:\"binary\"===n?1:\"binary\"===r?-1:\"string\"===n?1:\"string\"===r?-1:\"Date\"===n?1:\"Date\"!==r?NaN:-1;switch(n){case\"number\":case\"Date\":case\"string\":return t<e?1:e<t?-1:0;case\"binary\":return function(e,t){for(var n=e.length,r=t.length,i=n<r?n:r,o=0;o<i;++o)if(e[o]!==t[o])return e[o]<t[o]?-1:1;return n===r?0:n<r?-1:1}(lt(e),lt(t));case\"Array\":return function(e,t){for(var n=e.length,r=t.length,i=n<r?n:r,o=0;o<i;++o){var a=st(e[o],t[o]);if(0!==a)return a}return n===r?0:n<r?-1:1}(e,t)}}catch(e){}return NaN}function ct(e){var t=typeof e;if(\"object\"!=t)return t;if(ArrayBuffer.isView(e))return\"binary\";e=A(e);return\"ArrayBuffer\"===e?\"binary\":e}function lt(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e)}var ft=(ht.prototype._trans=function(e,r,t){var n=this._tx||me.trans,i=this.name,o=ie&&\"undefined\"!=typeof console&&console.createTask&&console.createTask(\"Dexie: \".concat(\"readonly\"===e?\"read\":\"write\",\" \").concat(this.name));function a(e,t,n){if(!n.schema[i])throw new Y.NotFound(\"Table \"+i+\" not part of transaction\");return r(n.idbtrans,n)}var u=je();try{var s=n&&n.db._novip===this.db._novip?n===me.trans?n._promise(e,a,t):Ne(function(){return n._promise(e,a,t)},{trans:n,transless:me.transless||me}):function t(n,r,i,o){if(n.idbdb&&(n._state.openComplete||me.letThrough||n._vip)){var a=n._createTransaction(r,i,n._dbSchema);try{a.create(),n._state.PR1398_maxLoop=3}catch(e){return e.name===z.InvalidState&&n.isOpen()&&0<--n._state.PR1398_maxLoop?(console.warn(\"Dexie: Need to reopen db\"),n.close({disableAutoOpen:!1}),n.open().then(function(){return t(n,r,i,o)})):Xe(e)}return a._promise(r,function(e,t){return Ne(function(){return me.trans=a,o(e,t,a)})}).then(function(e){if(\"readwrite\"===r)try{a.idbtrans.commit()}catch(e){}return\"readonly\"===r?e:a._completion.then(function(){return e})})}if(n._state.openComplete)return Xe(new Y.DatabaseClosed(n._state.dbOpenError));if(!n._state.isBeingOpened){if(!n._state.autoOpen)return Xe(new Y.DatabaseClosed);n.open().catch(G)}return n._state.dbReadyPromise.then(function(){return t(n,r,i,o)})}(this.db,e,[this.name],a);return o&&(s._consoleTask=o,s=s.catch(function(e){return console.trace(e),Xe(e)})),s}finally{u&&Ae()}},ht.prototype.get=function(t,e){var n=this;return t&&t.constructor===Object?this.where(t).first(e):null==t?Xe(new Y.Type(\"Invalid argument to Table.get()\")):this._trans(\"readonly\",function(e){return n.core.get({trans:e,key:t}).then(function(e){return n.hook.reading.fire(e)})}).then(e)},ht.prototype.where=function(o){if(\"string\"==typeof o)return new this.db.WhereClause(this,o);if(k(o))return new this.db.WhereClause(this,\"[\".concat(o.join(\"+\"),\"]\"));var n=x(o);if(1===n.length)return this.where(n[0]).equals(o[n[0]]);var e=this.schema.indexes.concat(this.schema.primKey).filter(function(t){if(t.compound&&n.every(function(e){return 0<=t.keyPath.indexOf(e)})){for(var e=0;e<n.length;++e)if(-1===n.indexOf(t.keyPath[e]))return!1;return!0}return!1}).sort(function(e,t){return e.keyPath.length-t.keyPath.length})[0];if(e&&this.db._maxKey!==He){var t=e.keyPath.slice(0,n.length);return this.where(t).equals(t.map(function(e){return o[e]}))}!e&&ie&&console.warn(\"The query \".concat(JSON.stringify(o),\" on \").concat(this.name,\" would benefit from a \")+\"compound index [\".concat(n.join(\"+\"),\"]\"));var a=this.schema.idxByName;function u(e,t){return 0===st(e,t)}var r=n.reduce(function(e,t){var n=e[0],r=e[1],e=a[t],i=o[t];return[n||e,n||!e?it(r,e&&e.multi?function(e){e=O(e,t);return k(e)&&e.some(function(e){return u(i,e)})}:function(e){return u(i,O(e,t))}):r]},[null,null]),t=r[0],r=r[1];return t?this.where(t.name).equals(o[t.keyPath]).filter(r):e?this.filter(r):this.where(n).equals(\"\")},ht.prototype.filter=function(e){return this.toCollection().and(e)},ht.prototype.count=function(e){return this.toCollection().count(e)},ht.prototype.offset=function(e){return this.toCollection().offset(e)},ht.prototype.limit=function(e){return this.toCollection().limit(e)},ht.prototype.each=function(e){return this.toCollection().each(e)},ht.prototype.toArray=function(e){return this.toCollection().toArray(e)},ht.prototype.toCollection=function(){return new this.db.Collection(new this.db.WhereClause(this))},ht.prototype.orderBy=function(e){return new this.db.Collection(new this.db.WhereClause(this,k(e)?\"[\".concat(e.join(\"+\"),\"]\"):e))},ht.prototype.reverse=function(){return this.toCollection().reverse()},ht.prototype.mapToClass=function(r){var e,t=this.db,n=this.name;function i(){return null!==e&&e.apply(this,arguments)||this}(this.schema.mappedClass=r).prototype instanceof ut&&(function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(i,e=r),Object.defineProperty(i.prototype,\"db\",{get:function(){return t},enumerable:!1,configurable:!0}),i.prototype.table=function(){return n},r=i);for(var o=new Set,a=r.prototype;a;a=c(a))Object.getOwnPropertyNames(a).forEach(function(e){return o.add(e)});function u(e){if(!e)return e;var t,n=Object.create(r.prototype);for(t in e)if(!o.has(t))try{n[t]=e[t]}catch(e){}return n}return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=u,this.hook(\"reading\",u),r},ht.prototype.defineClass=function(){return this.mapToClass(function(e){a(this,e)})},ht.prototype.add=function(t,n){var r=this,e=this.schema.primKey,i=e.auto,o=e.keyPath,a=t;return o&&i&&(a=at(o)(t)),this._trans(\"readwrite\",function(e){return r.core.mutate({trans:e,type:\"add\",keys:null!=n?[n]:null,values:[a]})}).then(function(e){return e.numFailures?_e.reject(e.failures[0]):e.lastResult}).then(function(e){if(o)try{P(t,o,e)}catch(e){}return e})},ht.prototype.update=function(e,t){if(\"object\"!=typeof e||k(e))return this.where(\":id\").equals(e).modify(t);e=O(e,this.schema.primKey.keyPath);return void 0===e?Xe(new Y.InvalidArgument(\"Given object does not contain its primary key\")):this.where(\":id\").equals(e).modify(t)},ht.prototype.put=function(t,n){var r=this,e=this.schema.primKey,i=e.auto,o=e.keyPath,a=t;return o&&i&&(a=at(o)(t)),this._trans(\"readwrite\",function(e){return r.core.mutate({trans:e,type:\"put\",values:[a],keys:null!=n?[n]:null})}).then(function(e){return e.numFailures?_e.reject(e.failures[0]):e.lastResult}).then(function(e){if(o)try{P(t,o,e)}catch(e){}return e})},ht.prototype.delete=function(t){var n=this;return this._trans(\"readwrite\",function(e){return n.core.mutate({trans:e,type:\"delete\",keys:[t]})}).then(function(e){return e.numFailures?_e.reject(e.failures[0]):void 0})},ht.prototype.clear=function(){var t=this;return this._trans(\"readwrite\",function(e){return t.core.mutate({trans:e,type:\"deleteRange\",range:ot})}).then(function(e){return e.numFailures?_e.reject(e.failures[0]):void 0})},ht.prototype.bulkGet=function(t){var n=this;return this._trans(\"readonly\",function(e){return n.core.getMany({keys:t,trans:e}).then(function(e){return e.map(function(e){return n.hook.reading.fire(e)})})})},ht.prototype.bulkAdd=function(r,e,t){var o=this,a=Array.isArray(e)?e:void 0,u=(t=t||(a?void 0:e))?t.allKeys:void 0;return this._trans(\"readwrite\",function(e){var t=o.schema.primKey,n=t.auto,t=t.keyPath;if(t&&a)throw new Y.InvalidArgument(\"bulkAdd(): keys argument invalid on tables with inbound keys\");if(a&&a.length!==r.length)throw new Y.InvalidArgument(\"Arguments objects and keys must have the same length\");var i=r.length,t=t&&n?r.map(at(t)):r;return o.core.mutate({trans:e,type:\"add\",keys:a,values:t,wantResults:u}).then(function(e){var t=e.numFailures,n=e.results,r=e.lastResult,e=e.failures;if(0===t)return u?n:r;throw new V(\"\".concat(o.name,\".bulkAdd(): \").concat(t,\" of \").concat(i,\" operations failed\"),e)})})},ht.prototype.bulkPut=function(r,e,t){var o=this,a=Array.isArray(e)?e:void 0,u=(t=t||(a?void 0:e))?t.allKeys:void 0;return this._trans(\"readwrite\",function(e){var t=o.schema.primKey,n=t.auto,t=t.keyPath;if(t&&a)throw new Y.InvalidArgument(\"bulkPut(): keys argument invalid on tables with inbound keys\");if(a&&a.length!==r.length)throw new Y.InvalidArgument(\"Arguments objects and keys must have the same length\");var i=r.length,t=t&&n?r.map(at(t)):r;return o.core.mutate({trans:e,type:\"put\",keys:a,values:t,wantResults:u}).then(function(e){var t=e.numFailures,n=e.results,r=e.lastResult,e=e.failures;if(0===t)return u?n:r;throw new V(\"\".concat(o.name,\".bulkPut(): \").concat(t,\" of \").concat(i,\" operations failed\"),e)})})},ht.prototype.bulkUpdate=function(t){var h=this,n=this.core,r=t.map(function(e){return e.key}),i=t.map(function(e){return e.changes}),d=[];return this._trans(\"readwrite\",function(e){return n.getMany({trans:e,keys:r,cache:\"clone\"}).then(function(c){var l=[],f=[];t.forEach(function(e,t){var n=e.key,r=e.changes,i=c[t];if(i){for(var o=0,a=Object.keys(r);o<a.length;o++){var u=a[o],s=r[u];if(u===h.schema.primKey.keyPath){if(0!==st(s,n))throw new Y.Constraint(\"Cannot update primary key in bulkUpdate()\")}else P(i,u,s)}d.push(t),l.push(n),f.push(i)}});var s=l.length;return n.mutate({trans:e,type:\"put\",keys:l,values:f,updates:{keys:r,changeSpecs:i}}).then(function(e){var t=e.numFailures,n=e.failures;if(0===t)return s;for(var r=0,i=Object.keys(n);r<i.length;r++){var o,a=i[r],u=d[Number(a)];null!=u&&(o=n[a],delete n[a],n[u]=o)}throw new V(\"\".concat(h.name,\".bulkUpdate(): \").concat(t,\" of \").concat(s,\" operations failed\"),n)})})})},ht.prototype.bulkDelete=function(t){var r=this,i=t.length;return this._trans(\"readwrite\",function(e){return r.core.mutate({trans:e,type:\"delete\",keys:t})}).then(function(e){var t=e.numFailures,n=e.lastResult,e=e.failures;if(0===t)return n;throw new V(\"\".concat(r.name,\".bulkDelete(): \").concat(t,\" of \").concat(i,\" operations failed\"),e)})},ht);function ht(){}function dt(i){function t(e,t){if(t){for(var n=arguments.length,r=new Array(n-1);--n;)r[n-1]=arguments[n];return a[e].subscribe.apply(null,r),i}if(\"string\"==typeof e)return a[e]}var a={};t.addEventType=u;for(var e=1,n=arguments.length;e<n;++e)u(arguments[e]);return t;function u(e,n,r){if(\"object\"!=typeof e){var i;n=n||ne;var o={subscribers:[],fire:r=r||G,subscribe:function(e){-1===o.subscribers.indexOf(e)&&(o.subscribers.push(e),o.fire=n(o.fire,e))},unsubscribe:function(t){o.subscribers=o.subscribers.filter(function(e){return e!==t}),o.fire=o.subscribers.reduce(n,r)}};return a[e]=t[e]=o}x(i=e).forEach(function(e){var t=i[e];if(k(t))u(e,i[e][0],i[e][1]);else{if(\"asap\"!==t)throw new Y.InvalidArgument(\"Invalid event config\");var n=u(e,X,function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];n.subscribers.forEach(function(e){v(function(){e.apply(null,t)})})})}})}}function pt(e,t){return o(t).from({prototype:e}),t}function yt(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function vt(e,t){e.filter=it(e.filter,t)}function mt(e,t,n){var r=e.replayFilter;e.replayFilter=r?function(){return it(r(),t())}:t,e.justLimit=n&&!r}function bt(e,t){if(e.isPrimKey)return t.primaryKey;var n=t.getIndexByKeyPath(e.index);if(!n)throw new Y.Schema(\"KeyPath \"+e.index+\" on object store \"+t.name+\" is not indexed\");return n}function gt(e,t,n){var r=bt(e,t.schema);return t.openCursor({trans:n,values:!e.keysOnly,reverse:\"prev\"===e.dir,unique:!!e.unique,query:{index:r,range:e.range}})}function wt(e,o,t,n){var a=e.replayFilter?it(e.filter,e.replayFilter()):e.filter;if(e.or){var u={},r=function(e,t,n){var r,i;a&&!a(t,n,function(e){return t.stop(e)},function(e){return t.fail(e)})||(\"[object ArrayBuffer]\"===(i=\"\"+(r=t.primaryKey))&&(i=\"\"+new Uint8Array(r)),m(u,i)||(u[i]=!0,o(e,t,n)))};return Promise.all([e.or._iterate(r,t),_t(gt(e,n,t),e.algorithm,r,!e.keysOnly&&e.valueMapper)])}return _t(gt(e,n,t),it(e.algorithm,a),o,!e.keysOnly&&e.valueMapper)}function _t(e,r,i,o){var a=qe(o?function(e,t,n){return i(o(e),t,n)}:i);return e.then(function(n){if(n)return n.start(function(){var t=function(){return n.continue()};r&&!r(n,function(e){return t=e},function(e){n.stop(e),t=G},function(e){n.fail(e),t=G})||a(n.value,n,function(e){return t=e}),t()})})}var xt=(kt.prototype.execute=function(e){var t=this[\"@@propmod\"];if(void 0!==t.add){var n=t.add;if(k(n))return i(i([],k(e)?e:[],!0),n,!0).sort();if(\"number\"==typeof n)return(Number(e)||0)+n;if(\"bigint\"==typeof n)try{return BigInt(e)+n}catch(e){return BigInt(0)+n}throw new TypeError(\"Invalid term \".concat(n))}if(void 0!==t.remove){var r=t.remove;if(k(r))return k(e)?e.filter(function(e){return!r.includes(e)}).sort():[];if(\"number\"==typeof r)return Number(e)-r;if(\"bigint\"==typeof r)try{return BigInt(e)-r}catch(e){return BigInt(0)-r}throw new TypeError(\"Invalid subtrahend \".concat(r))}n=null===(n=t.replacePrefix)||void 0===n?void 0:n[0];return n&&\"string\"==typeof e&&e.startsWith(n)?t.replacePrefix[1]+e.substring(n.length):e},kt);function kt(e){this[\"@@propmod\"]=e}var Ot=(Pt.prototype._read=function(e,t){var n=this._ctx;return n.error?n.table._trans(null,Xe.bind(null,n.error)):n.table._trans(\"readonly\",e).then(t)},Pt.prototype._write=function(e){var t=this._ctx;return t.error?t.table._trans(null,Xe.bind(null,t.error)):t.table._trans(\"readwrite\",e,\"locked\")},Pt.prototype._addAlgorithm=function(e){var t=this._ctx;t.algorithm=it(t.algorithm,e)},Pt.prototype._iterate=function(e,t){return wt(this._ctx,e,t,this._ctx.table.core)},Pt.prototype.clone=function(e){var t=Object.create(this.constructor.prototype),n=Object.create(this._ctx);return e&&a(n,e),t._ctx=n,t},Pt.prototype.raw=function(){return this._ctx.valueMapper=null,this},Pt.prototype.each=function(t){var n=this._ctx;return this._read(function(e){return wt(n,t,e,n.table.core)})},Pt.prototype.count=function(e){var i=this;return this._read(function(e){var t=i._ctx,n=t.table.core;if(yt(t,!0))return n.count({trans:e,query:{index:bt(t,n.schema),range:t.range}}).then(function(e){return Math.min(e,t.limit)});var r=0;return wt(t,function(){return++r,!1},e,n).then(function(){return r})}).then(e)},Pt.prototype.sortBy=function(e,t){var n=e.split(\".\").reverse(),r=n[0],i=n.length-1;function o(e,t){return t?o(e[n[t]],t-1):e[r]}var a=\"next\"===this._ctx.dir?1:-1;function u(e,t){return st(o(e,i),o(t,i))*a}return this.toArray(function(e){return e.sort(u)}).then(t)},Pt.prototype.toArray=function(e){var o=this;return this._read(function(e){var t=o._ctx;if(\"next\"===t.dir&&yt(t,!0)&&0<t.limit){var n=t.valueMapper,r=bt(t,t.table.core.schema);return t.table.core.query({trans:e,limit:t.limit,values:!0,query:{index:r,range:t.range}}).then(function(e){e=e.result;return n?e.map(n):e})}var i=[];return wt(t,function(e){return i.push(e)},e,t.table.core).then(function(){return i})},e)},Pt.prototype.offset=function(t){var e=this._ctx;return t<=0||(e.offset+=t,yt(e)?mt(e,function(){var n=t;return function(e,t){return 0===n||(1===n?--n:t(function(){e.advance(n),n=0}),!1)}}):mt(e,function(){var e=t;return function(){return--e<0}})),this},Pt.prototype.limit=function(e){return this._ctx.limit=Math.min(this._ctx.limit,e),mt(this._ctx,function(){var r=e;return function(e,t,n){return--r<=0&&t(n),0<=r}},!0),this},Pt.prototype.until=function(r,i){return vt(this._ctx,function(e,t,n){return!r(e.value)||(t(n),i)}),this},Pt.prototype.first=function(e){return this.limit(1).toArray(function(e){return e[0]}).then(e)},Pt.prototype.last=function(e){return this.reverse().first(e)},Pt.prototype.filter=function(t){var e;return vt(this._ctx,function(e){return t(e.value)}),(e=this._ctx).isMatch=it(e.isMatch,t),this},Pt.prototype.and=function(e){return this.filter(e)},Pt.prototype.or=function(e){return new this.db.WhereClause(this._ctx.table,e,this)},Pt.prototype.reverse=function(){return this._ctx.dir=\"prev\"===this._ctx.dir?\"next\":\"prev\",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this},Pt.prototype.desc=function(){return this.reverse()},Pt.prototype.eachKey=function(n){var e=this._ctx;return e.keysOnly=!e.isMatch,this.each(function(e,t){n(t.key,t)})},Pt.prototype.eachUniqueKey=function(e){return this._ctx.unique=\"unique\",this.eachKey(e)},Pt.prototype.eachPrimaryKey=function(n){var e=this._ctx;return e.keysOnly=!e.isMatch,this.each(function(e,t){n(t.primaryKey,t)})},Pt.prototype.keys=function(e){var t=this._ctx;t.keysOnly=!t.isMatch;var n=[];return this.each(function(e,t){n.push(t.key)}).then(function(){return n}).then(e)},Pt.prototype.primaryKeys=function(e){var n=this._ctx;if(\"next\"===n.dir&&yt(n,!0)&&0<n.limit)return this._read(function(e){var t=bt(n,n.table.core.schema);return n.table.core.query({trans:e,values:!1,limit:n.limit,query:{index:t,range:n.range}})}).then(function(e){return e.result}).then(e);n.keysOnly=!n.isMatch;var r=[];return this.each(function(e,t){r.push(t.primaryKey)}).then(function(){return r}).then(e)},Pt.prototype.uniqueKeys=function(e){return this._ctx.unique=\"unique\",this.keys(e)},Pt.prototype.firstKey=function(e){return this.limit(1).keys(function(e){return e[0]}).then(e)},Pt.prototype.lastKey=function(e){return this.reverse().firstKey(e)},Pt.prototype.distinct=function(){var e=this._ctx,e=e.index&&e.table.schema.idxByName[e.index];if(!e||!e.multi)return this;var n={};return vt(this._ctx,function(e){var t=e.primaryKey.toString(),e=m(n,t);return n[t]=!0,!e}),this},Pt.prototype.modify=function(w){var n=this,r=this._ctx;return this._write(function(d){var a,u,p;p=\"function\"==typeof w?w:(a=x(w),u=a.length,function(e){for(var t=!1,n=0;n<u;++n){var r=a[n],i=w[r],o=O(e,r);i instanceof xt?(P(e,r,i.execute(o)),t=!0):o!==i&&(P(e,r,i),t=!0)}return t});var y=r.table.core,e=y.schema.primaryKey,v=e.outbound,m=e.extractKey,b=200,e=n.db._options.modifyChunkSize;e&&(b=\"object\"==typeof e?e[y.name]||e[\"*\"]||200:e);function g(e,t){var n=t.failures,t=t.numFailures;c+=e-t;for(var r=0,i=x(n);r<i.length;r++){var o=i[r];s.push(n[o])}}var s=[],c=0,t=[];return n.clone().primaryKeys().then(function(l){function f(s){var c=Math.min(b,l.length-s);return y.getMany({trans:d,keys:l.slice(s,s+c),cache:\"immutable\"}).then(function(e){for(var n=[],t=[],r=v?[]:null,i=[],o=0;o<c;++o){var a=e[o],u={value:S(a),primKey:l[s+o]};!1!==p.call(u,u.value,u)&&(null==u.value?i.push(l[s+o]):v||0===st(m(a),m(u.value))?(t.push(u.value),v&&r.push(l[s+o])):(i.push(l[s+o]),n.push(u.value)))}return Promise.resolve(0<n.length&&y.mutate({trans:d,type:\"add\",values:n}).then(function(e){for(var t in e.failures)i.splice(parseInt(t),1);g(n.length,e)})).then(function(){return(0<t.length||h&&\"object\"==typeof w)&&y.mutate({trans:d,type:\"put\",keys:r,values:t,criteria:h,changeSpec:\"function\"!=typeof w&&w,isAdditionalChunk:0<s}).then(function(e){return g(t.length,e)})}).then(function(){return(0<i.length||h&&w===Kt)&&y.mutate({trans:d,type:\"delete\",keys:i,criteria:h,isAdditionalChunk:0<s}).then(function(e){return g(i.length,e)})}).then(function(){return l.length>s+c&&f(s+b)})})}var h=yt(r)&&r.limit===1/0&&(\"function\"!=typeof w||w===Kt)&&{index:r.index,range:r.range};return f(0).then(function(){if(0<s.length)throw new U(\"Error modifying one or more objects\",s,c,t);return l.length})})})},Pt.prototype.delete=function(){var i=this._ctx,n=i.range;return yt(i)&&(i.isPrimKey||3===n.type)?this._write(function(e){var t=i.table.core.schema.primaryKey,r=n;return i.table.core.count({trans:e,query:{index:t,range:r}}).then(function(n){return i.table.core.mutate({trans:e,type:\"deleteRange\",range:r}).then(function(e){var t=e.failures;e.lastResult,e.results;e=e.numFailures;if(e)throw new U(\"Could not delete some values\",Object.keys(t).map(function(e){return t[e]}),n-e);return n-e})})}):this.modify(Kt)},Pt);function Pt(){}var Kt=function(e,t){return t.value=null};function Et(e,t){return e<t?-1:e===t?0:1}function St(e,t){return t<e?-1:e===t?0:1}function jt(e,t,n){e=e instanceof Dt?new e.Collection(e):e;return e._ctx.error=new(n||TypeError)(t),e}function At(e){return new e.Collection(e,function(){return qt(\"\")}).limit(0)}function Ct(e,s,n,r){var i,c,l,f,h,d,p,y=n.length;if(!n.every(function(e){return\"string\"==typeof e}))return jt(e,Ze);function t(e){i=\"next\"===e?function(e){return e.toUpperCase()}:function(e){return e.toLowerCase()},c=\"next\"===e?function(e){return e.toLowerCase()}:function(e){return e.toUpperCase()},l=\"next\"===e?Et:St;var t=n.map(function(e){return{lower:c(e),upper:i(e)}}).sort(function(e,t){return l(e.lower,t.lower)});f=t.map(function(e){return e.upper}),h=t.map(function(e){return e.lower}),p=\"next\"===(d=e)?\"\":r}t(\"next\");e=new e.Collection(e,function(){return Tt(f[0],h[y-1]+r)});e._ondirectionchange=function(e){t(e)};var v=0;return e._addAlgorithm(function(e,t,n){var r=e.key;if(\"string\"!=typeof r)return!1;var i=c(r);if(s(i,h,v))return!0;for(var o=null,a=v;a<y;++a){var u=function(e,t,n,r,i,o){for(var a=Math.min(e.length,r.length),u=-1,s=0;s<a;++s){var c=t[s];if(c!==r[s])return i(e[s],n[s])<0?e.substr(0,s)+n[s]+n.substr(s+1):i(e[s],r[s])<0?e.substr(0,s)+r[s]+n.substr(s+1):0<=u?e.substr(0,u)+t[u]+n.substr(u+1):null;i(e[s],c)<0&&(u=s)}return a<r.length&&\"next\"===o?e+n.substr(e.length):a<e.length&&\"prev\"===o?e.substr(0,n.length):u<0?null:e.substr(0,u)+r[u]+n.substr(u+1)}(r,i,f[a],h[a],l,d);null===u&&null===o?v=a+1:(null===o||0<l(o,u))&&(o=u)}return t(null!==o?function(){e.continue(o+p)}:n),!1}),e}function Tt(e,t,n,r){return{type:2,lower:e,upper:t,lowerOpen:n,upperOpen:r}}function qt(e){return{type:1,lower:e,upper:e}}var Dt=(Object.defineProperty(It.prototype,\"Collection\",{get:function(){return this._ctx.table.db.Collection},enumerable:!1,configurable:!0}),It.prototype.between=function(e,t,n,r){n=!1!==n,r=!0===r;try{return 0<this._cmp(e,t)||0===this._cmp(e,t)&&(n||r)&&(!n||!r)?At(this):new this.Collection(this,function(){return Tt(e,t,!n,!r)})}catch(e){return jt(this,Je)}},It.prototype.equals=function(e){return null==e?jt(this,Je):new this.Collection(this,function(){return qt(e)})},It.prototype.above=function(e){return null==e?jt(this,Je):new this.Collection(this,function(){return Tt(e,void 0,!0)})},It.prototype.aboveOrEqual=function(e){return null==e?jt(this,Je):new this.Collection(this,function(){return Tt(e,void 0,!1)})},It.prototype.below=function(e){return null==e?jt(this,Je):new this.Collection(this,function(){return Tt(void 0,e,!1,!0)})},It.prototype.belowOrEqual=function(e){return null==e?jt(this,Je):new this.Collection(this,function(){return Tt(void 0,e)})},It.prototype.startsWith=function(e){return\"string\"!=typeof e?jt(this,Ze):this.between(e,e+He,!0,!0)},It.prototype.startsWithIgnoreCase=function(e){return\"\"===e?this.startsWith(e):Ct(this,function(e,t){return 0===e.indexOf(t[0])},[e],He)},It.prototype.equalsIgnoreCase=function(e){return Ct(this,function(e,t){return e===t[0]},[e],\"\")},It.prototype.anyOfIgnoreCase=function(){var e=I.apply(D,arguments);return 0===e.length?At(this):Ct(this,function(e,t){return-1!==t.indexOf(e)},e,\"\")},It.prototype.startsWithAnyOfIgnoreCase=function(){var e=I.apply(D,arguments);return 0===e.length?At(this):Ct(this,function(t,e){return e.some(function(e){return 0===t.indexOf(e)})},e,He)},It.prototype.anyOf=function(){var t=this,i=I.apply(D,arguments),o=this._cmp;try{i.sort(o)}catch(e){return jt(this,Je)}if(0===i.length)return At(this);var e=new this.Collection(this,function(){return Tt(i[0],i[i.length-1])});e._ondirectionchange=function(e){o=\"next\"===e?t._ascending:t._descending,i.sort(o)};var a=0;return e._addAlgorithm(function(e,t,n){for(var r=e.key;0<o(r,i[a]);)if(++a===i.length)return t(n),!1;return 0===o(r,i[a])||(t(function(){e.continue(i[a])}),!1)}),e},It.prototype.notEqual=function(e){return this.inAnyRange([[-1/0,e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})},It.prototype.noneOf=function(){var e=I.apply(D,arguments);if(0===e.length)return new this.Collection(this);try{e.sort(this._ascending)}catch(e){return jt(this,Je)}var t=e.reduce(function(e,t){return e?e.concat([[e[e.length-1][1],t]]):[[-1/0,t]]},null);return t.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})},It.prototype.inAnyRange=function(e,t){var o=this,a=this._cmp,u=this._ascending,n=this._descending,s=this._min,c=this._max;if(0===e.length)return At(this);if(!e.every(function(e){return void 0!==e[0]&&void 0!==e[1]&&u(e[0],e[1])<=0}))return jt(this,\"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower\",Y.InvalidArgument);var r=!t||!1!==t.includeLowers,i=t&&!0===t.includeUppers;var l,f=u;function h(e,t){return f(e[0],t[0])}try{(l=e.reduce(function(e,t){for(var n=0,r=e.length;n<r;++n){var i=e[n];if(a(t[0],i[1])<0&&0<a(t[1],i[0])){i[0]=s(i[0],t[0]),i[1]=c(i[1],t[1]);break}}return n===r&&e.push(t),e},[])).sort(h)}catch(e){return jt(this,Je)}var d=0,p=i?function(e){return 0<u(e,l[d][1])}:function(e){return 0<=u(e,l[d][1])},y=r?function(e){return 0<n(e,l[d][0])}:function(e){return 0<=n(e,l[d][0])};var v=p,e=new this.Collection(this,function(){return Tt(l[0][0],l[l.length-1][1],!r,!i)});return e._ondirectionchange=function(e){f=\"next\"===e?(v=p,u):(v=y,n),l.sort(h)},e._addAlgorithm(function(e,t,n){for(var r,i=e.key;v(i);)if(++d===l.length)return t(n),!1;return!p(r=i)&&!y(r)||(0===o._cmp(i,l[d][1])||0===o._cmp(i,l[d][0])||t(function(){f===u?e.continue(l[d][0]):e.continue(l[d][1])}),!1)}),e},It.prototype.startsWithAnyOf=function(){var e=I.apply(D,arguments);return e.every(function(e){return\"string\"==typeof e})?0===e.length?At(this):this.inAnyRange(e.map(function(e){return[e,e+He]})):jt(this,\"startsWithAnyOf() only works with strings\")},It);function It(){}function Bt(t){return qe(function(e){return Rt(e),t(e.target.error),!1})}function Rt(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}var Ft=\"storagemutated\",Mt=\"x-storagemutated-1\",Nt=dt(null,Ft),Lt=(Ut.prototype._lock=function(){return y(!me.global),++this._reculock,1!==this._reculock||me.global||(me.lockOwnerFor=this),this},Ut.prototype._unlock=function(){if(y(!me.global),0==--this._reculock)for(me.global||(me.lockOwnerFor=null);0<this._blockedFuncs.length&&!this._locked();){var e=this._blockedFuncs.shift();try{$e(e[1],e[0])}catch(e){}}return this},Ut.prototype._locked=function(){return this._reculock&&me.lockOwnerFor!==this},Ut.prototype.create=function(t){var n=this;if(!this.mode)return this;var e=this.db.idbdb,r=this.db._state.dbOpenError;if(y(!this.idbtrans),!t&&!e)switch(r&&r.name){case\"DatabaseClosedError\":throw new Y.DatabaseClosed(r);case\"MissingAPIError\":throw new Y.MissingAPI(r.message,r);default:throw new Y.OpenFailed(r)}if(!this.active)throw new Y.TransactionInactive;return y(null===this._completion._state),(t=this.idbtrans=t||(this.db.core||e).transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability})).onerror=qe(function(e){Rt(e),n._reject(t.error)}),t.onabort=qe(function(e){Rt(e),n.active&&n._reject(new Y.Abort(t.error)),n.active=!1,n.on(\"abort\").fire(e)}),t.oncomplete=qe(function(){n.active=!1,n._resolve(),\"mutatedParts\"in t&&Nt.storagemutated.fire(t.mutatedParts)}),this},Ut.prototype._promise=function(n,r,i){var o=this;if(\"readwrite\"===n&&\"readwrite\"!==this.mode)return Xe(new Y.ReadOnly(\"Transaction is readonly\"));if(!this.active)return Xe(new Y.TransactionInactive);if(this._locked())return new _e(function(e,t){o._blockedFuncs.push([function(){o._promise(n,r,i).then(e,t)},me])});if(i)return Ne(function(){var e=new _e(function(e,t){o._lock();var n=r(e,t,o);n&&n.then&&n.then(e,t)});return e.finally(function(){return o._unlock()}),e._lib=!0,e});var e=new _e(function(e,t){var n=r(e,t,o);n&&n.then&&n.then(e,t)});return e._lib=!0,e},Ut.prototype._root=function(){return this.parent?this.parent._root():this},Ut.prototype.waitFor=function(e){var t,r=this._root(),i=_e.resolve(e);r._waitingFor?r._waitingFor=r._waitingFor.then(function(){return i}):(r._waitingFor=i,r._waitingQueue=[],t=r.idbtrans.objectStore(r.storeNames[0]),function e(){for(++r._spinCount;r._waitingQueue.length;)r._waitingQueue.shift()();r._waitingFor&&(t.get(-1/0).onsuccess=e)}());var o=r._waitingFor;return new _e(function(t,n){i.then(function(e){return r._waitingQueue.push(qe(t.bind(null,e)))},function(e){return r._waitingQueue.push(qe(n.bind(null,e)))}).finally(function(){r._waitingFor===o&&(r._waitingFor=null)})})},Ut.prototype.abort=function(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new Y.Abort))},Ut.prototype.table=function(e){var t=this._memoizedTables||(this._memoizedTables={});if(m(t,e))return t[e];var n=this.schema[e];if(!n)throw new Y.NotFound(\"Table \"+e+\" not part of transaction\");n=new this.db.Table(e,n,this);return n.core=this.db.core.table(e),t[e]=n},Ut);function Ut(){}function Vt(e,t,n,r,i,o,a){return{name:e,keyPath:t,unique:n,multi:r,auto:i,compound:o,src:(n&&!a?\"&\":\"\")+(r?\"*\":\"\")+(i?\"++\":\"\")+zt(t)}}function zt(e){return\"string\"==typeof e?e:e?\"[\"+[].join.call(e,\"+\")+\"]\":\"\"}function Wt(e,t,n){return{name:e,primKey:t,indexes:n,mappedClass:null,idxByName:(r=function(e){return[e.name,e]},n.reduce(function(e,t,n){n=r(t,n);return n&&(e[n[0]]=n[1]),e},{}))};var r}var Yt=function(e){try{return e.only([[]]),Yt=function(){return[[]]},[[]]}catch(e){return Yt=function(){return He},He}};function $t(t){return null==t?function(){}:\"string\"==typeof t?1===(n=t).split(\".\").length?function(e){return e[n]}:function(e){return O(e,n)}:function(e){return O(e,t)};var n}function Qt(e){return[].slice.call(e)}var Gt=0;function Xt(e){return null==e?\":id\":\"string\"==typeof e?e:\"[\".concat(e.join(\"+\"),\"]\")}function Ht(e,i,t){function _(e){if(3===e.type)return null;if(4===e.type)throw new Error(\"Cannot convert never type to IDBKeyRange\");var t=e.lower,n=e.upper,r=e.lowerOpen,e=e.upperOpen;return void 0===t?void 0===n?null:i.upperBound(n,!!e):void 0===n?i.lowerBound(t,!!r):i.bound(t,n,!!r,!!e)}function n(e){var h,w=e.name;return{name:w,schema:e,mutate:function(e){var y=e.trans,v=e.type,m=e.keys,b=e.values,g=e.range;return new Promise(function(t,e){t=qe(t);var n=y.objectStore(w),r=null==n.keyPath,i=\"put\"===v||\"add\"===v;if(!i&&\"delete\"!==v&&\"deleteRange\"!==v)throw new Error(\"Invalid operation type: \"+v);var o,a=(m||b||{length:1}).length;if(m&&b&&m.length!==b.length)throw new Error(\"Given keys array must have same length as given values array.\");if(0===a)return t({numFailures:0,failures:{},results:[],lastResult:void 0});function u(e){++l,Rt(e)}var s=[],c=[],l=0;if(\"deleteRange\"===v){if(4===g.type)return t({numFailures:l,failures:c,results:[],lastResult:void 0});3===g.type?s.push(o=n.clear()):s.push(o=n.delete(_(g)))}else{var r=i?r?[b,m]:[b,null]:[m,null],f=r[0],h=r[1];if(i)for(var d=0;d<a;++d)s.push(o=h&&void 0!==h[d]?n[v](f[d],h[d]):n[v](f[d])),o.onerror=u;else for(d=0;d<a;++d)s.push(o=n[v](f[d])),o.onerror=u}function p(e){e=e.target.result,s.forEach(function(e,t){return null!=e.error&&(c[t]=e.error)}),t({numFailures:l,failures:c,results:\"delete\"===v?m:s.map(function(e){return e.result}),lastResult:e})}o.onerror=function(e){u(e),p(e)},o.onsuccess=p})},getMany:function(e){var f=e.trans,h=e.keys;return new Promise(function(t,e){t=qe(t);for(var n,r=f.objectStore(w),i=h.length,o=new Array(i),a=0,u=0,s=function(e){e=e.target;o[e._pos]=e.result,++u===a&&t(o)},c=Bt(e),l=0;l<i;++l)null!=h[l]&&((n=r.get(h[l]))._pos=l,n.onsuccess=s,n.onerror=c,++a);0===a&&t(o)})},get:function(e){var r=e.trans,i=e.key;return new Promise(function(t,e){t=qe(t);var n=r.objectStore(w).get(i);n.onsuccess=function(e){return t(e.target.result)},n.onerror=Bt(e)})},query:(h=s,function(f){return new Promise(function(n,e){n=qe(n);var r,i,o,t=f.trans,a=f.values,u=f.limit,s=f.query,c=u===1/0?void 0:u,l=s.index,s=s.range,t=t.objectStore(w),l=l.isPrimaryKey?t:t.index(l.name),s=_(s);if(0===u)return n({result:[]});h?((c=a?l.getAll(s,c):l.getAllKeys(s,c)).onsuccess=function(e){return n({result:e.target.result})},c.onerror=Bt(e)):(r=0,i=!a&&\"openKeyCursor\"in l?l.openKeyCursor(s):l.openCursor(s),o=[],i.onsuccess=function(e){var t=i.result;return t?(o.push(a?t.value:t.primaryKey),++r===u?n({result:o}):void t.continue()):n({result:o})},i.onerror=Bt(e))})}),openCursor:function(e){var c=e.trans,o=e.values,a=e.query,u=e.reverse,l=e.unique;return new Promise(function(t,n){t=qe(t);var e=a.index,r=a.range,i=c.objectStore(w),i=e.isPrimaryKey?i:i.index(e.name),e=u?l?\"prevunique\":\"prev\":l?\"nextunique\":\"next\",s=!o&&\"openKeyCursor\"in i?i.openKeyCursor(_(r),e):i.openCursor(_(r),e);s.onerror=Bt(n),s.onsuccess=qe(function(e){var r,i,o,a,u=s.result;u?(u.___id=++Gt,u.done=!1,r=u.continue.bind(u),i=(i=u.continuePrimaryKey)&&i.bind(u),o=u.advance.bind(u),a=function(){throw new Error(\"Cursor not stopped\")},u.trans=c,u.stop=u.continue=u.continuePrimaryKey=u.advance=function(){throw new Error(\"Cursor not started\")},u.fail=qe(n),u.next=function(){var e=this,t=1;return this.start(function(){return t--?e.continue():e.stop()}).then(function(){return e})},u.start=function(e){function t(){if(s.result)try{e()}catch(e){u.fail(e)}else u.done=!0,u.start=function(){throw new Error(\"Cursor behind last entry\")},u.stop()}var n=new Promise(function(t,e){t=qe(t),s.onerror=Bt(e),u.fail=e,u.stop=function(e){u.stop=u.continue=u.continuePrimaryKey=u.advance=a,t(e)}});return s.onsuccess=qe(function(e){s.onsuccess=t,t()}),u.continue=r,u.continuePrimaryKey=i,u.advance=o,t(),n},t(u)):t(null)},n)})},count:function(e){var t=e.query,i=e.trans,o=t.index,a=t.range;return new Promise(function(t,e){var n=i.objectStore(w),r=o.isPrimaryKey?n:n.index(o.name),n=_(a),r=n?r.count(n):r.count();r.onsuccess=qe(function(e){return t(e.target.result)}),r.onerror=Bt(e)})}}}var r,o,a,u=(o=t,a=Qt((r=e).objectStoreNames),{schema:{name:r.name,tables:a.map(function(e){return o.objectStore(e)}).map(function(t){var e=t.keyPath,n=t.autoIncrement,r=k(e),i={},n={name:t.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:null==e,compound:r,keyPath:e,autoIncrement:n,unique:!0,extractKey:$t(e)},indexes:Qt(t.indexNames).map(function(e){return t.index(e)}).map(function(e){var t=e.name,n=e.unique,r=e.multiEntry,e=e.keyPath,r={name:t,compound:k(e),keyPath:e,unique:n,multiEntry:r,extractKey:$t(e)};return i[Xt(e)]=r}),getIndexByKeyPath:function(e){return i[Xt(e)]}};return i[\":id\"]=n.primaryKey,null!=e&&(i[Xt(e)]=n.primaryKey),n})},hasGetAll:0<a.length&&\"getAll\"in o.objectStore(a[0])&&!(\"undefined\"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\\/|Edge\\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\\/(\\d*)/))[1]<604)}),t=u.schema,s=u.hasGetAll,u=t.tables.map(n),c={};return u.forEach(function(e){return c[e.name]=e}),{stack:\"dbcore\",transaction:e.transaction.bind(e),table:function(e){if(!c[e])throw new Error(\"Table '\".concat(e,\"' not found\"));return c[e]},MIN_KEY:-1/0,MAX_KEY:Yt(i),schema:t}}function Jt(e,t,n,r){var i=n.IDBKeyRange;return n.indexedDB,{dbcore:(r=Ht(t,i,r),e.dbcore.reduce(function(e,t){t=t.create;return _(_({},e),t(e))},r))}}function Zt(n,e){var t=e.db,e=Jt(n._middlewares,t,n._deps,e);n.core=e.dbcore,n.tables.forEach(function(e){var t=e.name;n.core.schema.tables.some(function(e){return e.name===t})&&(e.core=n.core.table(t),n[t]instanceof n.Table&&(n[t].core=e.core))})}function en(i,e,t,o){t.forEach(function(n){var r=o[n];e.forEach(function(e){var t=function e(t,n){return h(t,n)||(t=c(t))&&e(t,n)}(e,n);(!t||\"value\"in t&&void 0===t.value)&&(e===i.Transaction.prototype||e instanceof i.Transaction?l(e,n,{get:function(){return this.table(n)},set:function(e){u(this,n,{value:e,writable:!0,configurable:!0,enumerable:!0})}}):e[n]=new i.Table(n,r))})})}function tn(n,e){e.forEach(function(e){for(var t in e)e[t]instanceof n.Table&&delete e[t]})}function nn(e,t){return e._cfg.version-t._cfg.version}function rn(n,r,i,e){var o=n._dbSchema;i.objectStoreNames.contains(\"$meta\")&&!o.$meta&&(o.$meta=Wt(\"$meta\",hn(\"\")[0],[]),n._storeNames.push(\"$meta\"));var a=n._createTransaction(\"readwrite\",n._storeNames,o);a.create(i),a._completion.catch(e);var u=a._reject.bind(a),s=me.transless||me;Ne(function(){return me.trans=a,me.transless=s,0!==r?(Zt(n,i),t=r,((e=a).storeNames.includes(\"$meta\")?e.table(\"$meta\").get(\"version\").then(function(e){return null!=e?e:t}):_e.resolve(t)).then(function(e){return c=e,l=a,f=i,t=[],e=(s=n)._versions,h=s._dbSchema=ln(0,s.idbdb,f),0!==(e=e.filter(function(e){return e._cfg.version>=c})).length?(e.forEach(function(u){t.push(function(){var t=h,e=u._cfg.dbschema;fn(s,t,f),fn(s,e,f),h=s._dbSchema=e;var n=an(t,e);n.add.forEach(function(e){un(f,e[0],e[1].primKey,e[1].indexes)}),n.change.forEach(function(e){if(e.recreate)throw new Y.Upgrade(\"Not yet support for changing primary key\");var t=f.objectStore(e.name);e.add.forEach(function(e){return cn(t,e)}),e.change.forEach(function(e){t.deleteIndex(e.name),cn(t,e)}),e.del.forEach(function(e){return t.deleteIndex(e)})});var r=u._cfg.contentUpgrade;if(r&&u._cfg.version>c){Zt(s,f),l._memoizedTables={};var i=g(e);n.del.forEach(function(e){i[e]=t[e]}),tn(s,[s.Transaction.prototype]),en(s,[s.Transaction.prototype],x(i),i),l.schema=i;var o,a=B(r);a&&Le();n=_e.follow(function(){var e;(o=r(l))&&a&&(e=Ue.bind(null,null),o.then(e,e))});return o&&\"function\"==typeof o.then?_e.resolve(o):n.then(function(){return o})}}),t.push(function(e){var t,n,r=u._cfg.dbschema;t=r,n=e,[].slice.call(n.db.objectStoreNames).forEach(function(e){return null==t[e]&&n.db.deleteObjectStore(e)}),tn(s,[s.Transaction.prototype]),en(s,[s.Transaction.prototype],s._storeNames,s._dbSchema),l.schema=s._dbSchema}),t.push(function(e){s.idbdb.objectStoreNames.contains(\"$meta\")&&(Math.ceil(s.idbdb.version/10)===u._cfg.version?(s.idbdb.deleteObjectStore(\"$meta\"),delete s._dbSchema.$meta,s._storeNames=s._storeNames.filter(function(e){return\"$meta\"!==e})):e.objectStore(\"$meta\").put(u._cfg.version,\"version\"))})}),function e(){return t.length?_e.resolve(t.shift()(l.idbtrans)).then(e):_e.resolve()}().then(function(){sn(h,f)})):_e.resolve();var s,c,l,f,t,h}).catch(u)):(x(o).forEach(function(e){un(i,e,o[e].primKey,o[e].indexes)}),Zt(n,i),void _e.follow(function(){return n.on.populate.fire(a)}).catch(u));var e,t})}function on(e,r){sn(e._dbSchema,r),r.db.version%10!=0||r.objectStoreNames.contains(\"$meta\")||r.db.createObjectStore(\"$meta\").add(Math.ceil(r.db.version/10-1),\"version\");var t=ln(0,e.idbdb,r);fn(e,e._dbSchema,r);for(var n=0,i=an(t,e._dbSchema).change;n<i.length;n++){var o=function(t){if(t.change.length||t.recreate)return console.warn(\"Unable to patch indexes of table \".concat(t.name,\" because it has changes on the type of index or primary key.\")),{value:void 0};var n=r.objectStore(t.name);t.add.forEach(function(e){ie&&console.debug(\"Dexie upgrade patch: Creating missing index \".concat(t.name,\".\").concat(e.src)),cn(n,e)})}(i[n]);if(\"object\"==typeof o)return o.value}}function an(e,t){var n,r={del:[],add:[],change:[]};for(n in e)t[n]||r.del.push(n);for(n in t){var i=e[n],o=t[n];if(i){var a={name:n,def:o,recreate:!1,del:[],add:[],change:[]};if(\"\"+(i.primKey.keyPath||\"\")!=\"\"+(o.primKey.keyPath||\"\")||i.primKey.auto!==o.primKey.auto)a.recreate=!0,r.change.push(a);else{var u=i.idxByName,s=o.idxByName,c=void 0;for(c in u)s[c]||a.del.push(c);for(c in s){var l=u[c],f=s[c];l?l.src!==f.src&&a.change.push(f):a.add.push(f)}(0<a.del.length||0<a.add.length||0<a.change.length)&&r.change.push(a)}}else r.add.push([n,o])}return r}function un(e,t,n,r){var i=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach(function(e){return cn(i,e)}),i}function sn(t,n){x(t).forEach(function(e){n.db.objectStoreNames.contains(e)||(ie&&console.debug(\"Dexie: Creating missing table\",e),un(n,e,t[e].primKey,t[e].indexes))})}function cn(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function ln(e,t,u){var s={};return b(t.objectStoreNames,0).forEach(function(e){for(var t=u.objectStore(e),n=Vt(zt(a=t.keyPath),a||\"\",!0,!1,!!t.autoIncrement,a&&\"string\"!=typeof a,!0),r=[],i=0;i<t.indexNames.length;++i){var o=t.index(t.indexNames[i]),a=o.keyPath,o=Vt(o.name,a,!!o.unique,!!o.multiEntry,!1,a&&\"string\"!=typeof a,!1);r.push(o)}s[e]=Wt(e,n,r)}),s}function fn(e,t,n){for(var r=n.db.objectStoreNames,i=0;i<r.length;++i){var o=r[i],a=n.objectStore(o);e._hasGetAll=\"getAll\"in a;for(var u=0;u<a.indexNames.length;++u){var s=a.indexNames[u],c=a.index(s).keyPath,l=\"string\"==typeof c?c:\"[\"+b(c).join(\"+\")+\"]\";!t[o]||(c=t[o].idxByName[l])&&(c.name=s,delete t[o].idxByName[l],t[o].idxByName[s]=c)}}\"undefined\"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\\/|Edge\\/)/.test(navigator.userAgent)&&f.WorkerGlobalScope&&f instanceof f.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\\/(\\d*)/))[1]<604&&(e._hasGetAll=!1)}function hn(e){return e.split(\",\").map(function(e,t){var n=(e=e.trim()).replace(/([&*]|\\+\\+)/g,\"\"),r=/^\\[/.test(n)?n.match(/^\\[(.*)\\]$/)[1].split(\"+\"):n;return Vt(n,r||null,/\\&/.test(e),/\\*/.test(e),/\\+\\+/.test(e),k(r),0===t)})}var dn=(pn.prototype._parseStoresSpec=function(r,i){x(r).forEach(function(e){if(null!==r[e]){var t=hn(r[e]),n=t.shift();if(n.unique=!0,n.multi)throw new Y.Schema(\"Primary key cannot be multi-valued\");t.forEach(function(e){if(e.auto)throw new Y.Schema(\"Only primary key can be marked as autoIncrement (++)\");if(!e.keyPath)throw new Y.Schema(\"Index must have a name and cannot be an empty string\")}),i[e]=Wt(e,n,t)}})},pn.prototype.stores=function(e){var t=this.db;this._cfg.storesSource=this._cfg.storesSource?a(this._cfg.storesSource,e):e;var e=t._versions,n={},r={};return e.forEach(function(e){a(n,e._cfg.storesSource),r=e._cfg.dbschema={},e._parseStoresSpec(n,r)}),t._dbSchema=r,tn(t,[t._allTables,t,t.Transaction.prototype]),en(t,[t._allTables,t,t.Transaction.prototype,this._cfg.tables],x(r),r),t._storeNames=x(r),this},pn.prototype.upgrade=function(e){return this._cfg.contentUpgrade=re(this._cfg.contentUpgrade||G,e),this},pn);function pn(){}function yn(e,t){var n=e._dbNamesDB;return n||(n=e._dbNamesDB=new er(tt,{addons:[],indexedDB:e,IDBKeyRange:t})).version(1).stores({dbnames:\"name\"}),n.table(\"dbnames\")}function vn(e){return e&&\"function\"==typeof e.databases}function mn(e){return Ne(function(){return me.letThrough=!0,e()})}function bn(e){return!(\"from\"in e)}var gn=function(e,t){if(!this){var n=new gn;return e&&\"d\"in e&&a(n,e),n}a(this,arguments.length?{d:1,from:e,to:1<arguments.length?t:e}:{d:0})};function wn(e,t,n){var r=st(t,n);if(!isNaN(r)){if(0<r)throw RangeError();if(bn(e))return a(e,{from:t,to:n,d:1});var i=e.l,r=e.r;if(st(n,e.from)<0)return i?wn(i,t,n):e.l={from:t,to:n,d:1,l:null,r:null},On(e);if(0<st(t,e.to))return r?wn(r,t,n):e.r={from:t,to:n,d:1,l:null,r:null},On(e);st(t,e.from)<0&&(e.from=t,e.l=null,e.d=r?r.d+1:1),0<st(n,e.to)&&(e.to=n,e.r=null,e.d=e.l?e.l.d+1:1);n=!e.r;i&&!e.l&&_n(e,i),r&&n&&_n(e,r)}}function _n(e,t){bn(t)||function e(t,n){var r=n.from,i=n.to,o=n.l,n=n.r;wn(t,r,i),o&&e(t,o),n&&e(t,n)}(e,t)}function xn(e,t){var n=kn(t),r=n.next();if(r.done)return!1;for(var i=r.value,o=kn(e),a=o.next(i.from),u=a.value;!r.done&&!a.done;){if(st(u.from,i.to)<=0&&0<=st(u.to,i.from))return!0;st(i.from,u.from)<0?i=(r=n.next(u.from)).value:u=(a=o.next(i.from)).value}return!1}function kn(e){var n=bn(e)?null:{s:0,n:e};return{next:function(e){for(var t=0<arguments.length;n;)switch(n.s){case 0:if(n.s=1,t)for(;n.n.l&&st(e,n.n.from)<0;)n={up:n,n:n.n.l,s:1};else for(;n.n.l;)n={up:n,n:n.n.l,s:1};case 1:if(n.s=2,!t||st(e,n.n.to)<=0)return{value:n.n,done:!1};case 2:if(n.n.r){n.s=3,n={up:n,n:n.n.r,s:0};continue}case 3:n=n.up}return{done:!0}}}}function On(e){var t,n,r=((null===(t=e.r)||void 0===t?void 0:t.d)||0)-((null===(n=e.l)||void 0===n?void 0:n.d)||0),i=1<r?\"r\":r<-1?\"l\":\"\";i&&(t=\"r\"==i?\"l\":\"r\",n=_({},e),r=e[i],e.from=r.from,e.to=r.to,e[i]=r[i],n[i]=r[t],(e[t]=n).d=Pn(n)),e.d=Pn(e)}function Pn(e){var t=e.r,e=e.l;return(t?e?Math.max(t.d,e.d):t.d:e?e.d:0)+1}function Kn(t,n){return x(n).forEach(function(e){t[e]?_n(t[e],n[e]):t[e]=function e(t){var n,r,i={};for(n in t)m(t,n)&&(r=t[n],i[n]=!r||\"object\"!=typeof r||K.has(r.constructor)?r:e(r));return i}(n[e])}),t}function En(t,n){return t.all||n.all||Object.keys(t).some(function(e){return n[e]&&xn(n[e],t[e])})}r(gn.prototype,((F={add:function(e){return _n(this,e),this},addKey:function(e){return wn(this,e,e),this},addKeys:function(e){var t=this;return e.forEach(function(e){return wn(t,e,e)}),this},hasKey:function(e){var t=kn(this).next(e).value;return t&&st(t.from,e)<=0&&0<=st(t.to,e)}})[C]=function(){return kn(this)},F));var Sn={},jn={},An=!1;function Cn(e){Kn(jn,e),An||(An=!0,setTimeout(function(){An=!1,Tn(jn,!(jn={}))},0))}function Tn(e,t){void 0===t&&(t=!1);var n=new Set;if(e.all)for(var r=0,i=Object.values(Sn);r<i.length;r++)qn(a=i[r],e,n,t);else for(var o in e){var a,u=/^idb\\:\\/\\/(.*)\\/(.*)\\//.exec(o);u&&(o=u[1],u=u[2],(a=Sn[\"idb://\".concat(o,\"/\").concat(u)])&&qn(a,e,n,t))}n.forEach(function(e){return e()})}function qn(e,t,n,r){for(var i=[],o=0,a=Object.entries(e.queries.query);o<a.length;o++){for(var u=a[o],s=u[0],c=[],l=0,f=u[1];l<f.length;l++){var h=f[l];En(t,h.obsSet)?h.subscribers.forEach(function(e){return n.add(e)}):r&&c.push(h)}r&&i.push([s,c])}if(r)for(var d=0,p=i;d<p.length;d++){var y=p[d],s=y[0],c=y[1];e.queries.query[s]=c}}function Dn(f){var h=f._state,r=f._deps.indexedDB;if(h.isBeingOpened||f.idbdb)return h.dbReadyPromise.then(function(){return h.dbOpenError?Xe(h.dbOpenError):f});h.isBeingOpened=!0,h.dbOpenError=null,h.openComplete=!1;var t=h.openCanceller,d=Math.round(10*f.verno),p=!1;function e(){if(h.openCanceller!==t)throw new Y.DatabaseClosed(\"db.open() was cancelled\")}function y(){return new _e(function(s,n){if(e(),!r)throw new Y.MissingAPI;var c=f.name,l=h.autoSchema||!d?r.open(c):r.open(c,d);if(!l)throw new Y.MissingAPI;l.onerror=Bt(n),l.onblocked=qe(f._fireOnBlocked),l.onupgradeneeded=qe(function(e){var t;v=l.transaction,h.autoSchema&&!f._options.allowEmptyDB?(l.onerror=Rt,v.abort(),l.result.close(),(t=r.deleteDatabase(c)).onsuccess=t.onerror=qe(function(){n(new Y.NoSuchDatabase(\"Database \".concat(c,\" doesnt exist\")))})):(v.onerror=Bt(n),e=e.oldVersion>Math.pow(2,62)?0:e.oldVersion,m=e<1,f.idbdb=l.result,p&&on(f,v),rn(f,e/10,v,n))},n),l.onsuccess=qe(function(){v=null;var e,t,n,r,i,o=f.idbdb=l.result,a=b(o.objectStoreNames);if(0<a.length)try{var u=o.transaction(1===(r=a).length?r[0]:r,\"readonly\");if(h.autoSchema)t=o,n=u,(e=f).verno=t.version/10,n=e._dbSchema=ln(0,t,n),e._storeNames=b(t.objectStoreNames,0),en(e,[e._allTables],x(n),n);else if(fn(f,f._dbSchema,u),((i=an(ln(0,(i=f).idbdb,u),i._dbSchema)).add.length||i.change.some(function(e){return e.add.length||e.change.length}))&&!p)return console.warn(\"Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this.\"),o.close(),d=o.version+1,p=!0,s(y());Zt(f,u)}catch(e){}et.push(f),o.onversionchange=qe(function(e){h.vcFired=!0,f.on(\"versionchange\").fire(e)}),o.onclose=qe(function(e){f.on(\"close\").fire(e)}),m&&(i=f._deps,u=c,o=i.indexedDB,i=i.IDBKeyRange,vn(o)||u===tt||yn(o,i).put({name:u}).catch(G)),s()},n)}).catch(function(e){switch(null==e?void 0:e.name){case\"UnknownError\":if(0<h.PR1398_maxLoop)return h.PR1398_maxLoop--,console.warn(\"Dexie: Workaround for Chrome UnknownError on open()\"),y();break;case\"VersionError\":if(0<d)return d=0,y()}return _e.reject(e)})}var n,i=h.dbReadyResolve,v=null,m=!1;return _e.race([t,(\"undefined\"==typeof navigator?_e.resolve():!navigator.userAgentData&&/Safari\\//.test(navigator.userAgent)&&!/Chrom(e|ium)\\//.test(navigator.userAgent)&&indexedDB.databases?new Promise(function(e){function t(){return indexedDB.databases().finally(e)}n=setInterval(t,100),t()}).finally(function(){return clearInterval(n)}):Promise.resolve()).then(y)]).then(function(){return e(),h.onReadyBeingFired=[],_e.resolve(mn(function(){return f.on.ready.fire(f.vip)})).then(function e(){if(0<h.onReadyBeingFired.length){var t=h.onReadyBeingFired.reduce(re,G);return h.onReadyBeingFired=[],_e.resolve(mn(function(){return t(f.vip)})).then(e)}})}).finally(function(){h.openCanceller===t&&(h.onReadyBeingFired=null,h.isBeingOpened=!1)}).catch(function(e){h.dbOpenError=e;try{v&&v.abort()}catch(e){}return t===h.openCanceller&&f._close(),Xe(e)}).finally(function(){h.openComplete=!0,i()}).then(function(){var n;return m&&(n={},f.tables.forEach(function(t){t.schema.indexes.forEach(function(e){e.name&&(n[\"idb://\".concat(f.name,\"/\").concat(t.name,\"/\").concat(e.name)]=new gn(-1/0,[[[]]]))}),n[\"idb://\".concat(f.name,\"/\").concat(t.name,\"/\")]=n[\"idb://\".concat(f.name,\"/\").concat(t.name,\"/:dels\")]=new gn(-1/0,[[[]]])}),Nt(Ft).fire(n),Tn(n,!0)),f})}function In(t){function e(e){return t.next(e)}var r=n(e),i=n(function(e){return t.throw(e)});function n(n){return function(e){var t=n(e),e=t.value;return t.done?e:e&&\"function\"==typeof e.then?e.then(r,i):k(e)?Promise.all(e).then(r,i):r(e)}}return n(e)()}function Bn(e,t,n){for(var r=k(e)?e.slice():[e],i=0;i<n;++i)r.push(t);return r}var Rn={stack:\"dbcore\",name:\"VirtualIndexMiddleware\",level:1,create:function(f){return _(_({},f),{table:function(e){var a=f.table(e),t=a.schema,u={},s=[];function c(e,t,n){var r=Xt(e),i=u[r]=u[r]||[],o=null==e?0:\"string\"==typeof e?1:e.length,a=0<t,a=_(_({},n),{name:a?\"\".concat(r,\"(virtual-from:\").concat(n.name,\")\"):n.name,lowLevelIndex:n,isVirtual:a,keyTail:t,keyLength:o,extractKey:$t(e),unique:!a&&n.unique});return i.push(a),a.isPrimaryKey||s.push(a),1<o&&c(2===o?e[0]:e.slice(0,o-1),t+1,n),i.sort(function(e,t){return e.keyTail-t.keyTail}),a}e=c(t.primaryKey.keyPath,0,t.primaryKey);u[\":id\"]=[e];for(var n=0,r=t.indexes;n<r.length;n++){var i=r[n];c(i.keyPath,0,i)}function l(e){var t,n=e.query.index;return n.isVirtual?_(_({},e),{query:{index:n.lowLevelIndex,range:(t=e.query.range,n=n.keyTail,{type:1===t.type?2:t.type,lower:Bn(t.lower,t.lowerOpen?f.MAX_KEY:f.MIN_KEY,n),lowerOpen:!0,upper:Bn(t.upper,t.upperOpen?f.MIN_KEY:f.MAX_KEY,n),upperOpen:!0})}}):e}return _(_({},a),{schema:_(_({},t),{primaryKey:e,indexes:s,getIndexByKeyPath:function(e){return(e=u[Xt(e)])&&e[0]}}),count:function(e){return a.count(l(e))},query:function(e){return a.query(l(e))},openCursor:function(t){var e=t.query.index,r=e.keyTail,n=e.isVirtual,i=e.keyLength;return n?a.openCursor(l(t)).then(function(e){return e&&o(e)}):a.openCursor(t);function o(n){return Object.create(n,{continue:{value:function(e){null!=e?n.continue(Bn(e,t.reverse?f.MAX_KEY:f.MIN_KEY,r)):t.unique?n.continue(n.key.slice(0,i).concat(t.reverse?f.MIN_KEY:f.MAX_KEY,r)):n.continue()}},continuePrimaryKey:{value:function(e,t){n.continuePrimaryKey(Bn(e,f.MAX_KEY,r),t)}},primaryKey:{get:function(){return n.primaryKey}},key:{get:function(){var e=n.key;return 1===i?e[0]:e.slice(0,i)}},value:{get:function(){return n.value}}})}}})}})}};function Fn(i,o,a,u){return a=a||{},u=u||\"\",x(i).forEach(function(e){var t,n,r;m(o,e)?(t=i[e],n=o[e],\"object\"==typeof t&&\"object\"==typeof n&&t&&n?(r=A(t))!==A(n)?a[u+e]=o[e]:\"Object\"===r?Fn(t,n,a,u+e+\".\"):t!==n&&(a[u+e]=o[e]):t!==n&&(a[u+e]=o[e])):a[u+e]=void 0}),x(o).forEach(function(e){m(i,e)||(a[u+e]=o[e])}),a}function Mn(e,t){return\"delete\"===t.type?t.keys:t.keys||t.values.map(e.extractKey)}var Nn={stack:\"dbcore\",name:\"HooksMiddleware\",level:2,create:function(e){return _(_({},e),{table:function(r){var y=e.table(r),v=y.schema.primaryKey;return _(_({},y),{mutate:function(e){var t=me.trans,n=t.table(r).hook,h=n.deleting,d=n.creating,p=n.updating;switch(e.type){case\"add\":if(d.fire===G)break;return t._promise(\"readwrite\",function(){return a(e)},!0);case\"put\":if(d.fire===G&&p.fire===G)break;return t._promise(\"readwrite\",function(){return a(e)},!0);case\"delete\":if(h.fire===G)break;return t._promise(\"readwrite\",function(){return a(e)},!0);case\"deleteRange\":if(h.fire===G)break;return t._promise(\"readwrite\",function(){return function n(r,i,o){return y.query({trans:r,values:!1,query:{index:v,range:i},limit:o}).then(function(e){var t=e.result;return a({type:\"delete\",keys:t,trans:r}).then(function(e){return 0<e.numFailures?Promise.reject(e.failures[0]):t.length<o?{failures:[],numFailures:0,lastResult:void 0}:n(r,_(_({},i),{lower:t[t.length-1],lowerOpen:!0}),o)})})}(e.trans,e.range,1e4)},!0)}return y.mutate(e);function a(c){var e,t,n,l=me.trans,f=c.keys||Mn(v,c);if(!f)throw new Error(\"Keys missing\");return\"delete\"!==(c=\"add\"===c.type||\"put\"===c.type?_(_({},c),{keys:f}):_({},c)).type&&(c.values=i([],c.values,!0)),c.keys&&(c.keys=i([],c.keys,!0)),e=y,n=f,(\"add\"===(t=c).type?Promise.resolve([]):e.getMany({trans:t.trans,keys:n,cache:\"immutable\"})).then(function(u){var s=f.map(function(e,t){var n,r,i,o=u[t],a={onerror:null,onsuccess:null};return\"delete\"===c.type?h.fire.call(a,e,o,l):\"add\"===c.type||void 0===o?(n=d.fire.call(a,e,c.values[t],l),null==e&&null!=n&&(c.keys[t]=e=n,v.outbound||P(c.values[t],v.keyPath,e))):(n=Fn(o,c.values[t]),(r=p.fire.call(a,n,e,o,l))&&(i=c.values[t],Object.keys(r).forEach(function(e){m(i,e)?i[e]=r[e]:P(i,e,r[e])}))),a});return y.mutate(c).then(function(e){for(var t=e.failures,n=e.results,r=e.numFailures,e=e.lastResult,i=0;i<f.length;++i){var o=(n||f)[i],a=s[i];null==o?a.onerror&&a.onerror(t[i]):a.onsuccess&&a.onsuccess(\"put\"===c.type&&u[i]?c.values[i]:o)}return{failures:t,results:n,numFailures:r,lastResult:e}}).catch(function(t){return s.forEach(function(e){return e.onerror&&e.onerror(t)}),Promise.reject(t)})})}}})}})}};function Ln(e,t,n){try{if(!t)return null;if(t.keys.length<e.length)return null;for(var r=[],i=0,o=0;i<t.keys.length&&o<e.length;++i)0===st(t.keys[i],e[o])&&(r.push(n?S(t.values[i]):t.values[i]),++o);return r.length===e.length?r:null}catch(e){return null}}var Un={stack:\"dbcore\",level:-1,create:function(t){return{table:function(e){var n=t.table(e);return _(_({},n),{getMany:function(t){if(!t.cache)return n.getMany(t);var e=Ln(t.keys,t.trans._cache,\"clone\"===t.cache);return e?_e.resolve(e):n.getMany(t).then(function(e){return t.trans._cache={keys:t.keys,values:\"clone\"===t.cache?S(e):e},e})},mutate:function(e){return\"add\"!==e.type&&(e.trans._cache=null),n.mutate(e)}})}}}};function Vn(e,t){return\"readonly\"===e.trans.mode&&!!e.subscr&&!e.trans.explicit&&\"disabled\"!==e.trans.db._options.cache&&!t.schema.primaryKey.outbound}function zn(e,t){switch(e){case\"query\":return t.values&&!t.unique;case\"get\":case\"getMany\":case\"count\":case\"openCursor\":return!1}}var Wn={stack:\"dbcore\",level:0,name:\"Observability\",create:function(b){var g=b.schema.name,w=new gn(b.MIN_KEY,b.MAX_KEY);return _(_({},b),{transaction:function(e,t,n){if(me.subscr&&\"readonly\"!==t)throw new Y.ReadOnly(\"Readwrite transaction in liveQuery context. Querier source: \".concat(me.querier));return b.transaction(e,t,n)},table:function(d){var p=b.table(d),y=p.schema,v=y.primaryKey,e=y.indexes,c=v.extractKey,l=v.outbound,m=v.autoIncrement&&e.filter(function(e){return e.compound&&e.keyPath.includes(v.keyPath)}),t=_(_({},p),{mutate:function(a){function u(e){return e=\"idb://\".concat(g,\"/\").concat(d,\"/\").concat(e),n[e]||(n[e]=new gn)}var e,o,s,t=a.trans,n=a.mutatedParts||(a.mutatedParts={}),r=u(\"\"),i=u(\":dels\"),c=a.type,l=\"deleteRange\"===a.type?[a.range]:\"delete\"===a.type?[a.keys]:a.values.length<50?[Mn(v,a).filter(function(e){return e}),a.values]:[],f=l[0],h=l[1],l=a.trans._cache;return k(f)?(r.addKeys(f),(l=\"delete\"===c||f.length===h.length?Ln(f,l):null)||i.addKeys(f),(l||h)&&(e=u,o=l,s=h,y.indexes.forEach(function(t){var n=e(t.name||\"\");function r(e){return null!=e?t.extractKey(e):null}function i(e){return t.multiEntry&&k(e)?e.forEach(function(e){return n.addKey(e)}):n.addKey(e)}(o||s).forEach(function(e,t){var n=o&&r(o[t]),t=s&&r(s[t]);0!==st(n,t)&&(null!=n&&i(n),null!=t&&i(t))})}))):f?(h={from:null!==(h=f.lower)&&void 0!==h?h:b.MIN_KEY,to:null!==(h=f.upper)&&void 0!==h?h:b.MAX_KEY},i.add(h),r.add(h)):(r.add(w),i.add(w),y.indexes.forEach(function(e){return u(e.name).add(w)})),p.mutate(a).then(function(o){return!f||\"add\"!==a.type&&\"put\"!==a.type||(r.addKeys(o.results),m&&m.forEach(function(t){for(var e=a.values.map(function(e){return t.extractKey(e)}),n=t.keyPath.findIndex(function(e){return e===v.keyPath}),r=0,i=o.results.length;r<i;++r)e[r][n]=o.results[r];u(t.name).addKeys(e)})),t.mutatedParts=Kn(t.mutatedParts||{},n),o})}}),e=function(e){var t=e.query,e=t.index,t=t.range;return[e,new gn(null!==(e=t.lower)&&void 0!==e?e:b.MIN_KEY,null!==(t=t.upper)&&void 0!==t?t:b.MAX_KEY)]},f={get:function(e){return[v,new gn(e.key)]},getMany:function(e){return[v,(new gn).addKeys(e.keys)]},count:e,query:e,openCursor:e};return x(f).forEach(function(s){t[s]=function(i){var e=me.subscr,t=!!e,n=Vn(me,p)&&zn(s,i)?i.obsSet={}:e;if(t){var r=function(e){e=\"idb://\".concat(g,\"/\").concat(d,\"/\").concat(e);return n[e]||(n[e]=new gn)},o=r(\"\"),a=r(\":dels\"),e=f[s](i),t=e[0],e=e[1];if((\"query\"===s&&t.isPrimaryKey&&!i.values?a:r(t.name||\"\")).add(e),!t.isPrimaryKey){if(\"count\"!==s){var u=\"query\"===s&&l&&i.values&&p.query(_(_({},i),{values:!1}));return p[s].apply(this,arguments).then(function(t){if(\"query\"===s){if(l&&i.values)return u.then(function(e){e=e.result;return o.addKeys(e),t});var e=i.values?t.result.map(c):t.result;(i.values?o:a).addKeys(e)}else if(\"openCursor\"===s){var n=t,r=i.values;return n&&Object.create(n,{key:{get:function(){return a.addKey(n.primaryKey),n.key}},primaryKey:{get:function(){var e=n.primaryKey;return a.addKey(e),e}},value:{get:function(){return r&&o.addKey(n.primaryKey),n.value}}})}return t})}a.add(w)}}return p[s].apply(this,arguments)}}),t}})}};function Yn(e,t,n){if(0===n.numFailures)return t;if(\"deleteRange\"===t.type)return null;var r=t.keys?t.keys.length:\"values\"in t&&t.values?t.values.length:1;if(n.numFailures===r)return null;t=_({},t);return k(t.keys)&&(t.keys=t.keys.filter(function(e,t){return!(t in n.failures)})),\"values\"in t&&k(t.values)&&(t.values=t.values.filter(function(e,t){return!(t in n.failures)})),t}function $n(e,t){return n=e,(void 0===(r=t).lower||(r.lowerOpen?0<st(n,r.lower):0<=st(n,r.lower)))&&(e=e,void 0===(t=t).upper||(t.upperOpen?st(e,t.upper)<0:st(e,t.upper)<=0));var n,r}function Qn(e,d,t,n,r,i){if(!t||0===t.length)return e;var o=d.query.index,p=o.multiEntry,y=d.query.range,v=n.schema.primaryKey.extractKey,m=o.extractKey,a=(o.lowLevelIndex||o).extractKey,t=t.reduce(function(e,t){var n=e,r=[];if(\"add\"===t.type||\"put\"===t.type)for(var i=new gn,o=t.values.length-1;0<=o;--o){var a,u=t.values[o],s=v(u);i.hasKey(s)||(a=m(u),(p&&k(a)?a.some(function(e){return $n(e,y)}):$n(a,y))&&(i.addKey(s),r.push(u)))}switch(t.type){case\"add\":var c=(new gn).addKeys(d.values?e.map(function(e){return v(e)}):e),n=e.concat(d.values?r.filter(function(e){e=v(e);return!c.hasKey(e)&&(c.addKey(e),!0)}):r.map(function(e){return v(e)}).filter(function(e){return!c.hasKey(e)&&(c.addKey(e),!0)}));break;case\"put\":var l=(new gn).addKeys(t.values.map(function(e){return v(e)}));n=e.filter(function(e){return!l.hasKey(d.values?v(e):e)}).concat(d.values?r:r.map(function(e){return v(e)}));break;case\"delete\":var f=(new gn).addKeys(t.keys);n=e.filter(function(e){return!f.hasKey(d.values?v(e):e)});break;case\"deleteRange\":var h=t.range;n=e.filter(function(e){return!$n(v(e),h)})}return n},e);return t===e?e:(t.sort(function(e,t){return st(a(e),a(t))||st(v(e),v(t))}),d.limit&&d.limit<1/0&&(t.length>d.limit?t.length=d.limit:e.length===d.limit&&t.length<d.limit&&(r.dirty=!0)),i?Object.freeze(t):t)}function Gn(e,t){return 0===st(e.lower,t.lower)&&0===st(e.upper,t.upper)&&!!e.lowerOpen==!!t.lowerOpen&&!!e.upperOpen==!!t.upperOpen}function Xn(e,t){return function(e,t,n,r){if(void 0===e)return void 0!==t?-1:0;if(void 0===t)return 1;if(0===(t=st(e,t))){if(n&&r)return 0;if(n)return 1;if(r)return-1}return t}(e.lower,t.lower,e.lowerOpen,t.lowerOpen)<=0&&0<=function(e,t,n,r){if(void 0===e)return void 0!==t?1:0;if(void 0===t)return-1;if(0===(t=st(e,t))){if(n&&r)return 0;if(n)return-1;if(r)return 1}return t}(e.upper,t.upper,e.upperOpen,t.upperOpen)}function Hn(n,r,i,e){n.subscribers.add(i),e.addEventListener(\"abort\",function(){var e,t;n.subscribers.delete(i),0===n.subscribers.size&&(e=n,t=r,setTimeout(function(){0===e.subscribers.size&&q(t,e)},3e3))})}var Jn={stack:\"dbcore\",level:0,name:\"Cache\",create:function(k){var O=k.schema.name;return _(_({},k),{transaction:function(g,w,e){var _,t,x=k.transaction(g,w,e);return\"readwrite\"===w&&(t=(_=new AbortController).signal,e=function(b){return function(){if(_.abort(),\"readwrite\"===w){for(var t=new Set,e=0,n=g;e<n.length;e++){var r=n[e],i=Sn[\"idb://\".concat(O,\"/\").concat(r)];if(i){var o=k.table(r),a=i.optimisticOps.filter(function(e){return e.trans===x});if(x._explicit&&b&&x.mutatedParts)for(var u=0,s=Object.values(i.queries.query);u<s.length;u++)for(var c=0,l=(d=s[u]).slice();c<l.length;c++)En((p=l[c]).obsSet,x.mutatedParts)&&(q(d,p),p.subscribers.forEach(function(e){return t.add(e)}));else if(0<a.length){i.optimisticOps=i.optimisticOps.filter(function(e){return e.trans!==x});for(var f=0,h=Object.values(i.queries.query);f<h.length;f++)for(var d,p,y,v=0,m=(d=h[f]).slice();v<m.length;v++)null!=(p=m[v]).res&&x.mutatedParts&&(b&&!p.dirty?(y=Object.isFrozen(p.res),y=Qn(p.res,p.req,a,o,p,y),p.dirty?(q(d,p),p.subscribers.forEach(function(e){return t.add(e)})):y!==p.res&&(p.res=y,p.promise=_e.resolve({result:y}))):(p.dirty&&q(d,p),p.subscribers.forEach(function(e){return t.add(e)})))}}}t.forEach(function(e){return e()})}}},x.addEventListener(\"abort\",e(!1),{signal:t}),x.addEventListener(\"error\",e(!1),{signal:t}),x.addEventListener(\"complete\",e(!0),{signal:t})),x},table:function(c){var l=k.table(c),i=l.schema.primaryKey;return _(_({},l),{mutate:function(t){var e=me.trans;if(i.outbound||\"disabled\"===e.db._options.cache||e.explicit||\"readwrite\"!==e.idbtrans.mode)return l.mutate(t);var n=Sn[\"idb://\".concat(O,\"/\").concat(c)];if(!n)return l.mutate(t);e=l.mutate(t);return\"add\"!==t.type&&\"put\"!==t.type||!(50<=t.values.length||Mn(i,t).some(function(e){return null==e}))?(n.optimisticOps.push(t),t.mutatedParts&&Cn(t.mutatedParts),e.then(function(e){0<e.numFailures&&(q(n.optimisticOps,t),(e=Yn(0,t,e))&&n.optimisticOps.push(e),t.mutatedParts&&Cn(t.mutatedParts))}),e.catch(function(){q(n.optimisticOps,t),t.mutatedParts&&Cn(t.mutatedParts)})):e.then(function(r){var e=Yn(0,_(_({},t),{values:t.values.map(function(e,t){var n;if(r.failures[t])return e;e=null!==(n=i.keyPath)&&void 0!==n&&n.includes(\".\")?S(e):_({},e);return P(e,i.keyPath,r.results[t]),e})}),r);n.optimisticOps.push(e),queueMicrotask(function(){return t.mutatedParts&&Cn(t.mutatedParts)})}),e},query:function(t){if(!Vn(me,l)||!zn(\"query\",t))return l.query(t);var i=\"immutable\"===(null===(o=me.trans)||void 0===o?void 0:o.db._options.cache),e=me,n=e.requery,r=e.signal,o=function(e,t,n,r){var i=Sn[\"idb://\".concat(e,\"/\").concat(t)];if(!i)return[];if(!(t=i.queries[n]))return[null,!1,i,null];var o=t[(r.query?r.query.index.name:null)||\"\"];if(!o)return[null,!1,i,null];switch(n){case\"query\":var a=o.find(function(e){return e.req.limit===r.limit&&e.req.values===r.values&&Gn(e.req.query.range,r.query.range)});return a?[a,!0,i,o]:[o.find(function(e){return(\"limit\"in e.req?e.req.limit:1/0)>=r.limit&&(!r.values||e.req.values)&&Xn(e.req.query.range,r.query.range)}),!1,i,o];case\"count\":a=o.find(function(e){return Gn(e.req.query.range,r.query.range)});return[a,!!a,i,o]}}(O,c,\"query\",t),a=o[0],e=o[1],u=o[2],s=o[3];return a&&e?a.obsSet=t.obsSet:(e=l.query(t).then(function(e){var t=e.result;if(a&&(a.res=t),i){for(var n=0,r=t.length;n<r;++n)Object.freeze(t[n]);Object.freeze(t)}else e.result=S(t);return e}).catch(function(e){return s&&a&&q(s,a),Promise.reject(e)}),a={obsSet:t.obsSet,promise:e,subscribers:new Set,type:\"query\",req:t,dirty:!1},s?s.push(a):(s=[a],(u=u||(Sn[\"idb://\".concat(O,\"/\").concat(c)]={queries:{query:{},count:{}},objs:new Map,optimisticOps:[],unsignaledParts:{}})).queries.query[t.query.index.name||\"\"]=s)),Hn(a,s,n,r),a.promise.then(function(e){return{result:Qn(e.result,t,null==u?void 0:u.optimisticOps,l,a,i)}})}})}})}};function Zn(e,r){return new Proxy(e,{get:function(e,t,n){return\"db\"===t?r:Reflect.get(e,t,n)}})}var er=(tr.prototype.version=function(t){if(isNaN(t)||t<.1)throw new Y.Type(\"Given version is not a positive number\");if(t=Math.round(10*t)/10,this.idbdb||this._state.isBeingOpened)throw new Y.Schema(\"Cannot add version when database is open\");this.verno=Math.max(this.verno,t);var e=this._versions,n=e.filter(function(e){return e._cfg.version===t})[0];return n||(n=new this.Version(t),e.push(n),e.sort(nn),n.stores({}),this._state.autoSchema=!1,n)},tr.prototype._whenReady=function(e){var n=this;return this.idbdb&&(this._state.openComplete||me.letThrough||this._vip)?e():new _e(function(e,t){if(n._state.openComplete)return t(new Y.DatabaseClosed(n._state.dbOpenError));if(!n._state.isBeingOpened){if(!n._state.autoOpen)return void t(new Y.DatabaseClosed);n.open().catch(G)}n._state.dbReadyPromise.then(e,t)}).then(e)},tr.prototype.use=function(e){var t=e.stack,n=e.create,r=e.level,i=e.name;i&&this.unuse({stack:t,name:i});e=this._middlewares[t]||(this._middlewares[t]=[]);return e.push({stack:t,create:n,level:null==r?10:r,name:i}),e.sort(function(e,t){return e.level-t.level}),this},tr.prototype.unuse=function(e){var t=e.stack,n=e.name,r=e.create;return t&&this._middlewares[t]&&(this._middlewares[t]=this._middlewares[t].filter(function(e){return r?e.create!==r:!!n&&e.name!==n})),this},tr.prototype.open=function(){var e=this;return $e(ve,function(){return Dn(e)})},tr.prototype._close=function(){var n=this._state,e=et.indexOf(this);if(0<=e&&et.splice(e,1),this.idbdb){try{this.idbdb.close()}catch(e){}this.idbdb=null}n.isBeingOpened||(n.dbReadyPromise=new _e(function(e){n.dbReadyResolve=e}),n.openCanceller=new _e(function(e,t){n.cancelOpen=t}))},tr.prototype.close=function(e){var t=(void 0===e?{disableAutoOpen:!0}:e).disableAutoOpen,e=this._state;t?(e.isBeingOpened&&e.cancelOpen(new Y.DatabaseClosed),this._close(),e.autoOpen=!1,e.dbOpenError=new Y.DatabaseClosed):(this._close(),e.autoOpen=this._options.autoOpen||e.isBeingOpened,e.openComplete=!1,e.dbOpenError=null)},tr.prototype.delete=function(n){var i=this;void 0===n&&(n={disableAutoOpen:!0});var o=0<arguments.length&&\"object\"!=typeof arguments[0],a=this._state;return new _e(function(r,t){function e(){i.close(n);var e=i._deps.indexedDB.deleteDatabase(i.name);e.onsuccess=qe(function(){var e,t,n;e=i._deps,t=i.name,n=e.indexedDB,e=e.IDBKeyRange,vn(n)||t===tt||yn(n,e).delete(t).catch(G),r()}),e.onerror=Bt(t),e.onblocked=i._fireOnBlocked}if(o)throw new Y.InvalidArgument(\"Invalid closeOptions argument to db.delete()\");a.isBeingOpened?a.dbReadyPromise.then(e):e()})},tr.prototype.backendDB=function(){return this.idbdb},tr.prototype.isOpen=function(){return null!==this.idbdb},tr.prototype.hasBeenClosed=function(){var e=this._state.dbOpenError;return e&&\"DatabaseClosed\"===e.name},tr.prototype.hasFailed=function(){return null!==this._state.dbOpenError},tr.prototype.dynamicallyOpened=function(){return this._state.autoSchema},Object.defineProperty(tr.prototype,\"tables\",{get:function(){var t=this;return x(this._allTables).map(function(e){return t._allTables[e]})},enumerable:!1,configurable:!0}),tr.prototype.transaction=function(){var e=function(e,t,n){var r=arguments.length;if(r<2)throw new Y.InvalidArgument(\"Too few arguments\");for(var i=new Array(r-1);--r;)i[r-1]=arguments[r];return n=i.pop(),[e,w(i),n]}.apply(this,arguments);return this._transaction.apply(this,e)},tr.prototype._transaction=function(e,t,n){var r=this,i=me.trans;i&&i.db===this&&-1===e.indexOf(\"!\")||(i=null);var o,a,u=-1!==e.indexOf(\"?\");e=e.replace(\"!\",\"\").replace(\"?\",\"\");try{if(a=t.map(function(e){e=e instanceof r.Table?e.name:e;if(\"string\"!=typeof e)throw new TypeError(\"Invalid table argument to Dexie.transaction(). Only Table or String are allowed\");return e}),\"r\"==e||e===nt)o=nt;else{if(\"rw\"!=e&&e!=rt)throw new Y.InvalidArgument(\"Invalid transaction mode: \"+e);o=rt}if(i){if(i.mode===nt&&o===rt){if(!u)throw new Y.SubTransaction(\"Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY\");i=null}i&&a.forEach(function(e){if(i&&-1===i.storeNames.indexOf(e)){if(!u)throw new Y.SubTransaction(\"Table \"+e+\" not included in parent transaction.\");i=null}}),u&&i&&!i.active&&(i=null)}}catch(n){return i?i._promise(null,function(e,t){t(n)}):Xe(n)}var s=function i(o,a,u,s,c){return _e.resolve().then(function(){var e=me.transless||me,t=o._createTransaction(a,u,o._dbSchema,s);if(t.explicit=!0,e={trans:t,transless:e},s)t.idbtrans=s.idbtrans;else try{t.create(),t.idbtrans._explicit=!0,o._state.PR1398_maxLoop=3}catch(e){return e.name===z.InvalidState&&o.isOpen()&&0<--o._state.PR1398_maxLoop?(console.warn(\"Dexie: Need to reopen db\"),o.close({disableAutoOpen:!1}),o.open().then(function(){return i(o,a,u,null,c)})):Xe(e)}var n,r=B(c);return r&&Le(),e=_e.follow(function(){var e;(n=c.call(t,t))&&(r?(e=Ue.bind(null,null),n.then(e,e)):\"function\"==typeof n.next&&\"function\"==typeof n.throw&&(n=In(n)))},e),(n&&\"function\"==typeof n.then?_e.resolve(n).then(function(e){return t.active?e:Xe(new Y.PrematureCommit(\"Transaction committed too early. See http://bit.ly/2kdckMn\"))}):e.then(function(){return n})).then(function(e){return s&&t._resolve(),t._completion.then(function(){return e})}).catch(function(e){return t._reject(e),Xe(e)})})}.bind(null,this,o,a,i,n);return i?i._promise(o,s,\"lock\"):me.trans?$e(me.transless,function(){return r._whenReady(s)}):this._whenReady(s)},tr.prototype.table=function(e){if(!m(this._allTables,e))throw new Y.InvalidTable(\"Table \".concat(e,\" does not exist\"));return this._allTables[e]},tr);function tr(e,t){var o=this;this._middlewares={},this.verno=0;var n=tr.dependencies;this._options=t=_({addons:tr.addons,autoOpen:!0,indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange,cache:\"cloned\"},t),this._deps={indexedDB:t.indexedDB,IDBKeyRange:t.IDBKeyRange};n=t.addons;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;var a,r,u,i,s,c={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:G,dbReadyPromise:null,cancelOpen:G,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3,autoOpen:t.autoOpen};c.dbReadyPromise=new _e(function(e){c.dbReadyResolve=e}),c.openCanceller=new _e(function(e,t){c.cancelOpen=t}),this._state=c,this.name=e,this.on=dt(this,\"populate\",\"blocked\",\"versionchange\",\"close\",{ready:[re,G]}),this.on.ready.subscribe=p(this.on.ready.subscribe,function(i){return function(n,r){tr.vip(function(){var t,e=o._state;e.openComplete?(e.dbOpenError||_e.resolve().then(n),r&&i(n)):e.onReadyBeingFired?(e.onReadyBeingFired.push(n),r&&i(n)):(i(n),t=o,r||i(function e(){t.on.ready.unsubscribe(n),t.on.ready.unsubscribe(e)}))})}}),this.Collection=(a=this,pt(Ot.prototype,function(e,t){this.db=a;var n=ot,r=null;if(t)try{n=t()}catch(e){r=e}var i=e._ctx,t=i.table,e=t.hook.reading.fire;this._ctx={table:t,index:i.index,isPrimKey:!i.index||t.schema.primKey.keyPath&&i.index===t.schema.primKey.name,range:n,keysOnly:!1,dir:\"next\",unique:\"\",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:r,or:i.or,valueMapper:e!==X?e:null}})),this.Table=(r=this,pt(ft.prototype,function(e,t,n){this.db=r,this._tx=n,this.name=e,this.schema=t,this.hook=r._allTables[e]?r._allTables[e].hook:dt(null,{creating:[Z,G],reading:[H,X],updating:[te,G],deleting:[ee,G]})})),this.Transaction=(u=this,pt(Lt.prototype,function(e,t,n,r,i){var o=this;this.db=u,this.mode=e,this.storeNames=t,this.schema=n,this.chromeTransactionDurability=r,this.idbtrans=null,this.on=dt(this,\"complete\",\"error\",\"abort\"),this.parent=i||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new _e(function(e,t){o._resolve=e,o._reject=t}),this._completion.then(function(){o.active=!1,o.on.complete.fire()},function(e){var t=o.active;return o.active=!1,o.on.error.fire(e),o.parent?o.parent._reject(e):t&&o.idbtrans&&o.idbtrans.abort(),Xe(e)})})),this.Version=(i=this,pt(dn.prototype,function(e){this.db=i,this._cfg={version:e,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}})),this.WhereClause=(s=this,pt(Dt.prototype,function(e,t,n){if(this.db=s,this._ctx={table:e,index:\":id\"===t?null:t,or:n},this._cmp=this._ascending=st,this._descending=function(e,t){return st(t,e)},this._max=function(e,t){return 0<st(e,t)?e:t},this._min=function(e,t){return st(e,t)<0?e:t},this._IDBKeyRange=s._deps.IDBKeyRange,!this._IDBKeyRange)throw new Y.MissingAPI})),this.on(\"versionchange\",function(e){0<e.newVersion?console.warn(\"Another connection wants to upgrade database '\".concat(o.name,\"'. Closing db now to resume the upgrade.\")):console.warn(\"Another connection wants to delete database '\".concat(o.name,\"'. Closing db now to resume the delete request.\")),o.close({disableAutoOpen:!1})}),this.on(\"blocked\",function(e){!e.newVersion||e.newVersion<e.oldVersion?console.warn(\"Dexie.delete('\".concat(o.name,\"') was blocked\")):console.warn(\"Upgrade '\".concat(o.name,\"' blocked by other connection holding version \").concat(e.oldVersion/10))}),this._maxKey=Yt(t.IDBKeyRange),this._createTransaction=function(e,t,n,r){return new o.Transaction(e,t,n,o._options.chromeTransactionDurability,r)},this._fireOnBlocked=function(t){o.on(\"blocked\").fire(t),et.filter(function(e){return e.name===o.name&&e!==o&&!e._state.vcFired}).map(function(e){return e.on(\"versionchange\").fire(t)})},this.use(Un),this.use(Jn),this.use(Wn),this.use(Rn),this.use(Nn);var l=new Proxy(this,{get:function(e,t,n){if(\"_vip\"===t)return!0;if(\"table\"===t)return function(e){return Zn(o.table(e),l)};var r=Reflect.get(e,t,n);return r instanceof ft?Zn(r,l):\"tables\"===t?r.map(function(e){return Zn(e,l)}):\"_createTransaction\"===t?function(){return Zn(r.apply(this,arguments),l)}:r}});this.vip=l,n.forEach(function(e){return e(o)})}var nr,F=\"undefined\"!=typeof Symbol&&\"observable\"in Symbol?Symbol.observable:\"@@observable\",rr=(ir.prototype.subscribe=function(e,t,n){return this._subscribe(e&&\"function\"!=typeof e?e:{next:e,error:t,complete:n})},ir.prototype[F]=function(){return this},ir);function ir(e){this._subscribe=e}try{nr={indexedDB:f.indexedDB||f.mozIndexedDB||f.webkitIndexedDB||f.msIndexedDB,IDBKeyRange:f.IDBKeyRange||f.webkitIDBKeyRange}}catch(e){nr={indexedDB:null,IDBKeyRange:null}}function or(h){var d,p=!1,e=new rr(function(r){var i=B(h);var o,a=!1,u={},s={},e={get closed(){return a},unsubscribe:function(){a||(a=!0,o&&o.abort(),c&&Nt.storagemutated.unsubscribe(f))}};r.start&&r.start(e);var c=!1,l=function(){return Ge(t)};var f=function(e){Kn(u,e),En(s,u)&&l()},t=function(){var t,n,e;!a&&nr.indexedDB&&(u={},t={},o&&o.abort(),o=new AbortController,e=function(e){var t=je();try{i&&Le();var n=Ne(h,e);return n=i?n.finally(Ue):n}finally{t&&Ae()}}(n={subscr:t,signal:o.signal,requery:l,querier:h,trans:null}),Promise.resolve(e).then(function(e){p=!0,d=e,a||n.signal.aborted||(u={},function(e){for(var t in e)if(m(e,t))return;return 1}(s=t)||c||(Nt(Ft,f),c=!0),Ge(function(){return!a&&r.next&&r.next(e)}))},function(e){p=!1,[\"DatabaseClosedError\",\"AbortError\"].includes(null==e?void 0:e.name)||a||Ge(function(){a||r.error&&r.error(e)})}))};return setTimeout(l,0),e});return e.hasValue=function(){return p},e.getValue=function(){return d},e}var ar=er;function ur(e){var t=cr;try{cr=!0,Nt.storagemutated.fire(e),Tn(e,!0)}finally{cr=t}}r(ar,_(_({},Q),{delete:function(e){return new ar(e,{addons:[]}).delete()},exists:function(e){return new ar(e,{addons:[]}).open().then(function(e){return e.close(),!0}).catch(\"NoSuchDatabaseError\",function(){return!1})},getDatabaseNames:function(e){try{return t=ar.dependencies,n=t.indexedDB,t=t.IDBKeyRange,(vn(n)?Promise.resolve(n.databases()).then(function(e){return e.map(function(e){return e.name}).filter(function(e){return e!==tt})}):yn(n,t).toCollection().primaryKeys()).then(e)}catch(e){return Xe(new Y.MissingAPI)}var t,n},defineClass:function(){return function(e){a(this,e)}},ignoreTransaction:function(e){return me.trans?$e(me.transless,e):e()},vip:mn,async:function(t){return function(){try{var e=In(t.apply(this,arguments));return e&&\"function\"==typeof e.then?e:_e.resolve(e)}catch(e){return Xe(e)}}},spawn:function(e,t,n){try{var r=In(e.apply(n,t||[]));return r&&\"function\"==typeof r.then?r:_e.resolve(r)}catch(e){return Xe(e)}},currentTransaction:{get:function(){return me.trans||null}},waitFor:function(e,t){t=_e.resolve(\"function\"==typeof e?ar.ignoreTransaction(e):e).timeout(t||6e4);return me.trans?me.trans.waitFor(t):t},Promise:_e,debug:{get:function(){return ie},set:function(e){oe(e)}},derive:o,extend:a,props:r,override:p,Events:dt,on:Nt,liveQuery:or,extendObservabilitySet:Kn,getByKeyPath:O,setByKeyPath:P,delByKeyPath:function(t,e){\"string\"==typeof e?P(t,e,void 0):\"length\"in e&&[].map.call(e,function(e){P(t,e,void 0)})},shallowClone:g,deepClone:S,getObjectDiff:Fn,cmp:st,asap:v,minKey:-1/0,addons:[],connections:et,errnames:z,dependencies:nr,cache:Sn,semVer:\"4.0.11\",version:\"4.0.11\".split(\".\").map(function(e){return parseInt(e)}).reduce(function(e,t,n){return e+t/Math.pow(10,2*n)})})),ar.maxKey=Yt(ar.dependencies.IDBKeyRange),\"undefined\"!=typeof dispatchEvent&&\"undefined\"!=typeof addEventListener&&(Nt(Ft,function(e){cr||(e=new CustomEvent(Mt,{detail:e}),cr=!0,dispatchEvent(e),cr=!1)}),addEventListener(Mt,function(e){e=e.detail;cr||ur(e)}));var sr,cr=!1,lr=function(){};return\"undefined\"!=typeof BroadcastChannel&&((lr=function(){(sr=new BroadcastChannel(Mt)).onmessage=function(e){return e.data&&ur(e.data)}})(),\"function\"==typeof sr.unref&&sr.unref(),Nt(Ft,function(e){cr||sr.postMessage(e)})),\"undefined\"!=typeof addEventListener&&(addEventListener(\"pagehide\",function(e){if(!er.disableBfCache&&e.persisted){ie&&console.debug(\"Dexie: handling persisted pagehide\"),null!=sr&&sr.close();for(var t=0,n=et;t<n.length;t++)n[t].close({disableAutoOpen:!1})}}),addEventListener(\"pageshow\",function(e){!er.disableBfCache&&e.persisted&&(ie&&console.debug(\"Dexie: handling persisted pageshow\"),lr(),ur({all:new gn(-1/0,[[]])}))})),_e.rejectionMapper=function(e,t){return!e||e instanceof N||e instanceof TypeError||e instanceof SyntaxError||!e.name||!$[e.name]?e:(t=new $[e.name](t||e.message,e),\"stack\"in e&&l(t,\"stack\",{get:function(){return this.inner.stack}}),t)},oe(ie),_(er,Object.freeze({__proto__:null,Dexie:er,liveQuery:or,Entity:ut,cmp:st,PropModification:xt,replacePrefix:function(e,t){return new xt({replacePrefix:[e,t]})},add:function(e){return new xt({add:e})},remove:function(e){return new xt({remove:e})},default:er,RangeSet:gn,mergeRanges:_n,rangesOverlap:xn}),{default:er}),er});\n//# sourceMappingURL=dexie.min.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * XSaved Extension v2 - Query Parser\n * Transforms user input into optimized search queries\n */\nimport { Limits } from '../config/limits';\nexport class QueryParser {\n    constructor(textConfig) {\n        this.textConfig = textConfig;\n    }\n    /**\n     * Parse user search query into optimized execution plan\n     */\n    parseQuery(query) {\n        const parsed = {\n            textTokens: [],\n            exactPhrases: [],\n            requiredTags: query.tags || [],\n            optionalTags: [],\n            excludedTags: query.excludeTags || [],\n            filters: [],\n            queryPlan: {\n                primaryFilter: null,\n                secondaryFilters: [],\n                intersectionStrategy: 'all',\n                estimatedResultCount: 0,\n                estimatedExecutionTime: 0\n            },\n            originalQuery: query,\n            sortBy: query.sortBy || 'relevance',\n            sortOrder: query.sortOrder || 'desc',\n            limit: query.limit || Limits.defaultSearchLimit,\n            offset: query.offset || 0\n        };\n        // Parse text input\n        if (query.text) {\n            this.parseTextQuery(query.text, parsed);\n        }\n        // Build filters\n        this.buildFilters(query, parsed);\n        // Optimize execution plan\n        parsed.queryPlan = this.optimizeQueryPlan(parsed);\n        return parsed;\n    }\n    /**\n     * Parse text query for tokens, phrases, and special syntax\n     */\n    parseTextQuery(text, parsed) {\n        // Extract exact phrases in quotes\n        const phraseMatches = text.match(/\"([^\"]*)\"/g);\n        if (phraseMatches) {\n            parsed.exactPhrases = phraseMatches.map(phrase => phrase.replace(/\"/g, '').toLowerCase().trim());\n            // Remove phrases from text for token extraction\n            text = text.replace(/\"[^\"]*\"/g, '');\n        }\n        // Extract hashtags as required tags\n        const hashtagMatches = text.match(/#(\\w+)/g);\n        if (hashtagMatches) {\n            const hashtags = hashtagMatches.map(tag => tag.replace('#', '').toLowerCase());\n            parsed.requiredTags.push(...hashtags);\n            // Remove hashtags from text\n            text = text.replace(/#\\w+/g, '');\n        }\n        // Extract @mentions (could be author filters)\n        const mentionMatches = text.match(/@(\\w+)/g);\n        if (mentionMatches) {\n            // For now, treat mentions as optional tokens\n            // In future, could auto-add author filter\n            const mentions = mentionMatches.map(mention => mention.replace('@', '').toLowerCase());\n            parsed.optionalTags.push(...mentions);\n            // Keep mentions in text for now\n        }\n        // Tokenize remaining text\n        const tokens = this.tokenizeText(text);\n        parsed.textTokens = tokens;\n    }\n    /**\n     * Tokenize text into searchable terms\n     */\n    tokenizeText(text) {\n        return text\n            .toLowerCase()\n            .replace(/[^\\w\\s#@]/g, ' ') // FIXED: Keep hashtags and mentions like database\n            .split(/\\s+/)\n            .filter(token => token.length >= this.textConfig.minTokenLength)\n            .slice(0, this.textConfig.maxTokens) // Limit token count\n            .filter(token => !this.isStopWord(token));\n    }\n    /**\n     * Check if token is a stop word (common words to ignore)\n     */\n    isStopWord(token) {\n        const stopWords = new Set([\n            'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',\n            'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'have',\n            'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should'\n        ]);\n        return stopWords.has(token);\n    }\n    /**\n     * Build query filters from search parameters\n     */\n    buildFilters(query, parsed) {\n        const filters = [];\n        // Text token filters\n        parsed.textTokens.forEach(token => {\n            filters.push({\n                type: 'textToken',\n                value: token,\n                selectivity: this.estimateTokenSelectivity(token),\n                estimatedCost: 10 // ms\n            });\n        });\n        // Tag filters (most selective)\n        parsed.requiredTags.forEach(tag => {\n            filters.push({\n                type: 'tag',\n                value: tag,\n                selectivity: this.estimateTagSelectivity(tag),\n                estimatedCost: 5 // ms - direct index lookup\n            });\n        });\n        // Author filter\n        if (query.author) {\n            filters.push({\n                type: 'author',\n                value: query.author,\n                selectivity: 0.05, // Usually quite selective\n                estimatedCost: 8 // ms\n            });\n        }\n        // Date range filter\n        if (query.dateRange) {\n            filters.push({\n                type: 'dateRange',\n                value: query.dateRange,\n                selectivity: this.estimateDateSelectivity(query.dateRange),\n                estimatedCost: 15 // ms - range query\n            });\n        }\n        // Media filter\n        if (query.hasMedia !== undefined) {\n            filters.push({\n                type: 'hasMedia',\n                value: query.hasMedia,\n                selectivity: query.hasMedia ? 0.3 : 0.7, // ~30% have media\n                estimatedCost: 5 // ms\n            });\n        }\n        parsed.filters = filters;\n    }\n    /**\n     * Optimize query execution plan based on filter selectivity\n     */\n    optimizeQueryPlan(parsed) {\n        const filters = [...parsed.filters];\n        // Sort by selectivity (most selective first)\n        filters.sort((a, b) => a.selectivity - b.selectivity);\n        const primaryFilter = filters[0];\n        const secondaryFilters = filters.slice(1);\n        // Estimate result count based on most selective filter\n        const estimatedResultCount = primaryFilter\n            ? Math.max(1, Math.floor(10000 * primaryFilter.selectivity)) // Assume 10K total bookmarks\n            : 1000;\n        // Estimate execution time\n        const estimatedExecutionTime = filters.reduce((total, filter) => total + filter.estimatedCost, 0);\n        // Choose intersection strategy\n        let intersectionStrategy = 'all';\n        if (parsed.textTokens.length > 0 && parsed.requiredTags.length > 0) {\n            intersectionStrategy = 'all'; // Text AND tags\n        }\n        else if (parsed.optionalTags.length > 0) {\n            intersectionStrategy = 'any'; // Any optional tags\n        }\n        return {\n            primaryFilter,\n            secondaryFilters,\n            intersectionStrategy,\n            estimatedResultCount,\n            estimatedExecutionTime\n        };\n    }\n    /**\n     * Estimate selectivity of a text token\n     */\n    estimateTokenSelectivity(token) {\n        // Common words are less selective\n        const commonWords = new Set(['react', 'javascript', 'web', 'app', 'code']);\n        if (commonWords.has(token)) {\n            return 0.2; // 20% of bookmarks might contain this\n        }\n        // Technical terms are more selective\n        if (token.length > 8) {\n            return 0.05; // Long words are usually more specific\n        }\n        return 0.1; // Default selectivity\n    }\n    /**\n     * Estimate selectivity of a tag\n     */\n    estimateTagSelectivity(tag) {\n        // Popular tags are less selective\n        const popularTags = new Set(['javascript', 'python', 'ai', 'web', 'tutorial']);\n        if (popularTags.has(tag)) {\n            return 0.15;\n        }\n        return 0.05; // Most tags are quite selective\n    }\n    /**\n     * Estimate selectivity of date range\n     */\n    estimateDateSelectivity(dateRange) {\n        const start = new Date(dateRange.start);\n        const end = new Date(dateRange.end);\n        const daysDiff = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24);\n        // Recent date ranges are more selective\n        if (daysDiff <= 1)\n            return 0.02; // Last day\n        if (daysDiff <= 7)\n            return 0.1; // Last week  \n        if (daysDiff <= 30)\n            return 0.3; // Last month\n        return 0.8; // Longer ranges are less selective\n    }\n    /**\n     * Extract search suggestions from query\n     */\n    extractSuggestions(query) {\n        const suggestions = [];\n        // Suggest related searches based on current query\n        if (query.text) {\n            const tokens = this.tokenizeText(query.text);\n            // Suggest adding common tags\n            tokens.forEach(token => {\n                if (this.couldBeTag(token)) {\n                    suggestions.push(`${query.text} #${token}`);\n                }\n            });\n        }\n        // Suggest adding author filter if text contains @mention\n        if (query.text?.includes('@')) {\n            const mentions = query.text.match(/@(\\w+)/g);\n            mentions?.forEach(mention => {\n                const author = mention.replace('@', '');\n                suggestions.push(`author:${author} ${query.text?.replace(mention, '').trim()}`);\n            });\n        }\n        return suggestions.slice(0, 3); // Limit suggestions\n    }\n    /**\n     * Check if token could be a tag\n     */\n    couldBeTag(token) {\n        // Technical terms, frameworks, languages likely to be tags\n        const techTerms = /^(react|vue|angular|python|javascript|js|ai|ml|css|html|node|npm)$/i;\n        return techTerms.test(token) || token.length > 6;\n    }\n    /**\n     * Generate query hash for caching\n     */\n    generateQueryHash(query) {\n        const normalized = {\n            text: query.text?.toLowerCase().trim(),\n            tags: query.tags?.sort(),\n            author: query.author?.toLowerCase(),\n            dateRange: query.dateRange,\n            excludeTags: query.excludeTags?.sort(),\n            hasMedia: query.hasMedia,\n            sortBy: query.sortBy || 'relevance',\n            limit: query.limit || Limits.defaultSearchLimit\n        };\n        return btoa(JSON.stringify(normalized)).replace(/[+/=]/g, '');\n    }\n}\n","/**\n * XSaved Extension v2 - Native Dexie Query Builder\n * Uses proper Dexie native methods for optimal performance\n *\n * Based on Dexie.js API Reference: https://dexie.org/docs/API-Reference\n */\nimport { Limits } from '../config/limits';\n/**\n * Native Dexie Query Builder\n * Uses proper Dexie methods: .where(), .filter(), .and(), .or()\n */\nexport class NativeDexieQueryBuilder {\n    constructor(table) {\n        this.query = null;\n        this.queryOptions = {};\n        this.table = table;\n    }\n    /**\n     * Text search using multi-entry textTokens index\n     * Uses Dexie's native .where().anyOfIgnoreCase()\n     */\n    text(searchText) {\n        if (!searchText?.trim())\n            return this;\n        const tokens = this.tokenizeText(searchText);\n        if (tokens.length === 0)\n            return this;\n        // Native Dexie: Use multi-entry index\n        if (this.query) {\n            this.query = this.query.and(bookmark => tokens.some(token => bookmark.textTokens?.includes(token)));\n        }\n        else {\n            this.query = this.table.where('textTokens').anyOfIgnoreCase(tokens);\n        }\n        return this;\n    }\n    /**\n     * Author filter using native Dexie .equalsIgnoreCase()\n     */\n    author(authorName) {\n        if (!authorName?.trim())\n            return this;\n        if (this.query) {\n            this.query = this.query.and(bookmark => bookmark.author.toLowerCase() === authorName.toLowerCase());\n        }\n        else {\n            this.query = this.table.where('author').equalsIgnoreCase(authorName);\n        }\n        return this;\n    }\n    /**\n     * Combined text and author search using native Dexie capabilities\n     * Searches through both tweet text content AND author name\n     * Uses both textTokens (for performance) and full text field (for comprehensive matching)\n     */\n    searchTextAndAuthor(searchTerm) {\n        if (!searchTerm?.trim())\n            return this;\n        const tokens = this.tokenizeText(searchTerm);\n        const searchTermLower = searchTerm.toLowerCase();\n        if (this.query) {\n            // Collection: Use .and() with enhanced combined filter\n            this.query = this.query.and(bookmark => {\n                // Check if search term matches text content OR author\n                const authorMatch = bookmark.author.toLowerCase().includes(searchTermLower);\n                // Enhanced text matching: try both textTokens and full text field\n                let textMatch = false;\n                // >>IMPORTANT: This is disabled because it's not working as expected\n                // >>IMPORTANT: WE CHECKED AND IT LOOKS LIKE LOOKING DIRECTLY TO TEXT WORKS JUST FINE. SO EXT TOKEN MATCHING IS NOT NEEDED RIGHT NOW.\n                // It's causing the query to return no results\n                // if (bookmark.textTokens?.length > 0) {\n                //   // Fast path: check textTokens for exact matches\n                //   textMatch = tokens.some(token => bookmark.textTokens?.includes(token));\n                // }\n                if (!textMatch && bookmark.text) {\n                    // Fallback: check full text field for substring matches\n                    textMatch = bookmark.text.toLowerCase().includes(searchTermLower);\n                }\n                return textMatch || authorMatch;\n            });\n        }\n        else {\n            // Table: Use .filter() for enhanced combined search\n            this.query = this.table.filter(bookmark => {\n                // Check if search term matches text content OR author\n                const authorMatch = bookmark.author.toLowerCase().includes(searchTermLower);\n                // Enhanced text matching: try both textTokens and full text field\n                let textMatch = false;\n                if (bookmark.textTokens?.length > 0) {\n                    // Fast path: check textTokens for exact matches\n                    textMatch = tokens.some(token => bookmark.textTokens?.includes(token));\n                }\n                if (!textMatch && bookmark.text) {\n                    // Fallback: check full text field for substring matches\n                    textMatch = bookmark.text.toLowerCase().includes(searchTermLower);\n                }\n                return textMatch || authorMatch;\n            });\n        }\n        return this;\n    }\n    /**\n     * Tags filter using native Dexie .anyOf()\n     */\n    tags(tagList) {\n        if (!tagList || tagList.length === 0)\n            return this;\n        if (this.query) {\n            this.query = this.query.and(bookmark => tagList.some(tag => bookmark.tags?.includes(tag)));\n        }\n        else {\n            this.query = this.table.where('tags').anyOf(tagList);\n        }\n        return this;\n    }\n    /**\n     * Date range using native Dexie .between()\n     */\n    dateRange(start, end) {\n        if (!start || !end)\n            return this;\n        if (this.query) {\n            this.query = this.query.and(bookmark => {\n                const date = new Date(bookmark.bookmarked_at);\n                return date >= new Date(start) && date <= new Date(end);\n            });\n        }\n        else {\n            this.query = this.table.where('bookmarked_at').between(start, end, true, true);\n        }\n        return this;\n    }\n    /**\n     * Media presence filter using native Dexie .filter()\n     */\n    hasMedia(hasMedia) {\n        if (this.query) {\n            this.query = this.query.and(bookmark => hasMedia ?\n                (bookmark.media_urls && bookmark.media_urls.length > 0) :\n                (!bookmark.media_urls || bookmark.media_urls.length === 0));\n        }\n        else {\n            this.query = this.table.filter(bookmark => hasMedia ?\n                (bookmark.media_urls && bookmark.media_urls.length > 0) :\n                (!bookmark.media_urls || bookmark.media_urls.length === 0));\n        }\n        return this;\n    }\n    /**\n     * Exclude tags using native Dexie .filter()\n     */\n    excludeTags(excludeList) {\n        if (!excludeList || excludeList.length === 0)\n            return this;\n        if (this.query) {\n            this.query = this.query.and(bookmark => !excludeList.some(excludeTag => bookmark.tags?.includes(excludeTag)));\n        }\n        else {\n            this.query = this.table.filter(bookmark => !excludeList.some(excludeTag => bookmark.tags?.includes(excludeTag)));\n        }\n        return this;\n    }\n    /**\n     * Set query options\n     */\n    setOptions(opts) {\n        this.queryOptions = { ...this.queryOptions, ...opts };\n        return this;\n    }\n    /**\n     * Set limit using native Dexie .limit()\n     */\n    limit(count) {\n        this.queryOptions.limit = count;\n        return this;\n    }\n    /**\n     * Set offset using native Dexie .offset()\n     */\n    offset(count) {\n        this.queryOptions.offset = count;\n        return this;\n    }\n    /**\n     * Set sorting using native Dexie .orderBy() and .reverse()\n     */\n    sortBy(field, order = 'desc') {\n        this.queryOptions.sortBy = field;\n        this.queryOptions.sortOrder = order;\n        return this;\n    }\n    /**\n     * Execute the query using native Dexie methods\n     */\n    async execute() {\n        try {\n            let query = this.query || this.table;\n            // Apply sorting using native Dexie methods\n            if (this.queryOptions.sortBy) {\n                if (this.query) {\n                    console.log('🐈 SORTING~SORTING~SORTING for Collection');\n                    // For Collections: reverse() BEFORE sortBy() as per Dexie docs\n                    // sortBy() returns a Promise, so we need to handle it differently\n                    if (this.queryOptions.sortOrder === 'desc') {\n                        query = query.reverse();\n                    }\n                    // sortBy() returns Promise<BookmarkEntity[]>, not a Collection\n                    const results = await query.sortBy(this.queryOptions.sortBy);\n                    return this.applyPagination(results);\n                }\n                else {\n                    console.log('🐕 ORDER~ORDER~ORDER for Table');\n                    // For Tables: orderBy() then reverse() after\n                    query = query.orderBy(this.queryOptions.sortBy);\n                    if (this.queryOptions.sortOrder === 'desc') {\n                        query = query.reverse();\n                    }\n                }\n            }\n            else {\n                // Default: newest first\n                if (this.query) {\n                    // Collection - reverse() BEFORE sortBy()\n                    // sortBy() returns Promise<BookmarkEntity[]>, not a Collection\n                    const results = await query.reverse().sortBy('created_at');\n                    return this.applyPagination(results);\n                }\n                else {\n                    // Table - orderBy() then reverse()\n                    query = query.orderBy('created_at').reverse();\n                }\n            }\n            // Apply pagination using native Dexie .offset() and .limit() (for Tables only)\n            if (this.queryOptions.offset) {\n                query = query.offset(this.queryOptions.offset);\n            }\n            if (this.queryOptions.limit) {\n                query = query.limit(this.queryOptions.limit);\n            }\n            // Execute using native Dexie .toArray()\n            const results = await query.toArray();\n            console.log(`🔍 Native Dexie query executed: ${results.length} results`);\n            return results;\n        }\n        catch (error) {\n            console.error('❌ Native Dexie query failed:', error);\n            return [];\n        }\n    }\n    /**\n     * Apply pagination to results (for Collections that use sortBy)\n     */\n    applyPagination(results) {\n        let paginatedResults = results;\n        // Apply offset\n        if (this.queryOptions.offset) {\n            paginatedResults = paginatedResults.slice(this.queryOptions.offset);\n        }\n        // Apply limit\n        if (this.queryOptions.limit) {\n            paginatedResults = paginatedResults.slice(0, this.queryOptions.limit);\n        }\n        return paginatedResults;\n    }\n    /**\n     * Enhanced tokenize text for search\n     * More inclusive tokenization to capture more matches\n     */\n    tokenizeText(text) {\n        if (!text)\n            return [];\n        const tokens = text\n            .toLowerCase()\n            .replace(/[^\\w\\s#@-]/g, ' ') // Keep hyphens and @ symbols\n            .split(/\\s+/)\n            .filter(token => token.length > 1) // Reduced from 2 to 1 for more matches\n            .slice(0, 20); // Increased from 10 to 20 tokens\n        // Add partial matches for longer terms (e.g., \"javascript\" -> \"java\", \"script\")\n        const partialTokens = new Set();\n        tokens.forEach(token => {\n            if (token.length > 4) {\n                // Add 3+ character prefixes\n                for (let i = 3; i < token.length; i++) {\n                    partialTokens.add(token.substring(0, i));\n                }\n            }\n        });\n        // Combine original tokens with partial matches\n        return [...new Set([...tokens, ...Array.from(partialTokens)])].slice(0, 30);\n    }\n}\n// ========================\n// CONVENIENCE FACTORY\n// ========================\n/**\n * Create a native Dexie query builder\n */\nexport function createBookmarkQuery(table) {\n    return new NativeDexieQueryBuilder(table);\n}\n// ========================\n// COMMON QUERY PATTERNS\n// ========================\n/**\n * Recent bookmarks using native Dexie\n */\nexport async function getRecentBookmarks(table, limit = Limits.defaultQueryLimit, offset = 0) {\n    return createBookmarkQuery(table)\n        .sortBy('created_at', 'desc')\n        .limit(limit)\n        .offset(offset)\n        .execute();\n}\n/**\n * Search by text and tags using native Dexie\n */\nexport async function searchBookmarksByTextAndTags(table, searchText, tags, options = {}) {\n    return createBookmarkQuery(table)\n        .text(searchText)\n        .tags(tags)\n        .setOptions(options)\n        .execute();\n}\n/**\n * Author's bookmarks with date range using native Dexie\n */\nexport async function getAuthorBookmarksInDateRange(table, author, startDate, endDate, options = {}) {\n    return createBookmarkQuery(table)\n        .author(author)\n        .dateRange(startDate, endDate)\n        .setOptions(options)\n        .execute();\n}\n","/**\n * XSaved Extension v2 - Search Executor\n * Executes optimized queries using pure Dexie API\n * OPTIMIZED: Removed raw IndexedDB transactions, now uses native Dexie queries\n */\nimport { db } from '../db';\nimport { Limits } from '../config/limits';\nimport { createBookmarkQuery } from '../db/query-builder';\nexport class SearchExecutor {\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     *\n     * OLD: Multi-criteria search method (legacy)\n     * NOTE: This was our original search pipeline, but it was complex and relied on multi-stage filter intersections.\n     * We've since replaced it with a native Dexie composable query builder, which is much simpler and more efficient.\n     * Keeping this for reference and fallback, but prefer executeSearchNativeDexie().\n     */\n    async executeSearch(parsedQuery) {\n        const startTime = performance.now();\n        let analytics = {\n            queryTime: 0,\n            indexHits: 0,\n            resultsReturned: 0,\n            cacheHit: false,\n            slowOperations: [],\n            indexesUsed: []\n        };\n        try {\n            // This method required running a primary filter, then intersecting with secondary filters,\n            // then doing text search and exclusions in-memory. It was hard to maintain and not optimal for performance.\n            // See executeSearchNativeDexie for the new approach.\n            await db.initialize();\n            let candidateBookmarks = [];\n            if (parsedQuery.queryPlan.primaryFilter) {\n                candidateBookmarks = await this.executeSingleFilter(parsedQuery.queryPlan.primaryFilter, analytics);\n            }\n            else {\n                const sortBy = 'created_at';\n                const recentResult = await db.getRecentBookmarks({\n                    limit: parsedQuery.limit || Limits.defaultSearchLimit,\n                    sortBy: sortBy,\n                    offset: parsedQuery.offset\n                });\n                candidateBookmarks = recentResult.data || [];\n                analytics.indexesUsed.push(sortBy);\n            }\n            for (const filter of parsedQuery.queryPlan.secondaryFilters) {\n                candidateBookmarks = await this.applyFilter(candidateBookmarks, filter, analytics);\n                if (candidateBookmarks.length === 0)\n                    break;\n            }\n            if (parsedQuery.textTokens.length > 0) {\n                if (candidateBookmarks.length === 0) {\n                    candidateBookmarks = await this.searchBySubstring(parsedQuery.textTokens, analytics);\n                }\n                else {\n                    candidateBookmarks = await this.applySubstringFilter(candidateBookmarks, parsedQuery.textTokens, analytics);\n                }\n            }\n            if (parsedQuery.excludedTags.length > 0) {\n                candidateBookmarks = candidateBookmarks.filter(bookmark => !parsedQuery.excludedTags.some(excludedTag => bookmark.tags.includes(excludedTag)));\n            }\n            const queryTime = performance.now() - startTime;\n            analytics.queryTime = queryTime;\n            analytics.resultsReturned = candidateBookmarks.length;\n            if (parsedQuery.sortBy && parsedQuery.sortBy !== 'relevance') {\n                candidateBookmarks = this.applySorting(candidateBookmarks, parsedQuery.sortBy, parsedQuery.sortOrder);\n            }\n            if (parsedQuery.limit && candidateBookmarks.length > parsedQuery.limit) {\n                candidateBookmarks = candidateBookmarks.slice(0, parsedQuery.limit);\n            }\n            if (queryTime > this.config.performanceTargets.combinedSearch) {\n                analytics.slowOperations.push(`Total query: ${queryTime.toFixed(2)}ms`);\n                console.warn(`⚠️ Slow search query: ${queryTime.toFixed(2)}ms`, parsedQuery);\n            }\n            return {\n                bookmarks: candidateBookmarks.map(bookmark => ({\n                    bookmark,\n                    score: 1,\n                    matchingFactors: {\n                        textRelevance: 0,\n                        tagRelevance: 0,\n                        recency: 0,\n                        authorPopularity: 0,\n                        userInteraction: 0,\n                        exactMatch: false\n                    }\n                })),\n                totalCount: candidateBookmarks.length,\n                queryTime,\n                pagination: {\n                    hasMore: false,\n                    totalPages: 1\n                }\n            };\n        }\n        catch (error) {\n            console.error('Search execution error:', error);\n            return {\n                bookmarks: [],\n                totalCount: 0,\n                queryTime: performance.now() - startTime,\n                pagination: {\n                    hasMore: false,\n                    totalPages: 0\n                }\n            };\n        }\n    }\n    /**\n     * NEW: Execute search using native Dexie composable query system\n     * This replaces the complex primary/secondary filter pipeline with clean composition\n     *\n     * HOW IT WORKS:\n     * 1. Convert ParsedQuery to native Dexie query criteria\n     * 2. Use createBookmarkQuery() to build a single optimized Dexie query\n     * 3. Apply all filters using native Dexie methods (.where(), .and(), .filter())\n     * 4. Execute single query instead of multiple filter intersections\n     * 5. Return results in same format as original method\n     */\n    async executeSearchNativeDexie(parsedQuery) {\n        const startTime = performance.now();\n        let analytics = {\n            queryTime: 0,\n            indexHits: 0,\n            resultsReturned: 0,\n            cacheHit: false,\n            slowOperations: [],\n            indexesUsed: []\n        };\n        try {\n            console.log('🚀 Starting native Dexie composable search...');\n            console.log('📋 Parsed query:', {\n                textTokens: parsedQuery.textTokens,\n                requiredTags: parsedQuery.requiredTags,\n                excludedTags: parsedQuery.excludedTags,\n                filters: parsedQuery.filters?.map(f => ({ type: f.type, value: f.value })),\n                limit: parsedQuery.limit,\n                offset: parsedQuery.offset,\n                sortBy: parsedQuery.sortBy\n            });\n            // Ensure database is ready\n            await db.initialize();\n            // STEP 1: Convert ParsedQuery to native Dexie query criteria\n            const searchCriteria = this.convertParsedQueryToNativeDexie(parsedQuery);\n            console.log('🔄 Converted to native Dexie criteria:', searchCriteria);\n            // STEP 2: Build single native Dexie query using composable builder\n            const queryBuilder = createBookmarkQuery(db.bookmarks);\n            // STEP 3: Apply filters conditionally using native Dexie methods\n            if (searchCriteria.text) {\n                // ALWAYS search both text content AND author for any text search\n                console.log('🔍 Adding combined text+author search:', searchCriteria.text);\n                queryBuilder.searchTextAndAuthor(searchCriteria.text);\n                analytics.indexesUsed.push('textTokens', 'author');\n            }\n            if (searchCriteria.author && !searchCriteria.text) {\n                // Author-only filter (when no text search)\n                console.log('👤 Adding author filter:', searchCriteria.author);\n                queryBuilder.author(searchCriteria.author);\n                analytics.indexesUsed.push('author');\n            }\n            if (searchCriteria.tags && searchCriteria.tags.length > 0) {\n                console.log('🏷️ Adding tags filter:', searchCriteria.tags);\n                queryBuilder.tags(searchCriteria.tags);\n                analytics.indexesUsed.push('tags');\n            }\n            if (searchCriteria.excludeTags && searchCriteria.excludeTags.length > 0) {\n                console.log('🚫 Adding exclude tags filter:', searchCriteria.excludeTags);\n                queryBuilder.excludeTags(searchCriteria.excludeTags);\n            }\n            if (searchCriteria.dateRange) {\n                console.log('📅 Adding date range filter:', searchCriteria.dateRange);\n                queryBuilder.dateRange(searchCriteria.dateRange.start, searchCriteria.dateRange.end);\n                analytics.indexesUsed.push('bookmarked_at');\n            }\n            if (searchCriteria.hasMedia !== undefined) {\n                console.log('📷 Adding media filter:', searchCriteria.hasMedia);\n                queryBuilder.hasMedia(searchCriteria.hasMedia);\n            }\n            // STEP 4: Apply sorting and pagination options\n            const sortBy = parsedQuery.sortBy === 'relevance' ? 'created_at' : parsedQuery.sortBy;\n            queryBuilder\n                .sortBy(sortBy || 'created_at', parsedQuery.sortOrder || 'desc')\n                .limit(parsedQuery.limit || Limits.defaultSearchLimit);\n            if (parsedQuery.offset) {\n                queryBuilder.offset(parsedQuery.offset);\n            }\n            console.log('⚡ Executing native Dexie query...');\n            // STEP 5: Execute single optimized native Dexie query\n            const results = await queryBuilder.execute();\n            const queryTime = performance.now() - startTime;\n            analytics.queryTime = queryTime;\n            analytics.resultsReturned = results.length;\n            analytics.indexHits = analytics.indexesUsed.length;\n            console.log(`✅ Native Dexie search completed in ${queryTime.toFixed(2)}ms:`);\n            console.log(`   📊 Results: ${results.length}`);\n            console.log(`   🔍 Indexes used: ${analytics.indexesUsed.join(', ')}`);\n            console.log(`   ⏱️ Query time: ${queryTime.toFixed(2)}ms`);\n            // Log slow operations\n            if (queryTime > this.config.performanceTargets.combinedSearch) {\n                analytics.slowOperations.push(`Native Dexie query: ${queryTime.toFixed(2)}ms`);\n                console.warn(`⚠️ Slow native Dexie query: ${queryTime.toFixed(2)}ms`);\n            }\n            // STEP 6: Convert to SearchResult format (same as original method)\n            const bookmarks = results.map(bookmark => ({\n                bookmark,\n                score: 1, // Will be calculated by relevance scorer\n                matchingFactors: {\n                    textRelevance: 0,\n                    tagRelevance: 0,\n                    recency: 0,\n                    authorPopularity: 0,\n                    userInteraction: 0,\n                    exactMatch: false\n                }\n            }));\n            return {\n                bookmarks,\n                totalCount: bookmarks.length,\n                queryTime,\n                pagination: {\n                    hasMore: false, // TODO: Implement proper pagination detection\n                    totalPages: 1\n                }\n            };\n        }\n        catch (error) {\n            const queryTime = performance.now() - startTime;\n            console.error('❌ Native Dexie search execution error:', error);\n            return {\n                bookmarks: [],\n                totalCount: 0,\n                queryTime,\n                pagination: {\n                    hasMore: false,\n                    totalPages: 0\n                }\n            };\n        }\n    }\n    /**\n     * Convert ParsedQuery to native Dexie search criteria\n     * This bridges the gap between your existing query parser and native Dexie\n     */\n    convertParsedQueryToNativeDexie(parsedQuery) {\n        const criteria = {};\n        // Text search: Convert tokens back to search text\n        if (parsedQuery.textTokens.length > 0) {\n            criteria.text = parsedQuery.textTokens.join(' ');\n        }\n        // Author filter: Extract from filters\n        const authorFilter = parsedQuery.filters?.find(f => f.type === 'author');\n        if (authorFilter) {\n            criteria.author = authorFilter.value;\n        }\n        // Tags: Use required tags\n        if (parsedQuery.requiredTags.length > 0) {\n            criteria.tags = parsedQuery.requiredTags;\n        }\n        // Exclude tags\n        if (parsedQuery.excludedTags.length > 0) {\n            criteria.excludeTags = parsedQuery.excludedTags;\n        }\n        // Date range filter\n        const dateFilter = parsedQuery.filters?.find(f => f.type === 'dateRange');\n        if (dateFilter) {\n            criteria.dateRange = dateFilter.value;\n        }\n        // Media filter\n        const mediaFilter = parsedQuery.filters?.find(f => f.type === 'hasMedia');\n        if (mediaFilter) {\n            criteria.hasMedia = mediaFilter.value;\n        }\n        return criteria;\n    }\n    /**\n     * Execute a single filter using appropriate index\n     */\n    async executeSingleFilter(filter, analytics) {\n        const startTime = performance.now();\n        try {\n            let result = [];\n            switch (filter.type) {\n                case 'tag':\n                    result = await this.searchByTag(filter.value);\n                    analytics.indexesUsed.push('tags');\n                    break;\n                case 'author':\n                    result = await this.searchByAuthor(filter.value);\n                    analytics.indexesUsed.push('author');\n                    break;\n                case 'dateRange':\n                    result = await this.searchByDateRange(filter.value);\n                    analytics.indexesUsed.push('bookmarked_at');\n                    break;\n                case 'textToken':\n                    result = await this.searchByTextToken(filter.value);\n                    analytics.indexesUsed.push('text_search');\n                    break;\n                case 'hasMedia':\n                    result = await this.searchByMediaPresence(filter.value);\n                    // No specific index for this - filters in memory\n                    break;\n                default:\n                    console.warn('Unknown filter type:', filter.type);\n            }\n            const duration = performance.now() - startTime;\n            analytics.indexHits++;\n            // Track slow operations\n            const target = this.getPerformanceTarget(filter.type);\n            if (duration > target) {\n                analytics.slowOperations.push(`${filter.type}: ${duration.toFixed(2)}ms`);\n            }\n            return result;\n        }\n        catch (error) {\n            console.error(`Filter execution error for ${filter.type}:`, error);\n            return [];\n        }\n    }\n    /**\n     * Apply filter to existing result set\n     */\n    async applyFilter(bookmarks, filter, analytics) {\n        const startTime = performance.now();\n        let filtered = [];\n        switch (filter.type) {\n            case 'tag':\n                filtered = bookmarks.filter(bookmark => bookmark.tags.includes(filter.value));\n                break;\n            case 'author':\n                filtered = bookmarks.filter(bookmark => bookmark.author.toLowerCase() === filter.value.toLowerCase());\n                break;\n            case 'hasMedia':\n                filtered = bookmarks.filter(bookmark => filter.value ?\n                    (bookmark.media_urls && bookmark.media_urls.length > 0) :\n                    (!bookmark.media_urls || bookmark.media_urls.length === 0));\n                break;\n            case 'dateRange':\n                const { start, end } = filter.value;\n                filtered = bookmarks.filter(bookmark => {\n                    const bookmarkDate = new Date(bookmark.created_at);\n                    return bookmarkDate >= new Date(start) && bookmarkDate <= new Date(end);\n                });\n                break;\n            case 'textToken':\n                filtered = bookmarks.filter(bookmark => bookmark.textTokens.includes(filter.value) ||\n                    bookmark.text.toLowerCase().includes(filter.value));\n                break;\n            default:\n                filtered = bookmarks;\n        }\n        const duration = performance.now() - startTime;\n        const target = this.getPerformanceTarget(filter.type);\n        if (duration > target) {\n            analytics.slowOperations.push(`${filter.type} filter: ${duration.toFixed(2)}ms`);\n        }\n        return filtered;\n    }\n    /**\n     * Search by tag using multi-entry index (fastest)\n     */\n    async searchByTag(tag) {\n        const result = await db.getBookmarksByTag(tag);\n        return result.success ? result.data || [] : [];\n    }\n    /**\n     * Search by author using Dexie query (OPTIMIZED)\n     */\n    async searchByAuthor(author) {\n        try {\n            // Use native Dexie query - much cleaner!\n            const results = await db.bookmarks\n                .where('author')\n                .equalsIgnoreCase(author)\n                .reverse()\n                .limit(Limits.indexSearchLimit)\n                .toArray();\n            console.log(`👤 Found ${results.length} bookmarks by @${author}`);\n            return results;\n        }\n        catch (error) {\n            console.error(`❌ Author search failed for @${author}:`, error);\n            return [];\n        }\n    }\n    /**\n     * Search by date range using Dexie query (OPTIMIZED)\n     */\n    async searchByDateRange(dateRange) {\n        try {\n            // Use native Dexie range query - cleaner and more optimized!\n            const results = await db.bookmarks\n                .where('bookmarked_at')\n                .between(dateRange.start, dateRange.end)\n                .reverse()\n                .limit(Limits.substringSearchLimit)\n                .toArray();\n            console.log(`📅 Found ${results.length} bookmarks in date range ${dateRange.start} to ${dateRange.end}`);\n            return results;\n        }\n        catch (error) {\n            console.error('❌ Date range search failed:', error);\n            return [];\n        }\n    }\n    /**\n     * Search by text token using Dexie multi-entry index (OPTIMIZED)\n     */\n    async searchByTextToken(token) {\n        try {\n            // FIXED: Use proper multi-entry index query for fast exact token matching\n            const results = await db.bookmarks\n                .where('textTokens')\n                .anyOfIgnoreCase([token])\n                .reverse()\n                .limit(Limits.indexSearchLimit)\n                .toArray();\n            console.log(`🔍 Found ${results.length} bookmarks with exact token \"${token}\"`);\n            return results;\n        }\n        catch (error) {\n            console.error(`❌ Text token search failed for \"${token}\":`, error);\n            return [];\n        }\n    }\n    /**\n     * Search by substring matching (replicates client-side filter logic)\n     */\n    async searchBySubstring(tokens, analytics) {\n        try {\n            // Get all bookmarks for substring search\n            const allBookmarks = await db.bookmarks\n                .orderBy('created_at')\n                .reverse()\n                .limit(Limits.substringSearchLimit) // Reasonable limit for substring search\n                .toArray();\n            console.log(`🔍 Searching ${allBookmarks.length} bookmarks with substring logic`);\n            // Apply substring filtering with AND logic for multiple tokens\n            const results = allBookmarks.filter(bookmark => {\n                const text = bookmark?.text || '';\n                const author = bookmark?.author || '';\n                const tags = bookmark?.tags || [];\n                // For multiple tokens, ALL tokens must match (AND logic)\n                return tokens.every(token => {\n                    const lowerToken = token.toLowerCase();\n                    return text.toLowerCase().includes(lowerToken) ||\n                        author.toLowerCase().includes(lowerToken) ||\n                        tags.some(tag => tag.toLowerCase().includes(lowerToken));\n                });\n            });\n            console.log(`🔍 Substring search found ${results.length} matches`);\n            return results;\n        }\n        catch (error) {\n            console.error(`❌ Substring search failed:`, error);\n            return [];\n        }\n    }\n    /**\n     * Apply substring filtering to existing candidate bookmarks\n     */\n    async applySubstringFilter(bookmarks, tokens, analytics) {\n        if (tokens.length === 0)\n            return bookmarks;\n        const startTime = performance.now();\n        const filtered = bookmarks.filter(bookmark => {\n            const text = bookmark?.text || '';\n            const author = bookmark?.author || '';\n            const tags = bookmark?.tags || [];\n            // For multiple tokens, ALL tokens must match (AND logic)\n            return tokens.every(token => {\n                const lowerToken = token.toLowerCase();\n                return text.toLowerCase().includes(lowerToken) ||\n                    author.toLowerCase().includes(lowerToken) ||\n                    tags.some(tag => tag.toLowerCase().includes(lowerToken));\n            });\n        });\n        const duration = performance.now() - startTime;\n        if (duration > this.config.performanceTargets.textSearch) {\n            analytics.slowOperations.push(`Substring filter: ${duration.toFixed(2)}ms`);\n        }\n        console.log(`🔍 Substring filter: ${tokens.length} tokens, ${filtered.length} results from ${bookmarks.length} bookmarks`);\n        return filtered;\n    }\n    /**\n     * Search using Dexie's multi-column filtering (like SQL WHERE with OR conditions)\n     * ALTERNATIVE APPROACH: Uses Dexie's native filtering instead of substring search\n     */\n    async searchByMultiColumn(tokens, analytics) {\n        try {\n            console.log(`🔍 Dexie multi-column search with tokens:`, tokens);\n            // Use Dexie's filter method to search across multiple columns\n            // This is similar to SQL: WHERE text LIKE '%token%' OR author LIKE '%token%' OR tags CONTAINS 'token'\n            const results = await db.bookmarks\n                .orderBy('created_at')\n                .reverse()\n                .filter(bookmark => {\n                // For multiple tokens, ALL tokens must match somewhere (AND logic across tokens)\n                return tokens.every(token => {\n                    const lowerToken = token.toLowerCase();\n                    // Check text field\n                    if (bookmark.text && bookmark.text.toLowerCase().includes(lowerToken)) {\n                        return true;\n                    }\n                    // Check author field\n                    if (bookmark.author && bookmark.author.toLowerCase().includes(lowerToken)) {\n                        return true;\n                    }\n                    // Check tags array\n                    if (bookmark.tags && Array.isArray(bookmark.tags)) {\n                        if (bookmark.tags.some(tag => typeof tag === 'string' && tag.toLowerCase().includes(lowerToken))) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n            })\n                .limit(Limits.substringSearchLimit) // Reasonable limit\n                .toArray();\n            console.log(`🔍 Dexie multi-column search found ${results.length} matches`);\n            return results;\n        }\n        catch (error) {\n            console.error(`❌ Dexie multi-column search failed:`, error);\n            return [];\n        }\n    }\n    /**\n     * Filter by media presence using optimized Dexie query (OPTIMIZED)\n     */\n    async searchByMediaPresence(hasMedia) {\n        try {\n            // Use Dexie's collection filtering - more efficient than manual scanning\n            const results = await db.bookmarks\n                .filter(bookmark => hasMedia ?\n                (bookmark.media_urls && bookmark.media_urls.length > 0) :\n                (!bookmark.media_urls || bookmark.media_urls.length === 0))\n                .reverse()\n                .limit(Limits.substringSearchLimit)\n                .toArray();\n            console.log(`📷 Found ${results.length} bookmarks ${hasMedia ? 'with' : 'without'} media`);\n            return results;\n        }\n        catch (error) {\n            console.error('❌ Media presence search failed:', error);\n            return [];\n        }\n    }\n    /**\n     * Apply text search with token matching\n     */\n    async applyTextSearch(bookmarks, tokens, analytics) {\n        if (tokens.length === 0)\n            return bookmarks;\n        const startTime = performance.now();\n        const filtered = bookmarks.filter(bookmark => {\n            const bookmarkTokens = bookmark.textTokens || [];\n            const bookmarkText = bookmark.text.toLowerCase();\n            // IMPROVED: Check if ALL tokens are present (AND logic for better precision)\n            // For single token searches, use exact matching\n            if (tokens.length === 1) {\n                const token = tokens[0];\n                return bookmarkTokens.includes(token) || bookmarkText.includes(token);\n            }\n            // For multiple tokens, require ALL tokens to be present (AND logic)\n            return tokens.every(token => bookmarkTokens.includes(token) || bookmarkText.includes(token));\n        });\n        const duration = performance.now() - startTime;\n        if (duration > this.config.performanceTargets.textSearch) {\n            analytics.slowOperations.push(`Text search: ${duration.toFixed(2)}ms`);\n        }\n        console.log(`🔍 Text search: ${tokens.length} tokens, ${filtered.length} results from ${bookmarks.length} bookmarks`);\n        return filtered;\n    }\n    /**\n     * Intersect multiple result sets efficiently\n     */\n    intersectResults(resultSets) {\n        if (resultSets.length === 0)\n            return [];\n        if (resultSets.length === 1)\n            return resultSets[0];\n        // Sort by length (smallest first) for efficient intersection\n        resultSets.sort((a, b) => a.length - b.length);\n        let intersection = resultSets[0];\n        for (let i = 1; i < resultSets.length; i++) {\n            const currentSet = new Set(resultSets[i].map(bookmark => bookmark.id));\n            intersection = intersection.filter(bookmark => currentSet.has(bookmark.id));\n            // Early termination if intersection becomes empty\n            if (intersection.length === 0)\n                break;\n        }\n        return intersection;\n    }\n    /**\n     * Union multiple result sets with deduplication\n     */\n    unionResults(resultSets) {\n        const seen = new Set();\n        const union = [];\n        for (const resultSet of resultSets) {\n            for (const bookmark of resultSet) {\n                if (!seen.has(bookmark.id)) {\n                    seen.add(bookmark.id);\n                    union.push(bookmark);\n                }\n            }\n        }\n        return union;\n    }\n    /**\n     * Apply sorting to bookmarks\n     */\n    applySorting(bookmarks, sortBy, sortOrder) {\n        const isAscending = sortOrder === 'asc';\n        return bookmarks.sort((a, b) => {\n            let comparison = 0;\n            switch (sortBy) {\n                case 'created_at':\n                    comparison = new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n                    break;\n                case 'bookmarked_at':\n                    comparison = new Date(a.bookmarked_at).getTime() - new Date(b.bookmarked_at).getTime();\n                    break;\n                case 'author':\n                    comparison = a.author.localeCompare(b.author);\n                    break;\n                default:\n                    return 0; // No sorting\n            }\n            return isAscending ? comparison : -comparison;\n        });\n    }\n    /**\n     * Get performance target for filter type\n     */\n    getPerformanceTarget(filterType) {\n        switch (filterType) {\n            case 'tag':\n                return this.config.performanceTargets.singleTagSearch;\n            case 'textToken':\n                return this.config.performanceTargets.textSearch;\n            case 'author':\n            case 'dateRange':\n                return this.config.performanceTargets.multiTagSearch;\n            default:\n                return this.config.performanceTargets.combinedSearch;\n        }\n    }\n    /**\n     * TEST METHOD: Compare old vs new search approaches\n     * This demonstrates the difference between the complex pipeline and native Dexie\n     */\n    async testSearchComparison(testQuery) {\n        console.log('🧪 Testing search comparison with query:', testQuery);\n        // Create a mock ParsedQuery for testing\n        const mockParsedQuery = {\n            textTokens: testQuery.text ? testQuery.text.split(' ') : [],\n            exactPhrases: [],\n            requiredTags: testQuery.tags || [],\n            optionalTags: [],\n            excludedTags: [],\n            filters: testQuery.author ? [{\n                    type: 'author',\n                    value: testQuery.author,\n                    selectivity: 0.6,\n                    estimatedCost: 5\n                }] : [],\n            queryPlan: {\n                primaryFilter: testQuery.author ? {\n                    type: 'author',\n                    value: testQuery.author,\n                    selectivity: 0.6,\n                    estimatedCost: 5\n                } : undefined,\n                secondaryFilters: [],\n                intersectionStrategy: 'all',\n                estimatedResultCount: 0,\n                estimatedExecutionTime: 0\n            },\n            originalQuery: testQuery,\n            limit: testQuery.limit || 20,\n            offset: 0,\n            sortBy: 'created_at',\n            sortOrder: 'desc'\n        };\n        // Test OLD method (complex pipeline)\n        console.log('🔄 Testing OLD search method (complex pipeline)...');\n        const oldStart = performance.now();\n        const oldResult = await this.executeSearch(mockParsedQuery);\n        const oldTime = performance.now() - oldStart;\n        // Test NEW method (native Dexie composable)\n        console.log('🔄 Testing NEW search method (native Dexie composable)...');\n        const newStart = performance.now();\n        const newResult = await this.executeSearchNativeDexie(mockParsedQuery);\n        const newTime = performance.now() - newStart;\n        const improvement = ((oldTime - newTime) / oldTime) * 100;\n        console.log('📊 Search comparison results:');\n        console.log(`   🔴 OLD method: ${oldTime.toFixed(2)}ms (${oldResult.bookmarks.length} results)`);\n        console.log(`   🟢 NEW method: ${newTime.toFixed(2)}ms (${newResult.bookmarks.length} results)`);\n        console.log(`   ⚡ Performance improvement: ${improvement.toFixed(1)}%`);\n        return {\n            oldMethod: oldResult,\n            newMethod: newResult,\n            performance: {\n                oldTime,\n                newTime,\n                improvement\n            }\n        };\n    }\n}\n","/**\n * XSaved Extension v2 - Search Engine\n * Main search engine that orchestrates query parsing, execution, and ranking\n */\nimport { QueryParser } from './query-parser';\nimport { SearchExecutor } from './search-executor';\nimport { Limits } from '../config/limits';\nexport class SearchEngine {\n    constructor(config) {\n        this.config = this.createDefaultConfig(config);\n        this.queryParser = new QueryParser(this.config.textSearch);\n        this.searchExecutor = new SearchExecutor(this.config);\n        this.queryCache = new Map();\n    }\n    /**\n     * Main search method - the public API\n     */\n    async search(query) {\n        const startTime = performance.now();\n        try {\n            // Generate cache key\n            const cacheKey = this.queryParser.generateQueryHash(query);\n            // Check cache first (but skip for pagination to avoid stale results)\n            if (this.config.caching.enabled && query.offset === 0) {\n                const cached = this.getCachedResult(cacheKey);\n                if (cached) {\n                    console.log('🎯 Cache hit for query:', query);\n                    return cached;\n                }\n            }\n            // Parse query into optimized execution plan\n            const parsedQuery = this.queryParser.parseQuery(query);\n            // Execute search using NEW native Dexie composable method\n            // OLD: const result = await this.searchExecutor.executeSearch(parsedQuery);\n            const result = await this.searchExecutor.executeSearchNativeDexie(parsedQuery);\n            // Add suggested queries\n            result.suggestedQueries = this.queryParser.extractSuggestions(query);\n            // Cache result if enabled (skip for pagination)\n            if (this.config.caching.enabled && query.offset === 0) {\n                this.cacheResult(cacheKey, result);\n            }\n            // Log performance\n            const totalTime = performance.now() - startTime;\n            return result;\n        }\n        catch (error) {\n            console.error('Search engine error:', error);\n            return {\n                bookmarks: [],\n                totalCount: 0,\n                queryTime: performance.now() - startTime,\n                pagination: {\n                    hasMore: false,\n                    totalPages: 0\n                }\n            };\n        }\n    }\n    /**\n     * Quick tag-only search (optimized for autocomplete)\n     */\n    async quickTagSearch(tag) {\n        return this.search({ tags: [tag], limit: Limits.quickSearchLimit });\n    }\n    /**\n     * Text-only search (for search-as-you-type)\n     */\n    async quickTextSearch(text) {\n        return this.search({ text, limit: Limits.quickSearchLimit });\n    }\n    /**\n     * Author search (search bookmarks by author)\n     */\n    async searchByAuthor(author) {\n        return this.search({ author, limit: Limits.authorSearchLimit });\n    }\n    /**\n     * Search authors for autocomplete dropdown\n     */\n    async searchAuthors(query = '', limit = 10) {\n        try {\n            // Import db from the db module like search executor does\n            const { db } = await import('../db');\n            // Ensure database is initialized\n            await db.initialize();\n            // Use the database method we already created\n            const authors = await db.searchAuthors(query, limit);\n            console.log(`🔍 SearchEngine found ${authors.length} authors for query: \"${query}\"`);\n            return authors;\n        }\n        catch (error) {\n            console.error('❌ SearchEngine author search failed:', error);\n            return [];\n        }\n    }\n    /**\n     * Recent bookmarks with optional filters\n     */\n    async getRecent(filters) {\n        return this.search({\n            ...filters,\n            sortBy: 'date',\n            limit: filters?.limit || Limits.defaultQueryLimit\n        });\n    }\n    /**\n     * Get tag suggestions for autocomplete\n     */\n    async suggestTags(partial) {\n        // This would use the tags store from our database\n        // For now, return empty array - will implement when we add tag management\n        return [];\n    }\n    /**\n     * Get search suggestions based on current query\n     */\n    async getSearchSuggestions(query) {\n        return this.queryParser.extractSuggestions(query);\n    }\n    /**\n     * Clear search cache\n     */\n    clearCache() {\n        this.queryCache.clear();\n        console.log('🧹 Search cache cleared');\n    }\n    /**\n     * Get cache statistics\n     */\n    getCacheStats() {\n        // Simple implementation - in production would track hit rate\n        return {\n            size: this.queryCache.size,\n            hitRate: 0.85 // Placeholder\n        };\n    }\n    /**\n     * Update search engine configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        // Recreate components with new config\n        this.queryParser = new QueryParser(this.config.textSearch);\n        this.searchExecutor = new SearchExecutor(this.config);\n        console.log('⚙️ Search engine configuration updated');\n    }\n    // Private methods\n    /**\n     * Create default configuration\n     */\n    createDefaultConfig(userConfig) {\n        const defaultConfig = {\n            performanceTargets: {\n                singleTagSearch: 5, // 5ms\n                multiTagSearch: 20, // 20ms  \n                textSearch: 30, // 30ms\n                combinedSearch: 50, // 50ms\n                autocomplete: 10 // 10ms\n            },\n            caching: {\n                enabled: false,\n                maxCacheSize: Limits.cacheSize, // Cache entries from centralized config\n                cacheTimeout: 5 * 60 * 1000 // 5 minutes\n            },\n            textSearch: {\n                enableFuzzyMatching: false, // Start simple\n                enableStemming: false,\n                enableSynonyms: false,\n                minTokenLength: 2, // FIXED: Allow 2+ character tokens to match database\n                maxTokens: 10,\n                proximityBoost: false\n            },\n            relevanceWeights: {\n                textMatch: 0.4,\n                tagMatch: 0.3,\n                recency: 0.15,\n                interaction: 0.1,\n                author: 0.05\n            }\n        };\n        return userConfig ? { ...defaultConfig, ...userConfig } : defaultConfig;\n    }\n    /**\n     * Get cached search result\n     */\n    getCachedResult(cacheKey) {\n        const cached = this.queryCache.get(cacheKey);\n        if (!cached)\n            return null;\n        // Check if cache entry is expired\n        const now = Date.now();\n        if (now - cached.timestamp > this.config.caching.cacheTimeout) {\n            this.queryCache.delete(cacheKey);\n            return null;\n        }\n        return cached.result;\n    }\n    /**\n     * Cache search result\n     */\n    cacheResult(cacheKey, result) {\n        // Don't cache empty results to avoid stale empty cache issues\n        if (result.bookmarks.length === 0) {\n            return;\n        }\n        // Implement LRU cache eviction if cache is full\n        if (this.queryCache.size >= this.config.caching.maxCacheSize) {\n            // Remove oldest entry\n            const oldestKey = this.queryCache.keys().next().value;\n            if (oldestKey) {\n                this.queryCache.delete(oldestKey);\n            }\n        }\n        this.queryCache.set(cacheKey, {\n            result,\n            timestamp: Date.now()\n        });\n    }\n}\n// Export default instance\nexport const searchEngine = new SearchEngine();\n","/**\n * XSaved Extension v2 - Search Module\n * Main exports for the search and filtering system\n */\n// Main search engine\nexport { SearchEngine, searchEngine } from './search-engine';\n// Core components  \nexport { QueryParser } from './query-parser';\nexport { SearchExecutor } from './search-executor';\n","/**\n * XSaved Extension v2 - Helper Utilities\n * Common helper functions and error classes\n * Adapted from proven v1 extension with enhancements\n */\n\n/**\n * Delay execution for specified milliseconds\n * @param {Number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Create a retry function with exponential backoff\n * @param {Function} fn - The function to retry\n * @param {Object} options - Retry options\n * @param {Number} options.maxRetries - Maximum number of retries\n * @param {Number} options.baseDelay - Base delay in milliseconds\n * @param {Boolean} options.jitter - Whether to add randomness to delay\n * @returns {Function} A wrapped function with retry logic\n */\nexport const withRetry = (fn, options = {}) => {\n  const { \n    maxRetries = 3, \n    baseDelay = 1000, \n    jitter = true \n  } = options;\n  \n  return async (...args) => {\n    let lastError;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn(...args);\n      } catch (error) {\n        lastError = error;\n        \n        // Don't retry if we've hit the max retries\n        if (attempt >= maxRetries) break;\n        \n        // Special handling for rate limit errors\n        const isRateLimit = error instanceof RateLimitError;\n        if (isRateLimit) {\n          console.warn(`⏱️ Rate limit hit. Attempt ${attempt + 1}/${maxRetries + 1}`);\n        } else {\n          console.warn(`🔄 Operation failed. Retrying (${attempt + 1}/${maxRetries + 1})`, error.message);\n        }\n        \n        // Calculate delay with exponential backoff\n        const exponentialDelay = baseDelay * Math.pow(2, attempt);\n        \n        // Add jitter if enabled (±10% variation)\n        const finalDelay = jitter \n          ? exponentialDelay * (0.9 + Math.random() * 0.2) \n          : exponentialDelay;\n        \n        // Wait before retrying\n        await delay(finalDelay);\n      }\n    }\n    \n    // If we get here, all retries failed\n    throw lastError;\n  };\n};\n\n/**\n * Error class for network-related errors\n */\nexport class NetworkError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"NetworkError\";\n  }\n}\n\n/**\n * Error class for rate limiting\n */\nexport class RateLimitError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"RateLimitError\";\n    this.retryAfter = null; // Can be set if server returns Retry-After header\n  }\n  \n  /**\n   * Set retry time from headers\n   * @param {Headers} headers - Response headers\n   */\n  setRetryAfterFromHeaders(headers) {\n    const retryAfter = headers.get('Retry-After');\n    if (retryAfter) {\n      // Convert to milliseconds (either seconds or date string)\n      if (/^\\d+$/.test(retryAfter)) {\n        // It's seconds\n        this.retryAfter = parseInt(retryAfter, 10) * 1000;\n      } else {\n        // It's a date string\n        const retryDate = new Date(retryAfter);\n        this.retryAfter = retryDate.getTime() - Date.now();\n      }\n    }\n  }\n}\n\n/**\n * Safe JSON parsing with fallback\n * @param {string} jsonString - JSON string to parse\n * @param {*} fallback - Fallback value if parsing fails\n * @returns {*} Parsed object or fallback\n */\nexport const safeJsonParse = (jsonString, fallback = null) => {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    console.warn('🔍 JSON parse failed, using fallback:', error.message);\n    return fallback;\n  }\n};\n\n/**\n * Get nested object property safely\n * @param {Object} obj - Object to access\n * @param {string} path - Dot-separated path (e.g., 'user.profile.name')\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} Value at path or default\n */\nexport const getIn = (obj, path, defaultValue = undefined) => {\n  const keys = path.split('.');\n  let result = obj;\n  \n  for (const key of keys) {\n    if (result == null || typeof result !== 'object') {\n      return defaultValue;\n    }\n    result = result[key];\n  }\n  \n  return result !== undefined ? result : defaultValue;\n};\n\n/**\n * Log error to chrome storage for debugging\n * @param {string} context - Context where error occurred\n * @param {Error|string} error - Error object or message\n * @param {Object} metadata - Additional metadata\n */\nexport const logError = async (context, error, metadata = {}) => {\n  const errorLog = {\n    timestamp: new Date().toISOString(),\n    context,\n    message: error?.message || error,\n    stack: error?.stack,\n    metadata,\n    userAgent: navigator.userAgent\n  };\n  \n  try {\n    // Get existing error logs\n    const result = await new Promise(resolve => {\n      chrome.storage.local.get(['errorLogs'], resolve);\n    });\n    \n    const existingLogs = result.errorLogs || [];\n    \n    // Keep only last 100 error logs to prevent storage bloat\n    const updatedLogs = [...existingLogs, errorLog].slice(-100);\n    \n    // Save back to storage\n    await new Promise(resolve => {\n      chrome.storage.local.set({ errorLogs: updatedLogs }, resolve);\n    });\n    \n    console.error(`📝 Error logged [${context}]:`, error);\n    \n  } catch (storageError) {\n    console.error('❌ Failed to log error to storage:', storageError);\n  }\n};\n\n/**\n * Throttle function calls\n * @param {Function} func - Function to throttle\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Throttled function\n */\nexport const throttle = (func, delay) => {\n  let timeoutId;\n  let lastExecTime = 0;\n  \n  return (...args) => {\n    const currentTime = Date.now();\n    \n    if (currentTime - lastExecTime > delay) {\n      func(...args);\n      lastExecTime = currentTime;\n    } else {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        func(...args);\n        lastExecTime = Date.now();\n      }, delay - (currentTime - lastExecTime));\n    }\n  };\n};\n\n/**\n * Debounce function calls\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, delay) => {\n  let timeoutId;\n  \n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n};\n\n/**\n * Format file size in human readable format\n * @param {number} bytes - Size in bytes\n * @returns {string} Formatted size\n */\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Format timestamp to relative time\n * @param {string|Date} timestamp - Timestamp to format\n * @returns {string} Relative time string\n */\nexport const formatRelativeTime = (timestamp) => {\n  const now = Date.now();\n  const time = new Date(timestamp).getTime();\n  const diff = now - time;\n  \n  const minute = 60 * 1000;\n  const hour = 60 * minute;\n  const day = 24 * hour;\n  const week = 7 * day;\n  const month = 30 * day;\n  \n  if (diff < minute) return 'just now';\n  if (diff < hour) return `${Math.floor(diff / minute)}m ago`;\n  if (diff < day) return `${Math.floor(diff / hour)}h ago`;\n  if (diff < week) return `${Math.floor(diff / day)}d ago`;\n  if (diff < month) return `${Math.floor(diff / week)}w ago`;\n  return `${Math.floor(diff / month)}mo ago`;\n};\n\n/**\n * Generate a simple hash from string\n * @param {string} str - String to hash\n * @returns {string} Hash string\n */\nexport const simpleHash = (str) => {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  \n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  return Math.abs(hash).toString(36);\n};\n\n/**\n * Check if URL is valid\n * @param {string} urlString - URL to validate\n * @returns {boolean} True if valid URL\n */\nexport const isValidUrl = (urlString) => {\n  try {\n    new URL(urlString);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Sanitize text for safe storage/display\n * @param {string} text - Text to sanitize\n * @returns {string} Sanitized text\n */\nexport const sanitizeText = (text) => {\n  if (typeof text !== 'string') return '';\n  \n  return text\n    .replace(/[<>]/g, '') // Remove potential HTML\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim()\n    .substring(0, 10000); // Limit length\n};\n\n/**\n * Performance monitoring wrapper\n * @param {string} label - Performance label\n * @param {Function} fn - Function to monitor\n * @returns {Function} Wrapped function with performance monitoring\n */\nexport const withPerformanceMonitoring = (label, fn) => {\n  return async (...args) => {\n    const startTime = performance.now();\n    \n    try {\n      const result = await fn(...args);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      if (duration > 100) { // Log slow operations (>100ms)\n        console.warn(`⏱️ Slow operation [${label}]: ${duration.toFixed(2)}ms`);\n      }\n      \n      return result;\n      \n    } catch (error) {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      console.error(`❌ Operation failed [${label}] after ${duration.toFixed(2)}ms:`, error);\n      throw error;\n    }\n  };\n};\n\nconsole.log('🛠️ XSaved v2 Helpers utility loaded - ready for error handling and utilities'); ","/**\n * XSaved Extension v2 - X.com API Fetcher\n * Real implementation for fetching bookmarks from X.com GraphQL API\n * Adapted from proven v1 extension with enhancements for IndexedDB integration\n */\n\nimport { NetworkError, RateLimitError } from './helpers.js';\n\n// Constants\nconst TWITTER_URL = 'https://x.com';\nconst BOOKMARK_ENDPOINT = `${TWITTER_URL}/i/api/graphql/QUjXply7fA7fk05FRyajEg/Bookmarks`;\n\n/**\n * Main function to fetch bookmarks from X.com API\n * @param {string|null} cursor - Pagination cursor for next batch\n * @param {string|null} csrfTokenOverride - Optional CSRF token override\n * @param {boolean} isDeltaSync - Whether this is a delta sync (smaller batches)\n * @returns {Promise<{bookmarks: Array, nextCursor: string|null}>}\n */\nexport const fetchBookmarksV2 = async (cursor = null, csrfTokenOverride = null, isDeltaSync = false) => {\n  console.log(`📥 Fetching bookmarks batch (delta: ${isDeltaSync}, cursor: ${cursor ? 'yes' : 'none'})`);\n  \n  // Adjust count for delta sync - fetch smaller batches to find new content faster\n  const batchSize = isDeltaSync ? 50 : 100;\n  const variables = { \n    count: batchSize, \n    includePromotedContent: true, \n    ...(cursor && { cursor }) \n  };\n  \n  // X.com GraphQL features - these are required for the API to work properly\n  const features = {\n    graphql_timeline_v2_bookmark_timeline: true,\n    rweb_tipjar_consumption_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    communities_web_enable_tweet_community_results_fetch: true,\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\n    articles_preview_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    creator_subscriptions_quote_tweet_preview_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: true,\n    rweb_video_timestamps_enabled: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_enhance_cards_enabled: false\n  };\n\n  // Get CSRF token\n  let csrfToken = csrfTokenOverride;\n  if (!csrfToken) {\n    try {\n      csrfToken = await getCsrfToken();\n      if (!csrfToken) {\n        console.warn('⚠️ CSRF token not found in cookies');\n      }\n    } catch (error) {\n      console.error('❌ Error getting CSRF token:', error.message);\n    }\n  }\n\n  // Construct headers required by X.com API\n  const headers = {\n    \"accept\": \"*/*\",\n    \"accept-language\": \"en-US,en;q=0.9\",\n    \"authorization\": \"Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA\",\n    \"content-type\": \"application/json\",\n    \"x-twitter-active-user\": \"yes\",\n    \"x-twitter-auth-type\": \"OAuth2Session\",\n    \"x-twitter-client-language\": \"en\",\n    \"x-csrf-token\": csrfToken || '',\n    \"x-client-transaction-id\": `${Date.now()}-${Math.random().toString(36).substring(2)}`,\n    \"x-client-uuid\": generateClientUUID()\n  };\n  \n  // Construct the URL with query parameters\n  const url = `${BOOKMARK_ENDPOINT}?variables=${encodeURIComponent(JSON.stringify(variables))}&features=${encodeURIComponent(JSON.stringify(features))}`;\n  \n  try {\n    console.log(`🌐 Making request to X.com API...`);\n    \n    const response = await fetch(url, {\n      headers,\n      referrer: `${TWITTER_URL}/i/bookmarks`,\n      referrerPolicy: \"strict-origin-when-cross-origin\",\n      method: \"GET\",\n      mode: \"cors\",\n      credentials: \"include\",\n    });\n    \n    if (!response.ok) {\n      if (response.status === 429) {\n        throw new RateLimitError(`Rate limit reached: ${response.status}`);\n      }\n      throw new NetworkError(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    let { bookmarks, nextCursor } = processBookmarksResponse(data);\n    \n    // Enhance bookmarks with media URLs for IndexedDB\n    bookmarks = enhanceBookmarksWithMetadata(bookmarks);\n    \n    // Check if cursor is valid (not same as current one)\n    nextCursor = checkNextCursor(cursor, nextCursor);\n    \n    console.log(`✅ Fetched ${bookmarks.length} bookmarks (next cursor: ${nextCursor ? 'yes' : 'none'})`);\n    \n    return { bookmarks, nextCursor };\n    \n  } catch (error) {\n    if (error instanceof RateLimitError || error instanceof NetworkError) {\n      throw error;\n    }\n    \n    if (error.message.includes('HTTP error! status:')) {\n      console.warn(\"⚠️ Possible rate limit hit. Consider backing off.\");\n      throw new NetworkError(error.message);\n    }\n    \n    console.error('❌ Unexpected error in fetchBookmarksV2:', error);\n    throw error;\n  }\n};\n\n/**\n * Process the raw response from X.com bookmarks API\n * @param {Object} data - Raw API response\n * @returns {Object} Processed bookmarks and pagination cursor\n */\nexport const processBookmarksResponse = (data) => {\n  try {\n    const entries = data?.data?.bookmark_timeline_v2?.timeline?.instructions?.[0]?.entries || [];\n    \n    const bookmarks = entries\n      .filter(entry => entry?.entryId?.startsWith('tweet-'))\n      .map(entry => {\n        const result = entry?.content?.itemContent?.tweet_results?.result;\n        const legacy = result?.legacy;\n        const user = result?.core?.user_results?.result?.legacy;\n        const avatar = result?.core?.user_results?.result?.avatar;\n\n        const avatarUrl = avatar?.image_url || user?.profile_image_url_https;\n\n        return {\n          id: result?.rest_id,\n          text: legacy?.full_text,\n          author: user?.screen_name,\n          avatar_url: avatarUrl,\n          created_at: legacy?.created_at,\n          sortIndex: entry?.sortIndex, \n          // Store full data for media extraction\n          FULL_DATA: result,\n        };\n      })\n      .filter(bookmark => bookmark.id && bookmark.text); // Remove entries with missing essential data\n\n    const nextCursor = entries.find(entry => entry?.entryId?.startsWith('cursor-bottom-'))?.content?.value;\n    \n    console.log(`📋 Processed ${bookmarks.length} bookmarks from API response`);\n    \n    return { bookmarks, nextCursor };\n    \n  } catch (error) {\n    console.error(\"❌ Error processing bookmarks response:\", error);\n    // Return empty results on error rather than breaking\n    return { bookmarks: [], nextCursor: null };\n  }\n};\n\n/**\n * Enhance bookmarks with metadata for IndexedDB storage\n * @param {Array} bookmarks - Raw bookmarks from API\n * @returns {Array} Enhanced bookmarks with media URLs and clean data\n */\nexport const enhanceBookmarksWithMetadata = (bookmarks) => {\n  return bookmarks.map(bookmark => {\n    const enhanced = {\n      id: bookmark.id,\n      text: bookmark.text,\n      author: bookmark.author,\n      avatar_url: bookmark.avatar_url,\n      created_at: bookmark.created_at,\n      sortIndex: bookmark.sortIndex, // Pass through the sortIndex\n      media_urls: extractMediaUrls(bookmark.FULL_DATA)\n    };\n    \n    // Remove FULL_DATA to keep storage lean\n    return enhanced;\n  });\n};\n\n/**\n * Extract media URLs from tweet data\n * @param {Object} tweetData - Full tweet data from API\n * @returns {Array} Array of media URLs\n */\nexport const extractMediaUrls = (tweetData) => {\n  const media_urls = [];\n  \n  try {\n    // Extract photos\n    const media = tweetData?.legacy?.entities?.media || [];\n    media.forEach(item => {\n      if (item.type === 'photo' && item.media_url_https) {\n        media_urls.push(item.media_url_https);\n      }\n    });\n    \n    // Extract video thumbnails\n    const extendedEntities = tweetData?.legacy?.extended_entities?.media || [];\n    extendedEntities.forEach(item => {\n      if (item.type === 'video' && item.media_url_https) {\n        media_urls.push(item.media_url_https);\n      }\n    });\n    \n  } catch (error) {\n    console.warn('⚠️ Error extracting media URLs:', error);\n  }\n  \n  return [...new Set(media_urls)]; // Remove duplicates\n};\n\n/**\n * Get CSRF token from browser cookies\n * @returns {Promise<string|null>} CSRF token or null if not found\n */\nexport const getCsrfToken = () => {\n  return new Promise((resolve) => {\n    chrome.cookies.get({ url: TWITTER_URL, name: 'ct0' }, (cookie) => {\n      if (chrome.runtime.lastError) {\n        console.error('❌ Error getting CSRF token:', chrome.runtime.lastError);\n        resolve(null);\n        return;\n      }\n      \n      if (cookie) {\n        console.log('🔑 CSRF token retrieved successfully');\n        resolve(cookie.value);\n      } else {\n        console.log('⚠️ No CSRF token found in cookies');\n        resolve(null);\n      }\n    });\n  });\n};\n\n/**\n * Check if user is logged into X.com by verifying CSRF token\n * @returns {Promise<boolean>} True if logged in, false otherwise\n */\nexport const checkXLoginStatus = async () => {\n  try {\n    const token = await getCsrfToken();\n    if (!token) {\n      console.log('❌ User not logged into X.com (no CSRF token)');\n      return false;\n    }\n    \n    console.log('✅ User is logged into X.com');\n    return true;\n    \n  } catch (error) {\n    console.error('❌ Error checking X login status:', error);\n    return false;\n  }\n};\n\n/**\n * Generate a client UUID for request headers\n * @returns {string} UUID string\n */\nconst generateClientUUID = () => {\n  try {\n    return crypto.randomUUID();\n  } catch (error) {\n    // Fallback for environments without crypto.randomUUID\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n};\n\n/**\n * Check if cursor is different from previous one (indicates more data available)\n * @param {string|null} currentCursor - Current cursor\n * @param {string|null} nextCursor - Next cursor from API\n * @returns {string|null} Next cursor or null if no more data\n */\nconst checkNextCursor = (currentCursor, nextCursor) => {\n  return nextCursor === currentCursor ? null : nextCursor;\n};\n\nconsole.log('📡 XSaved v2 Fetcher utility loaded - ready for X.com API integration'); ","/**\n * XSaved Extension v2 - SortIndex Utilities\n * Twitter Snowflake ID parsing and date extraction\n */\n/**\n * Extract date from Twitter/X sortIndex (Snowflake ID)\n * @param {string|number|BigInt} sortIndex - The Twitter sortIndex/Snowflake ID\n * @returns {Date} The extracted date\n */\nexport function getSortIndexDate(sortIndex) {\n    // Twitter epoch: January 1, 2010 00:00:00 UTC (in milliseconds) -> 1262304000000\n    // Twitter epoch told by Grok and ChatGpt (November 4, 2010, 01:42:54 UTC) -> 1288834974657\n    // Custom epoch (2011-09-27 01:13:00 UTC) -> 1317959580952\n    const TWITTER_EPOCH = 1288834974657;\n    try {\n        // Convert to BigInt for precise calculation\n        const id = BigInt(sortIndex);\n        // Extract timestamp (first 41 bits, shifted right by 22 bits)\n        const timestampMs = Number(id >> 22n) + TWITTER_EPOCH;\n        // Return as Date object\n        return new Date(timestampMs);\n    }\n    catch (error) {\n        throw new Error(`Invalid sortIndex: ${sortIndex}. Must be a valid number or string representing a Snowflake ID.`);\n    }\n}\n/**\n * Get ISO string from sortIndex\n * @param {string|number|BigInt} sortIndex - The Twitter sortIndex/Snowflake ID\n * @returns {string} ISO date string\n */\nexport function getSortIndexDateISO(sortIndex) {\n    return getSortIndexDate(sortIndex).toISOString();\n}\n/**\n * Get relative time string from sortIndex (e.g., \"2 hours ago\")\n * @param {string|number|BigInt} sortIndex - The Twitter sortIndex/Snowflake ID\n * @returns {string} Relative time string\n */\nexport function getSortIndexRelativeTime(sortIndex) {\n    const date = getSortIndexDate(sortIndex);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const seconds = Math.floor(diffMs / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    const months = Math.floor(days / 30);\n    const years = Math.floor(days / 365);\n    if (years > 0)\n        return `${years} year${years > 1 ? 's' : ''} ago`;\n    if (months > 0)\n        return `${months} month${months > 1 ? 's' : ''} ago`;\n    if (days > 0)\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n    if (hours > 0)\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    if (minutes > 0)\n        return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n    if (seconds > 0)\n        return `${seconds} second${seconds > 1 ? 's' : ''} ago`;\n    return 'just now';\n}\n/**\n * Validate if a string/number is a valid Twitter Snowflake ID\n * @param {string|number|bigint} sortIndex - The value to validate\n * @returns {boolean} True if valid Snowflake ID\n */\nexport function isValidSortIndex(sortIndex) {\n    try {\n        const id = BigInt(sortIndex);\n        // Twitter Snowflake IDs are 64-bit integers\n        // They should be positive and within reasonable bounds\n        return id > 0n && id < 2n ** 64n;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Normalize any date format to ISO string for consistent sorting\n * Handles Twitter's old format: \"Thu May 31 08:23:54 +0000 2018\"\n * and ISO format: \"2025-09-20T19:10:11.000Z\"\n * @param {string} dateString - The date string to normalize\n * @returns {string} ISO date string\n */\nexport function normalizeDateToISO(dateString) {\n    if (!dateString)\n        return new Date().toISOString();\n    try {\n        // If it's already ISO format, return as-is\n        if (dateString.includes('T') && (dateString.includes('Z') || dateString.includes('+'))) {\n            return new Date(dateString).toISOString();\n        }\n        // Handle Twitter's old format: \"Thu May 31 08:23:54 +0000 2018\"\n        // Convert to ISO format\n        const date = new Date(dateString);\n        if (isNaN(date.getTime())) {\n            console.warn(`⚠️ Invalid date format: ${dateString}, using current date`);\n            return new Date().toISOString();\n        }\n        return date.toISOString();\n    }\n    catch (error) {\n        console.warn(`⚠️ Date normalization failed for: ${dateString}, using current date`);\n        return new Date().toISOString();\n    }\n}\n","/**\n * XSaved Extension v2 - Communication Utilities\n * Robust message passing between service worker, content scripts, and popup\n * Adapted from proven v1 extension with enhancements\n */\n\n/**\n * Safely notify content script in a specific tab\n * @param {number} tabId - Tab ID to send message to\n * @param {Object} message - Message object to send\n * @returns {Promise} Promise that resolves with response or silently on error\n */\nexport const notifyContentScript = (tabId, message) => new Promise((resolve, reject) => {\n  if (!tabId) {\n    resolve(); // Don't reject, just resolve silently\n    return;\n  }\n  \n  // Check if tab exists first\n  chrome.tabs.get(tabId, (tab) => {\n    if (chrome.runtime.lastError) {\n      // Tab doesn't exist, resolve silently\n      console.log(`📱 Tab ${tabId} not found (normal during navigation)`);\n      resolve();\n      return;\n    }\n    \n    // Check if tab is still valid (not chrome:// or extension pages)\n    if (!tab.url || tab.url.startsWith('chrome://') || tab.url.startsWith('chrome-extension://')) {\n      console.log(`📱 Tab ${tabId} not valid for messaging`);\n      resolve();\n      return;\n    }\n    \n    // Tab exists and is valid, send message\n    chrome.tabs.sendMessage(tabId, message, (response) => {\n      if (chrome.runtime.lastError) {\n        // Content script not available, resolve silently (common during navigation)\n        console.log(`📱 Content script not available in tab ${tabId} (normal during reload/navigation)`);\n        resolve();\n      } else {\n        console.log(`📱 Message sent to tab ${tabId}:`, message.action || 'unknown');\n        resolve(response);\n      }\n    });\n  });\n});\n\n/**\n * Safely notify popup (if open)\n * @param {Object} message - Message object to send\n */\nexport const notifyPopup = (message) => {\n  try {\n    chrome.runtime.sendMessage(message);\n    console.log(`🪟 Message sent to popup:`, message.action || 'unknown');\n  } catch (error) {\n    // Popup might not be open, fail silently\n    console.log(`🪟 Popup not available (normal when closed)`);\n  }\n};\n\n/**\n * Update progress in content script with enhanced error handling\n * @param {number} current - Current progress count\n * @param {number} total - Total expected count\n * @param {number} tabId - Tab ID to notify\n * @param {Object} metadata - Additional progress metadata\n */\nexport const updateProgress = async (current, total, tabId, metadata = {}) => {\n  if (!tabId) return;\n  \n  try {\n    const percentage = total > 0 ? Math.round((current / total) * 100) : 0;\n    const progressMessage = { \n      action: \"updateProgress\", \n      bookmarkCount: current,\n      totalBookmarks: total,\n      percentage: percentage,\n      phase: metadata.phase || 'processing',\n      message: metadata.message || `Processing ${current}/${total}...`,\n      ...metadata\n    };\n    \n    await notifyContentScript(tabId, progressMessage);\n    \n  } catch (error) {\n    // Silently handle tab/content script errors\n    console.log(\"📱 Tab unavailable for progress update (normal during long operations)\");\n  }\n};\n\n/**\n * Broadcast message to all X.com tabs\n * @param {Object} message - Message to broadcast\n * @param {Object} options - Broadcast options\n * @param {boolean} options.activeOnly - Only send to active tabs\n * @returns {Promise<Array>} Array of responses from tabs\n */\nexport const broadcastToXTabs = async (message, options = {}) => {\n  const { activeOnly = false } = options;\n  \n  return new Promise((resolve) => {\n    // Query for X.com tabs\n    const queryOptions = { \n      url: [\"https://twitter.com/*\", \"https://x.com/*\"]\n    };\n    \n    if (activeOnly) {\n      queryOptions.active = true;\n    }\n    \n    chrome.tabs.query(queryOptions, async (tabs) => {\n      console.log(`📡 Broadcasting to ${tabs.length} X.com tabs:`, message.action || 'unknown');\n      \n      const responses = [];\n      \n      // Send to all matching tabs\n      for (const tab of tabs) {\n        try {\n          const response = await notifyContentScript(tab.id, message);\n          responses.push({ tabId: tab.id, response });\n        } catch (error) {\n          responses.push({ tabId: tab.id, error: error.message });\n        }\n      }\n      \n      resolve(responses);\n    });\n  });\n};\n\n/**\n * Send message with retry logic\n * @param {number} tabId - Tab ID to send message to\n * @param {Object} message - Message to send\n * @param {Object} options - Retry options\n * @param {number} options.maxRetries - Maximum retry attempts\n * @param {number} options.retryDelay - Delay between retries in ms\n * @returns {Promise} Promise that resolves with response\n */\nexport const sendMessageWithRetry = async (tabId, message, options = {}) => {\n  const { maxRetries = 3, retryDelay = 1000 } = options;\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      const response = await notifyContentScript(tabId, message);\n      return response;\n      \n    } catch (error) {\n      console.warn(`🔄 Message retry ${attempt + 1}/${maxRetries} for tab ${tabId}`);\n      \n      if (attempt === maxRetries - 1) {\n        throw error;\n      }\n      \n      // Wait before retry\n      await new Promise(resolve => setTimeout(resolve, retryDelay));\n    }\n  }\n};\n\n/**\n * Check if content script is available in tab\n * @param {number} tabId - Tab ID to check\n * @returns {Promise<boolean>} True if content script is available\n */\nexport const isContentScriptAvailable = async (tabId) => {\n  try {\n    const response = await notifyContentScript(tabId, { action: 'ping' });\n    return !!response;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Get active X.com tab ID\n * @returns {Promise<number|null>} Active X.com tab ID or null\n */\nexport const getActiveXTabId = async () => {\n  return new Promise((resolve) => {\n    chrome.tabs.query({ \n      active: true, \n      currentWindow: true,\n      url: [\"https://twitter.com/*\", \"https://x.com/*\"]\n    }, (tabs) => {\n      resolve(tabs.length > 0 ? tabs[0].id : null);\n    });\n  });\n};\n\n/**\n * Wait for content script to be ready in tab\n * @param {number} tabId - Tab ID to wait for\n * @param {number} timeout - Timeout in milliseconds\n * @returns {Promise<boolean>} True if content script becomes available\n */\nexport const waitForContentScript = async (tabId, timeout = 10000) => {\n  const startTime = Date.now();\n  \n  while (Date.now() - startTime < timeout) {\n    if (await isContentScriptAvailable(tabId)) {\n      return true;\n    }\n    \n    // Wait 500ms before checking again\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n  \n  return false;\n};\n\n/**\n * Enhanced state update broadcaster with filtering\n * @param {Object} state - State object to broadcast\n * @param {Object} options - Broadcast options\n * @param {Array} options.includeActions - Only send to tabs expecting these actions\n * @param {boolean} options.onlyActiveTab - Only send to active tab\n */\nexport const broadcastStateUpdate = async (state, options = {}) => {\n  const { includeActions = [], onlyActiveTab = false } = options;\n  \n  const stateMessage = {\n    action: \"stateUpdate\",\n    ...state,\n    timestamp: Date.now()\n  };\n  \n  try {\n    if (onlyActiveTab) {\n      const activeTabId = await getActiveXTabId();\n      if (activeTabId) {\n        await notifyContentScript(activeTabId, stateMessage);\n      }\n    } else {\n      await broadcastToXTabs(stateMessage);\n    }\n    \n    // Also notify popup\n    notifyPopup(stateMessage);\n    \n  } catch (error) {\n    console.error('❌ Error broadcasting state update:', error);\n  }\n};\n\n/**\n * Message queue for handling high-frequency updates\n */\nclass MessageQueue {\n  constructor(options = {}) {\n    this.queue = [];\n    this.processing = false;\n    this.maxQueueSize = options.maxQueueSize || 100;\n    this.processInterval = options.processInterval || 100;\n  }\n  \n  /**\n   * Add message to queue\n   * @param {number} tabId - Tab ID\n   * @param {Object} message - Message to queue\n   */\n  enqueue(tabId, message) {\n    // Prevent queue overflow\n    if (this.queue.length >= this.maxQueueSize) {\n      console.warn('📬 Message queue full, dropping oldest message');\n      this.queue.shift();\n    }\n    \n    this.queue.push({ tabId, message, timestamp: Date.now() });\n    this.processQueue();\n  }\n  \n  /**\n   * Process queued messages\n   */\n  async processQueue() {\n    if (this.processing || this.queue.length === 0) return;\n    \n    this.processing = true;\n    \n    while (this.queue.length > 0) {\n      const { tabId, message } = this.queue.shift();\n      \n      try {\n        await notifyContentScript(tabId, message);\n      } catch (error) {\n        console.warn('📬 Queued message failed:', error.message);\n      }\n      \n      // Small delay to prevent overwhelming\n      await new Promise(resolve => setTimeout(resolve, this.processInterval));\n    }\n    \n    this.processing = false;\n  }\n}\n\n// Global message queue instance\nexport const messageQueue = new MessageQueue();\n\n/**\n * Queue message for delivery (useful for high-frequency updates)\n * @param {number} tabId - Tab ID\n * @param {Object} message - Message to queue\n */\nexport const queueMessage = (tabId, message) => {\n  messageQueue.enqueue(tabId, message);\n};\n\n/**\n * Heartbeat system to maintain connection with content scripts\n */\nclass HeartbeatManager {\n  constructor() {\n    this.connectedTabs = new Set();\n    this.heartbeatInterval = null;\n  }\n  \n  start() {\n    if (this.heartbeatInterval) return;\n    \n    console.log('💓 Starting heartbeat manager');\n    \n    this.heartbeatInterval = setInterval(async () => {\n      await this.checkConnections();\n    }, 30000); // Check every 30 seconds\n  }\n  \n  stop() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n      console.log('💓 Heartbeat manager stopped');\n    }\n  }\n  \n  async checkConnections() {\n    const tabs = await new Promise(resolve => {\n      chrome.tabs.query({ url: [\"https://twitter.com/*\", \"https://x.com/*\"] }, resolve);\n    });\n    \n    for (const tab of tabs) {\n      const isConnected = await isContentScriptAvailable(tab.id);\n      \n      if (isConnected) {\n        this.connectedTabs.add(tab.id);\n      } else {\n        this.connectedTabs.delete(tab.id);\n      }\n    }\n    \n    console.log(`💓 Heartbeat: ${this.connectedTabs.size} content scripts connected`);\n  }\n  \n  isTabConnected(tabId) {\n    return this.connectedTabs.has(tabId);\n  }\n}\n\n// Global heartbeat manager\nexport const heartbeatManager = new HeartbeatManager();\n\nconsole.log('📡 XSaved v2 Communicator utility loaded - ready for message passing'); ","/**\n * XSaved Extension v2 - Enhanced Service Worker\n * Combines proven smart scheduling with IndexedDB and Search Engine\n */\n// Import our Components 1 & 2 (TypeScript source - Webpack will bundle)\nimport { db } from '../db/index';\nimport { searchEngine } from '../search/index';\nimport { Limits } from '../config/limits';\n// Import existing proven utilities (keep .js extension for webpack)\nimport { fetchBookmarksV2, getCsrfToken, checkXLoginStatus } from './utils/fetcher.js';\nimport { getSortIndexDateISO, getSortIndexDate, normalizeDateToISO } from '../utils/sortIndex-utils';\nimport { notifyContentScript, notifyPopup } from './utils/communicator.js';\nimport { delay, RateLimitError } from './utils/helpers.js';\n// ===============================\n// PROVEN SCHEDULING CONSTANTS (Keep from background.js)\n// ===============================\nconst SCHEDULE_INTERVALS = {\n    FREQUENT: 5, // 5 minutes - when user is active\n    NORMAL: 15, // 15 minutes - default\n    INFREQUENT: 60, // 1 hour - when user is inactive\n    OFFLINE: 240 // 4 hours - when user seems offline\n};\nconst AUTOMATIC_MIN_FETCH_INTERVAL = SCHEDULE_INTERVALS.FREQUENT * 60 * 1000; // 5 minutes\nconst AUTOMATIC_SCHEDULED_FETCH_INTERVAL_IN_MINUTES = SCHEDULE_INTERVALS.NORMAL; // 15 minutes\nconst MAX_RETRIES = 3;\nconst RATE_LIMIT_DELAY = 1500; // 1.5 seconds\nconst INITIAL_REQUESTS_LEFT = 20;\nconst USER_ACTIVITY_THRESHOLD = 2 * 60 * 60 * 1000; // 2 hours\nconst EXPONENTIAL_BACKOFF_BASE = 2;\nconst MAX_BACKOFF_MINUTES = 240; // 4 hours max backoff\n// ===============================\n// STATE MANAGEMENT (Keep from background.js)\n// ===============================\nlet currentScheduleInterval = SCHEDULE_INTERVALS.NORMAL;\nlet consecutiveFailures = 0;\nlet lastUserActivity = Date.now();\nlet authSession = null;\nlet isExtracting = false;\nlet requestsLeft = INITIAL_REQUESTS_LEFT;\nlet bookmarksTabId = null;\nlet estimatedTotalBookmarks = 0;\n// Delta sync variables (Keep existing logic)\nlet lastBookmarkId = null;\nlet lastSyncTimestamp = null;\nlet isDeltaSync = false;\nlet newestBookmarkId = null;\n// Extraction state tracking\nlet extractionState = {\n    phase: 'idle', // 'idle', 'twitter_api_fetch', 'indexeddb_save'\n    startTime: null,\n    message: '',\n    bookmarkCount: 0,\n    totalBookmarks: 0,\n    isBackground: false,\n    percentage: 0\n};\n// ===============================\n// ENHANCED INITIALIZATION\n// ===============================\nclass ExtensionServiceWorker {\n    constructor() {\n        this.initialized = false;\n        this.db = null;\n        this.searchEngine = null;\n        this.initialized = false;\n        this.db = null;\n        this.searchEngine = null;\n    }\n    async initialize() {\n        if (this.initialized)\n            return;\n        try {\n            console.log('🚀 Initializing Enhanced Service Worker...');\n            // Initialize IndexedDB (Component 1) - USING STATIC IMPORTS\n            console.log('📀 Initializing IndexedDB...');\n            try {\n                await db.initialize();\n                this.db = db;\n                console.log('✅ IndexedDB initialized successfully');\n            }\n            catch (error) {\n                console.error('❌ Failed to initialize IndexedDB:', error);\n                this.db = null;\n            }\n            // Initialize Search Engine (Component 2) - USING STATIC IMPORTS\n            console.log('🔍 Initializing Search Engine...');\n            try {\n                this.searchEngine = searchEngine;\n                console.log('✅ Search Engine initialized successfully:', !!this.searchEngine);\n            }\n            catch (error) {\n                console.error('❌ Failed to initialize Search Engine:', error);\n                this.searchEngine = null;\n            }\n            // Load existing sync state from chrome.storage\n            await this.loadSyncState();\n            // Set up smart scheduling (keep existing logic)\n            this.setupSmartScheduling();\n            console.log('✅ Enhanced Service Worker initialized successfully');\n            this.initialized = true;\n            // Dev tag functions are initialized with testXSaved object below\n        }\n        catch (error) {\n            console.error('❌ Service Worker initialization failed:', error);\n            throw error;\n        }\n    }\n    async loadSyncState() {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\n                'lastBookmarkId',\n                'lastSyncTimestamp',\n                'syncMode',\n                'requestsLeft'\n            ], (result) => {\n                lastBookmarkId = result.lastBookmarkId || null;\n                lastSyncTimestamp = result.lastSyncTimestamp || null;\n                requestsLeft = result.requestsLeft || INITIAL_REQUESTS_LEFT;\n                // Determine if we can do delta sync\n                const timeSinceLastSync = lastSyncTimestamp ? Date.now() - lastSyncTimestamp : null;\n                isDeltaSync = !!(lastBookmarkId && timeSinceLastSync < 24 * 60 * 60 * 1000);\n                console.log('📊 Loaded sync state:', {\n                    lastBookmarkId: lastBookmarkId ? `${lastBookmarkId.substring(0, 15)}...` : null,\n                    isDeltaSync,\n                    timeSinceLastSync: timeSinceLastSync ? Math.round(timeSinceLastSync / 60000) + 'min' : null\n                });\n                resolve(undefined);\n            });\n        });\n    }\n    setupSmartScheduling() {\n        // Keep existing alarm logic\n        chrome.alarms.onAlarm.addListener(async (alarm) => {\n            if (alarm.name === 'fetchBookmarks') {\n                if (await this.isAllowedToAutomaticFetch()) {\n                    console.log('⏰ SMART ALARM: Fetching bookmarks');\n                    await this.backgroundFetch();\n                }\n            }\n        });\n        // Schedule initial alarm\n        this.scheduleNextFetch();\n    }\n    async isAllowedToAutomaticFetch() {\n        const now = Date.now();\n        // Check if extraction is already in progress\n        if (isExtracting) {\n            console.log('⏸️ Extraction already in progress, skipping automatic fetch');\n            return false;\n        }\n        // Check minimum interval\n        if (lastSyncTimestamp && (now - lastSyncTimestamp) < AUTOMATIC_MIN_FETCH_INTERVAL) {\n            console.log('⏸️ Too soon since last sync, skipping automatic fetch');\n            return false;\n        }\n        // Check if user is logged in to X.com\n        const isLoggedIn = await this.checkXLoginStatus();\n        if (!isLoggedIn) {\n            console.log('⏸️ User not logged in to X.com, skipping automatic fetch');\n            return false;\n        }\n        return true;\n    }\n    async checkXLoginStatus() {\n        return await checkXLoginStatus();\n    }\n    async backgroundFetch() {\n        updateExtractionState({\n            isBackground: true,\n            message: 'Background sync starting...'\n        });\n        await extractAllBookmarks();\n    }\n    scheduleNextFetch() {\n        // Clear any existing alarm\n        chrome.alarms.clear('fetchBookmarks');\n        // Schedule next alarm based on current interval\n        const nextFetchInMinutes = currentScheduleInterval;\n        chrome.alarms.create('fetchBookmarks', { delayInMinutes: nextFetchInMinutes });\n        console.log(`⏰ Next automatic fetch scheduled in ${nextFetchInMinutes} minutes`);\n    }\n    updateScheduleInterval() {\n        const timeSinceActivity = Date.now() - lastUserActivity;\n        const oldInterval = currentScheduleInterval;\n        if (timeSinceActivity < USER_ACTIVITY_THRESHOLD) {\n            currentScheduleInterval = SCHEDULE_INTERVALS.FREQUENT;\n        }\n        else if (timeSinceActivity < USER_ACTIVITY_THRESHOLD * 2) {\n            currentScheduleInterval = SCHEDULE_INTERVALS.NORMAL;\n        }\n        else if (timeSinceActivity < USER_ACTIVITY_THRESHOLD * 4) {\n            currentScheduleInterval = SCHEDULE_INTERVALS.INFREQUENT;\n        }\n        else {\n            currentScheduleInterval = SCHEDULE_INTERVALS.OFFLINE;\n        }\n        if (oldInterval !== currentScheduleInterval) {\n            console.log(`📊 Schedule interval updated: ${oldInterval}min → ${currentScheduleInterval}min`);\n            this.scheduleNextFetch();\n        }\n    }\n}\n// ===============================\n// ENHANCED BOOKMARK SAVING (NEW: IndexedDB Integration)\n// ===============================\nconst saveBookmarkToLocal = async (bookmark, userTags = []) => {\n    try {\n        // Ensure service worker is initialized\n        await serviceWorker.initialize();\n        // Create BookmarkEntity for Component 1\n        const bookmarkEntity = {\n            id: bookmark.id,\n            text: bookmark.text || '',\n            author: bookmark.author || '',\n            avatar_url: bookmark.avatar_url || null,\n            created_at: bookmark.created_at ? normalizeDateToISO(bookmark.created_at) : null, // CRITICAL: Normalize date format for consistent sorting\n            bookmarked_at: bookmark.sortIndex ? getSortIndexDateISO(bookmark.sortIndex) : null,\n            tags: userTags.length > 0 ? userTags : (bookmark.tags || []),\n            media_urls: bookmark.media_urls || [],\n            // Add search tokenization for Component 2\n            textTokens: tokenizeText(bookmark.text || '')\n        };\n        // Save to IndexedDB (Component 1) - TEMPORARILY USE CHROME.STORAGE FOR TESTING\n        if (serviceWorker.db) {\n            console.log('💾 Using IndexedDB for bookmark storage');\n            const result = await serviceWorker.db.addBookmark(bookmarkEntity);\n            if (result.success) {\n                console.log(`✅ Saved bookmark ${bookmark.id} to IndexedDB`);\n                extractionState.bookmarkCount++;\n                broadcastStateUpdate();\n                return { success: true, data: result.data };\n            }\n            else {\n                console.error('❌ Failed to save bookmark to IndexedDB:', result.error);\n                return {\n                    success: false,\n                    error: result.error || 'IndexedDB save failed',\n                    details: `Database addBookmark operation failed for bookmark ${bookmark.id}`\n                };\n            }\n        }\n        else {\n            // Fallback to chrome.storage.local for testing\n            console.log('💾 Using chrome.storage.local for bookmark storage (testing mode)');\n            try {\n                const key = `bookmark_${bookmark.id}`;\n                await chrome.storage.local.set({ [key]: bookmarkEntity });\n                console.log(`✅ Saved bookmark ${bookmark.id} to local storage`);\n                extractionState.bookmarkCount++;\n                broadcastStateUpdate();\n                return { success: true, data: bookmarkEntity };\n            }\n            catch (storageError) {\n                console.error('❌ Failed to save bookmark to chrome.storage:', storageError);\n                return {\n                    success: false,\n                    error: storageError.message || 'Chrome storage save failed',\n                    details: `Chrome storage operation failed for bookmark ${bookmark.id}: ${storageError.message}`\n                };\n            }\n        }\n    }\n    catch (error) {\n        console.error('❌ Error saving bookmark to local storage:', error);\n        return {\n            success: false,\n            error: error.message || 'Unknown save error',\n            details: `Unexpected error in saveBookmarkToLocal for bookmark ${bookmark?.id}: ${error.message || error}`\n        };\n    }\n};\n// ===============================\n// ENHANCED EXTRACTION FLOW (Keep existing + IndexedDB)\n// ===============================\nconst extractAllBookmarks = async () => {\n    if (isExtracting) {\n        console.log('⚠️ Extraction already in progress');\n        return;\n    }\n    await serviceWorker.initialize();\n    isExtracting = true;\n    let cursor = null;\n    let allExtractedBookmarks = [];\n    let retryCount = 0;\n    updateExtractionState({\n        phase: 'twitter_api_fetch',\n        startTime: Date.now(),\n        message: isDeltaSync ? 'Delta sync: Checking for new bookmarks...' : 'Full sync: Extracting all bookmarks...',\n        bookmarkCount: 0,\n        isBackground: extractionState.isBackground\n    });\n    try {\n        // Get CSRF token (keep existing logic)\n        console.log('🔑 Getting CSRF token...');\n        const csrfToken = await getCsrfToken();\n        let hasMore = true;\n        let consecutiveEmptyBatches = 0;\n        while (hasMore && consecutiveEmptyBatches < 3) {\n            try {\n                console.log(`📥 Fetching batch ${Math.floor(allExtractedBookmarks.length / 100) + 1}...`);\n                // Use existing fetcher logic\n                const { bookmarks, nextCursor } = await fetchBookmarksV2(cursor, csrfToken, isDeltaSync);\n                if (bookmarks.length === 0) {\n                    consecutiveEmptyBatches++;\n                    console.log(`⚠️ Empty batch ${consecutiveEmptyBatches}/3`);\n                }\n                else {\n                    consecutiveEmptyBatches = 0;\n                }\n                // Process bookmarks in batches\n                updateExtractionState({\n                    phase: 'indexeddb_save',\n                    message: `Processing ${bookmarks.length} bookmarks...`\n                });\n                for (const bookmark of bookmarks) {\n                    // Check for delta sync termination\n                    if (isDeltaSync && lastBookmarkId && bookmark.id === lastBookmarkId) {\n                        console.log('🎯 Delta sync: Reached last known bookmark, stopping');\n                        hasMore = false;\n                        break;\n                    }\n                    // Save to IndexedDB instead of server\n                    await saveBookmarkToLocal(bookmark);\n                    allExtractedBookmarks.push(bookmark);\n                    // Update newest bookmark ID\n                    if (!newestBookmarkId) {\n                        newestBookmarkId = bookmark.id;\n                    }\n                }\n                // Update cursor and continue\n                cursor = nextCursor;\n                hasMore = !!nextCursor && consecutiveEmptyBatches < 3;\n                // Rate limiting (keep existing logic)\n                requestsLeft--;\n                if (requestsLeft <= 0) {\n                    console.log('⏸️ Rate limit reached, stopping extraction');\n                    break;\n                }\n                // Delay between requests\n                if (hasMore) {\n                    await delay(RATE_LIMIT_DELAY);\n                }\n            }\n            catch (error) {\n                console.error('❌ Error in extraction batch:', error);\n                if (error instanceof RateLimitError) {\n                    console.log('⏸️ Rate limited, stopping extraction');\n                    break;\n                }\n                retryCount++;\n                if (retryCount >= MAX_RETRIES) {\n                    console.error('❌ Max retries reached, stopping extraction');\n                    break;\n                }\n                await delay(RATE_LIMIT_DELAY * retryCount);\n            }\n        }\n        // Update sync state (keep existing logic)\n        if (newestBookmarkId) {\n            lastBookmarkId = newestBookmarkId;\n            lastSyncTimestamp = Date.now();\n            chrome.storage.local.set({\n                lastBookmarkId,\n                lastSyncTimestamp,\n                requestsLeft,\n                syncType: isDeltaSync ? 'delta' : 'full'\n            });\n        }\n        updateExtractionState({\n            phase: 'idle',\n            message: `✅ Extraction complete! Processed ${allExtractedBookmarks.length} bookmarks`,\n            percentage: 100\n        });\n        console.log(`🎉 Extraction complete: ${allExtractedBookmarks.length} bookmarks saved to IndexedDB`);\n    }\n    catch (error) {\n        console.error('❌ Extraction failed:', error);\n        updateExtractionState({\n            phase: 'idle',\n            message: `❌ Extraction failed: ${error.message}`,\n            percentage: 0\n        });\n    }\n    finally {\n        isExtracting = false;\n        // Schedule next fetch (keep existing logic)\n        serviceWorker.scheduleNextFetch();\n    }\n};\n// ===============================\n// MESSAGE HANDLING (Enhanced with search)\n// ===============================\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log(\"Enhanced Service Worker received message:\", request);\n    switch (request.action) {\n        case \"startExtraction\":\n            handleStartExtraction(sendResponse, request.options);\n            return true;\n        case \"searchBookmarks\":\n            handleSearchBookmarks(request.query, sendResponse);\n            return true;\n        case \"searchAuthors\":\n            handleSearchAuthors(request.query, request.limit, sendResponse);\n            return true;\n        case \"saveBookmark\":\n            handleSaveBookmark(request.bookmark, sendResponse);\n            return true;\n        case \"getProgress\":\n            sendResponse({\n                isExtracting,\n                bookmarkCount: extractionState.bookmarkCount,\n                totalBookmarks: estimatedTotalBookmarks || extractionState.bookmarkCount,\n                extractionState: extractionState,\n                canStartExtraction: !isExtracting\n            });\n            break;\n        case \"getStats\":\n            handleGetStats(sendResponse);\n            return true;\n        case \"getState\":\n            handleGetState(sendResponse);\n            return true;\n        case \"exportBookmarks\":\n            handleExportBookmarks(request.bookmarks, request.options, sendResponse);\n            return true;\n        case \"clearCache\":\n            handleClearCache(sendResponse);\n            return true;\n    }\n});\nconst handleStartExtraction = async (sendResponse, options = {}) => {\n    try {\n        await serviceWorker.initialize();\n        const isLoggedIn = await serviceWorker.checkXLoginStatus();\n        if (isLoggedIn) {\n            // Update extraction options\n            extractionState.isBackground = options.isBackground || false;\n            await extractAllBookmarks();\n            sendResponse({ success: true, status: \"started\" });\n        }\n        else {\n            sendResponse({ success: false, error: \"X.com login required\" });\n        }\n    }\n    catch (error) {\n        console.error('Error starting extraction:', error);\n        sendResponse({ success: false, error: error.message });\n    }\n};\nconst handleSearchBookmarks = async (query, sendResponse) => {\n    try {\n        console.log(`🔍 Service Worker search request:`, query);\n        await serviceWorker.initialize();\n        console.log(`🔍 Search engine available:`, !!serviceWorker.searchEngine);\n        if (serviceWorker.searchEngine) {\n            console.log(`🔍 Using search engine for query:`, query);\n            const result = await serviceWorker.searchEngine.search(query);\n            console.log(`🔍 Search result:`, result);\n            sendResponse({ success: true, result });\n        }\n        else {\n            // Fallback to chrome.storage.local search for testing\n            console.log('🔍 Using fallback search (testing mode)');\n            const result = await chrome.storage.local.get(null);\n            const bookmarks = Object.keys(result || {})\n                .filter(key => key.startsWith('bookmark_'))\n                .map(key => result[key])\n                .filter(bookmark => {\n                if (query.text) {\n                    return bookmark.text.toLowerCase().includes(query.text.toLowerCase());\n                }\n                if (query.tags && query.tags.length > 0) {\n                    return query.tags.some(tag => bookmark.tags.includes(tag));\n                }\n                return true;\n            })\n                .slice(0, query.limit || Limits.defaultQueryLimit);\n            console.log(`🔍 Fallback search found ${bookmarks.length} bookmarks`);\n            sendResponse({ success: true, result: { results: bookmarks, totalFound: bookmarks.length } });\n        }\n    }\n    catch (error) {\n        console.error('Search error:', error);\n        sendResponse({ success: false, error: error.message });\n    }\n};\nconst handleSearchAuthors = async (query, limit, sendResponse) => {\n    try {\n        console.log(`👥 Service Worker author search request: \"${query}\", limit: ${limit}`);\n        await serviceWorker.initialize();\n        if (serviceWorker.searchEngine) {\n            console.log(`👥 Using search engine for author search`);\n            const authors = await serviceWorker.searchEngine.searchAuthors(query || '', limit || 10);\n            console.log(`👥 Found ${authors.length} authors`);\n            sendResponse({ success: true, authors });\n        }\n        else {\n            console.log('👥 Search engine not available for author search');\n            sendResponse({ success: false, error: 'Search engine not available' });\n        }\n    }\n    catch (error) {\n        console.error('👥 Author search error:', error);\n        sendResponse({ success: false, error: error.message });\n    }\n};\nconst handleSaveBookmark = async (bookmark, sendResponse) => {\n    try {\n        console.log('📝 Attempting to save bookmark:', { id: bookmark.id, text: bookmark.text?.substring(0, 50) });\n        const result = await saveBookmarkToLocal(bookmark, bookmark.tags);\n        if (result.success) {\n            console.log('✅ Bookmark saved successfully:', result.data?.id);\n            sendResponse({ success: true, bookmark: result.data });\n        }\n        else {\n            console.error('❌ Bookmark save failed:', result.error);\n            sendResponse({\n                success: false,\n                error: result.error || 'Unknown database error',\n                details: result.details || 'Database operation failed without details'\n            });\n        }\n    }\n    catch (error) {\n        console.error('❌ Save bookmark error:', error);\n        sendResponse({\n            success: false,\n            error: error.message || 'Unknown error',\n            details: error.stack || 'No error stack available'\n        });\n    }\n};\nconst handleGetState = async (sendResponse) => {\n    try {\n        await serviceWorker.initialize();\n        sendResponse({\n            success: true,\n            state: {\n                isRunning: isExtracting,\n                nextRun: lastSyncTimestamp ? new Date(lastSyncTimestamp + (currentScheduleInterval * 60 * 1000)).toISOString() : null,\n                error: null,\n                phase: extractionState.phase,\n                bookmarkCount: extractionState.bookmarkCount,\n                percentage: extractionState.percentage\n            }\n        });\n    }\n    catch (error) {\n        console.error('Error getting state:', error);\n        sendResponse({\n            success: false,\n            error: error.message\n        });\n    }\n};\nconst handleGetStats = async (sendResponse) => {\n    try {\n        await serviceWorker.initialize();\n        if (serviceWorker.db && serviceWorker.searchEngine) {\n            // Get statistics from IndexedDB\n            const stats = await serviceWorker.db.getStats();\n            const searchStats = serviceWorker.searchEngine.getCacheStats();\n            sendResponse({\n                success: true,\n                stats: {\n                    totalBookmarks: stats.data?.totalBookmarks || 0,\n                    totalTags: stats.data?.uniqueTags || 0,\n                    storageUsed: stats.data?.storageSize || 0,\n                    searchCache: searchStats,\n                    lastSync: lastSyncTimestamp,\n                    syncMode: isDeltaSync ? 'delta' : 'full'\n                }\n            });\n        }\n        else {\n            // Fallback to chrome.storage.local stats for testing\n            console.log('📊 Using fallback stats (testing mode)');\n            const result = await chrome.storage.local.get(null);\n            const bookmarkCount = Object.keys(result).filter(key => key.startsWith('bookmark_')).length;\n            sendResponse({\n                success: true,\n                stats: {\n                    totalBookmarks: bookmarkCount,\n                    totalTags: 0,\n                    storageUsed: 0,\n                    searchCache: { size: 0, hits: 0, misses: 0 },\n                    lastSync: lastSyncTimestamp,\n                    syncMode: isDeltaSync ? 'delta' : 'full'\n                }\n            });\n        }\n    }\n    catch (error) {\n        console.error('Get stats error:', error);\n        sendResponse({ success: false, error: error.message });\n    }\n};\nconst handleExportBookmarks = async (bookmarks, options, sendResponse) => {\n    try {\n        console.log('📤 Handling export request:', { format: options.format, bookmarkCount: bookmarks.length });\n        // Safely sanitize bookmarks to prevent circular references\n        const sanitizedBookmarks = sanitizeBookmarks(bookmarks);\n        console.log('📤 [SW] Bookmarks sanitized successfully');\n        // Use inline export functionality to avoid any external dependencies\n        console.log('📤 [SW] Using inline export functionality...');\n        const exportManager = new InlineExportManager();\n        console.log('📤 [SW] InlineExportManager instantiated successfully');\n        // Perform export with sanitized bookmarks\n        const result = await exportManager.exportBookmarks(sanitizedBookmarks, options);\n        if (result.success) {\n            // Convert blob to base64 for transmission using chunked approach\n            const blob = result.data;\n            const arrayBuffer = await blob.arrayBuffer();\n            // Use chunked approach for large files to prevent stack overflow\n            const base64 = arrayBufferToBase64(arrayBuffer);\n            sendResponse({\n                success: true,\n                data: base64,\n                filename: result.filename,\n                size: result.size,\n                metadata: result.metadata\n            });\n        }\n        else {\n            sendResponse({\n                success: false,\n                error: result.error || 'Export failed'\n            });\n        }\n    }\n    catch (error) {\n        console.error('Export error:', error);\n        sendResponse({\n            success: false,\n            error: error.message || 'Export failed'\n        });\n    }\n};\nconst handleClearCache = async (sendResponse) => {\n    try {\n        await serviceWorker.initialize();\n        if (serviceWorker.searchEngine) {\n            serviceWorker.searchEngine.clearCache();\n            console.log('🧹 Search cache cleared via service worker');\n            sendResponse({ success: true, message: 'Cache cleared successfully' });\n        }\n        else {\n            sendResponse({ success: false, error: 'Search engine not initialized' });\n        }\n    }\n    catch (error) {\n        console.error('Error clearing cache:', error);\n        sendResponse({ success: false, error: error.message });\n    }\n};\n// ===============================\n// UTILITY FUNCTIONS (Keep + enhance)\n// ===============================\n// Safe bookmarks sanitization to prevent circular references\nconst sanitizeBookmarks = (bookmarks) => {\n    try {\n        return bookmarks.map(bookmark => ({\n            id: bookmark.id,\n            text: bookmark.text,\n            author: bookmark.author,\n            created_at: bookmark.created_at,\n            bookmarked_at: bookmark.bookmarked_at,\n            tags: Array.isArray(bookmark.tags) ? bookmark.tags : [],\n            url: bookmark.url,\n            // Only include safe, serializable properties\n            // Exclude any properties that might contain circular references\n        }));\n    }\n    catch (error) {\n        console.error('❌ [SW] Bookmark sanitization failed:', error);\n        // Return empty array as fallback\n        return [];\n    }\n};\n// Safe array buffer to base64 conversion to prevent stack overflow\nconst arrayBufferToBase64 = (buffer) => {\n    try {\n        const bytes = new Uint8Array(buffer);\n        const chunkSize = 8192; // Process in 8KB chunks\n        let binary = '';\n        for (let i = 0; i < bytes.length; i += chunkSize) {\n            const chunk = bytes.slice(i, i + chunkSize);\n            binary += String.fromCharCode.apply(null, chunk);\n        }\n        return btoa(binary);\n    }\n    catch (error) {\n        console.error('❌ [SW] Array buffer to base64 conversion failed:', error);\n        // Return empty string as fallback\n        return '';\n    }\n};\nconst tokenizeText = (text) => {\n    if (!text)\n        return [];\n    return text\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, ' ')\n        .split(/\\s+/)\n        .filter(token => token.length >= 3)\n        .slice(0, 10);\n};\nconst updateExtractionState = (updates) => {\n    extractionState = { ...extractionState, ...updates };\n    console.log(`📊 State updated:`, extractionState);\n    broadcastStateUpdate();\n};\nconst broadcastStateUpdate = () => {\n    const stateMessage = {\n        action: \"stateUpdate\",\n        extractionState: extractionState,\n        isExtracting: isExtracting\n    };\n    // Notify content scripts\n    chrome.tabs.query({ url: \"https://x.com/*\" }, (tabs) => {\n        tabs.forEach(tab => {\n            notifyContentScript(tab.id, stateMessage).catch(() => { });\n        });\n    });\n    // Notify popup\n    notifyPopup(stateMessage);\n};\n// ===============================\n// INITIALIZATION\n// ===============================\nconst serviceWorker = new ExtensionServiceWorker();\n// Set up context menu for easy debug access\nchrome.runtime.onInstalled.addListener(() => {\n    // Create context menu item for debug page\n    chrome.contextMenus.create({\n        id: 'openDebugPage',\n        title: '🔧 Open Debug Page',\n        contexts: ['action'] // Only show when right-clicking extension icon\n    });\n    console.log('🚀 Extension installed - initializing service worker');\n    serviceWorker.initialize();\n});\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n    if (info.menuItemId === 'openDebugPage') {\n        // Open debug page in new tab\n        chrome.tabs.create({\n            url: chrome.runtime.getURL('src/ui/debug.html')\n        });\n    }\n});\n// Initialize on startup\nchrome.runtime.onStartup.addListener(() => {\n    console.log('🚀 Extension startup - initializing service worker');\n    serviceWorker.initialize();\n});\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('🚀 Extension installed - initializing service worker');\n    serviceWorker.initialize();\n});\n// Keep existing alarm and activity tracking\n// (Additional existing background.js logic will be adapted in subsequent files)\n// User activity tracking (keep from background.js)\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === 'complete' && tab.url && tab.url.includes('x.com')) {\n        lastUserActivity = Date.now();\n        console.log('👤 User activity detected on X.com');\n        // Update schedule interval based on activity\n        serviceWorker.updateScheduleInterval();\n    }\n});\nchrome.tabs.onActivated.addListener((activeInfo) => {\n    chrome.tabs.get(activeInfo.tabId, (tab) => {\n        if (tab.url && tab.url.includes('x.com')) {\n            lastUserActivity = Date.now();\n            serviceWorker.updateScheduleInterval();\n        }\n    });\n});\nconsole.log('📡 Enhanced Service Worker loaded - ready for initialization');\n// Inline Export Manager - No external dependencies\nclass InlineExportManager {\n    constructor() {\n        // No dependencies, no DOM APIs\n    }\n    async exportBookmarks(bookmarks, options) {\n        try {\n            console.log(`📤 [SW] Starting inline export: ${options.format} format for ${bookmarks.length} bookmarks`);\n            const metadata = {\n                totalBookmarks: bookmarks.length,\n                exportDate: new Date().toISOString(),\n                filters: options.filters || {}\n            };\n            let result;\n            switch (options.format) {\n                case 'csv':\n                    result = await this.generateCSV(bookmarks, options);\n                    break;\n                case 'json':\n                    result = await this.generateJSON(bookmarks, options);\n                    break;\n                case 'pdf':\n                    result = await this.generatePDF(bookmarks, options);\n                    break;\n                default:\n                    throw new Error(`Unsupported export format: ${options.format}`);\n            }\n            result.metadata = metadata;\n            result.filename = options.filename || this.generateFilename(options.format, metadata);\n            console.log(`✅ [SW] Inline export completed: ${result.filename} (${bookmarks.length} bookmarks)`);\n            return result;\n        }\n        catch (error) {\n            console.error('❌ [SW] Inline export failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown export error',\n                filename: options.filename || `export-${Date.now()}.${options.format}`\n            };\n        }\n    }\n    async generateCSV(bookmarks, options) {\n        try {\n            console.log(`📊 [SW] Generating CSV for ${bookmarks.length} bookmarks`);\n            const headers = [\n                'id', 'text', 'author', 'created_at', 'bookmarked_at',\n                'tags', 'url'\n            ];\n            const rows = bookmarks.map(bookmark => [\n                bookmark.id || '',\n                this.escapeCsvField(bookmark.text || ''),\n                bookmark.author || '',\n                bookmark.created_at || '',\n                bookmark.bookmarked_at || '',\n                (bookmark.tags || []).join(', '),\n                bookmark.url || ''\n            ]);\n            const csvContent = [headers.join(','), ...rows.map(row => row.join(','))].join('\\n');\n            const blob = new Blob([csvContent], { type: 'text/csv' });\n            return {\n                success: true,\n                data: blob,\n                filename: options.filename || `bookmarks-${Date.now()}.csv`,\n                size: blob.size\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'CSV generation failed',\n                filename: options.filename || `bookmarks-${Date.now()}.csv`\n            };\n        }\n    }\n    async generateJSON(bookmarks, options) {\n        try {\n            console.log(`📄 [SW] Generating JSON for ${bookmarks.length} bookmarks`);\n            const data = {\n                metadata: {\n                    totalBookmarks: bookmarks.length,\n                    exportDate: new Date().toISOString(),\n                    format: 'json',\n                    filters: options.filters || {}\n                },\n                bookmarks: bookmarks.map(bookmark => ({\n                    id: bookmark.id,\n                    text: bookmark.text,\n                    author: bookmark.author,\n                    created_at: bookmark.created_at,\n                    bookmarked_at: bookmark.bookmarked_at,\n                    tags: bookmark.tags || [],\n                    url: bookmark.url\n                }))\n            };\n            // Safely stringify with circular reference protection\n            const jsonContent = this.safeJSONStringify(data);\n            const blob = new Blob([jsonContent], { type: 'application/json' });\n            return {\n                success: true,\n                data: blob,\n                filename: options.filename || `bookmarks-${Date.now()}.json`,\n                size: blob.size\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'JSON generation failed',\n                filename: options.filename || `bookmarks-${Date.now()}.json`\n            };\n        }\n    }\n    async generatePDF(bookmarks, options) {\n        try {\n            console.log(`📄 [SW] Generating PDF for ${bookmarks.length} bookmarks`);\n            // Limit bookmarks for PDF to prevent hanging\n            const limitedBookmarks = bookmarks.slice(0, Limits.maxBookmarksForExport);\n            if (bookmarks.length > Limits.maxBookmarksForExport) {\n                console.warn(`⚠️ [SW] PDF export limited to ${Limits.maxBookmarksForExport} bookmarks (requested: ${bookmarks.length})`);\n            }\n            // Generate PDF content using a simple text-based format\n            // This creates a PDF-like structure that can be opened by PDF viewers\n            const pdfContent = this.generatePDFContent(limitedBookmarks, bookmarks.length > Limits.maxBookmarksForExport);\n            const blob = new Blob([pdfContent], { type: 'application/pdf' });\n            return {\n                success: true,\n                data: blob,\n                filename: options.filename || `bookmarks-${Date.now()}.pdf`,\n                size: blob.size,\n                metadata: {\n                    originalCount: bookmarks.length,\n                    exportedCount: limitedBookmarks.length,\n                    limited: bookmarks.length > maxBookmarksForPDF\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'PDF generation failed',\n                filename: options.filename || `bookmarks-${Date.now()}.pdf`\n            };\n        }\n    }\n    generatePDFContent(bookmarks, wasLimited) {\n        // Create a simple PDF-like structure\n        // This is a basic approach - for production, consider using a PDF library\n        const header = `%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Contents 4 0 R\n>>\nendobj\n\n4 0 obj\n<<\n/Length 5 0 R\n>>\nstream\nBT\n/F1 12 Tf\n72 720 Td\n(XSaved Bookmarks Export) Tj\n0 -20 Td\n(Exported on: ${new Date().toLocaleString()}) Tj\n0 -20 Td\n(Total bookmarks: ${bookmarks.length}${wasLimited ? ' (limited)' : ''}) Tj\n0 -40 Td`;\n        const content = bookmarks.map((bookmark, index) => {\n            const text = this.escapePDFText(bookmark.text || '');\n            const author = bookmark.author || 'Unknown';\n            const date = bookmark.created_at || 'Unknown';\n            const tags = (bookmark.tags || []).join(', ') || 'None';\n            return `(${index + 1}. ${text}) Tj\n0 -15 Td\n(By: ${author} | Created: ${date} | Tags: ${tags}) Tj\n0 -20 Td`;\n        }).join('\\n');\n        const contentLength = header.length + content.length;\n        const footer = `\nET\nendstream\nendobj\n\n5 0 obj\n${contentLength + 100}\nendobj\n\nxref\n0 6\n0000000000 65535 f \n0000000009 00000 n \n0000000058 00000 n \n0000000115 00000 n \n0000000204 00000 n \n0000000${(contentLength + 100).toString().padStart(10, '0')} 00000 n \ntrailer\n<<\n/Size 6\n/Root 1 0 R\n>>\nstartxref\n${contentLength + 300}\n%%EOF`;\n        return header + content + footer;\n    }\n    escapePDFText(text) {\n        // Escape special characters for PDF\n        return text\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\(/g, '\\\\(')\n            .replace(/\\)/g, '\\\\)')\n            .replace(/\\n/g, ' ')\n            .substring(0, 100); // Limit text length\n    }\n    escapeCsvField(field) {\n        if (!field)\n            return '';\n        const cleanField = field.replace(/[\\r\\n]/g, ' ');\n        if (cleanField.includes(',') || cleanField.includes('\"') || cleanField.includes('\\n')) {\n            return `\"${cleanField.replace(/\"/g, '\"\"')}\"`;\n        }\n        return cleanField;\n    }\n    escapeHTML(text) {\n        return text\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#039;');\n    }\n    generateFilename(format, metadata) {\n        const date = new Date().toISOString().split('T')[0];\n        const count = metadata.totalBookmarks;\n        let baseName = `xsaved-bookmarks-${date}-${count}`;\n        if (metadata.filters.tags?.length) {\n            baseName += `-${metadata.filters.tags.join('-')}`;\n        }\n        if (metadata.filters.author) {\n            baseName += `-${metadata.filters.author}`;\n        }\n        return `${baseName}.${format}`;\n    }\n    validateOptions(options) {\n        const errors = [];\n        if (!options.format) {\n            errors.push('Export format is required');\n        }\n        if (!['csv', 'pdf', 'json'].includes(options.format)) {\n            errors.push(`Unsupported format: ${options.format}`);\n        }\n        if (options.filters?.dateFrom && options.filters?.dateTo) {\n            const fromDate = new Date(options.filters.dateFrom);\n            const toDate = new Date(options.filters.dateTo);\n            if (fromDate > toDate) {\n                errors.push('Date range is invalid: from date must be before to date');\n            }\n        }\n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    // Safe JSON stringify with circular reference protection\n    safeJSONStringify(obj) {\n        try {\n            const seen = new WeakSet();\n            return JSON.stringify(obj, (key, value) => {\n                if (typeof value === 'object' && value !== null) {\n                    if (seen.has(value)) {\n                        return '[Circular Reference]';\n                    }\n                    seen.add(value);\n                }\n                return value;\n            }, 2);\n        }\n        catch (error) {\n            return JSON.stringify({ error: 'Object could not be stringified due to circular references' });\n        }\n    }\n}\n// Export for testing in Service Worker environment\nif (typeof self !== 'undefined') {\n    self.testXSaved = {\n        extractionState,\n        serviceWorker,\n        verifyDatabase: async () => {\n            if (serviceWorker.db) {\n                await serviceWorker.db.verifyDatabase();\n            }\n            else {\n                console.error('❌ Database not initialized');\n            }\n        },\n        getStats: async () => {\n            if (serviceWorker.db) {\n                const stats = await serviceWorker.db.getStats();\n                console.log('📊 Database stats:', stats);\n                return stats;\n            }\n            else {\n                console.error('❌ Database not initialized');\n            }\n        },\n        // REMOVED: Unnecessary date normalization function\n        // === COMPREHENSIVE IndexedDB DEBUGGING ===\n        inspectDB: async () => {\n            console.log('🔍 === IndexedDB Inspection ===');\n            if (!serviceWorker.db) {\n                console.error('❌ Database not initialized');\n                return;\n            }\n            try {\n                // Database info\n                console.log('📊 Database Info:', {\n                    name: serviceWorker.db.db?.name,\n                    version: serviceWorker.db.db?.version,\n                    initialized: serviceWorker.db.isInitialized,\n                    objectStores: serviceWorker.db.db ? Array.from(serviceWorker.db.db.objectStoreNames) : 'N/A'\n                });\n                // Test connection\n                const testResult = await serviceWorker.db.getStats();\n                console.log('✅ Database connection: OK');\n                console.log('📈 Current stats:', testResult);\n            }\n            catch (error) {\n                console.error('❌ Database inspection failed:', error);\n            }\n        },\n        listBookmarks: async (limit = Limits.defaultQueryLimit) => {\n            console.log(`🔍 === Last ${limit} Bookmarks ===`);\n            if (!serviceWorker.db) {\n                console.error('❌ Database not initialized');\n                return;\n            }\n            try {\n                const result = await serviceWorker.db.getAllBookmarks({ limit, sortBy: 'created_at', sortOrder: 'desc' });\n                if (result.success) {\n                    console.table(result.data?.map(b => ({\n                        id: b.id,\n                        text: b.text.substring(0, 50) + '...',\n                        author: b.author,\n                        created_at: b.created_at,\n                        tags: b.tags?.join(', ') || 'none'\n                    })));\n                    return result.data;\n                }\n                else {\n                    console.error('❌ Failed to list bookmarks:', result.error);\n                }\n            }\n            catch (error) {\n                console.error('❌ List bookmarks error:', error);\n            }\n        },\n        testBookmarkCRUD: async () => {\n            console.log('🧪 === Testing Bookmark CRUD Operations ===');\n            if (!serviceWorker.db) {\n                console.error('❌ Database not initialized');\n                return;\n            }\n            const testBookmark = {\n                id: 'test_crud_' + Date.now(),\n                text: 'Test bookmark for CRUD operations',\n                author: 'test_user',\n                created_at: new Date().toISOString(),\n                bookmarked_at: new Date().toISOString(),\n                tags: ['test', 'crud'],\n                media_urls: [],\n                textTokens: ['test', 'bookmark', 'crud', 'operations']\n            };\n            try {\n                // CREATE\n                console.log('📝 Testing CREATE...');\n                const addResult = await serviceWorker.db.addBookmark(testBookmark);\n                if (!addResult.success) {\n                    console.error('❌ CREATE failed:', addResult.error);\n                    return false;\n                }\n                console.log('✅ CREATE: Success');\n                // READ\n                console.log('📖 Testing READ...');\n                const getResult = await serviceWorker.db.getBookmark(testBookmark.id);\n                if (!getResult.success || !getResult.data) {\n                    console.error('❌ READ failed:', getResult.error);\n                    return false;\n                }\n                console.log('✅ READ: Success');\n                // UPDATE\n                console.log('✏️ Testing UPDATE...');\n                const updatedBookmark = { ...testBookmark, text: 'Updated test bookmark' };\n                const updateResult = await serviceWorker.db.updateBookmark(testBookmark.id, updatedBookmark);\n                if (!updateResult.success) {\n                    console.error('❌ UPDATE failed:', updateResult.error);\n                    return false;\n                }\n                console.log('✅ UPDATE: Success');\n                // DELETE\n                console.log('🗑️ Testing DELETE...');\n                const deleteResult = await serviceWorker.db.deleteBookmark(testBookmark.id);\n                if (!deleteResult.success) {\n                    console.error('❌ DELETE failed:', deleteResult.error);\n                    return false;\n                }\n                console.log('✅ DELETE: Success');\n                console.log('🎉 All CRUD operations passed!');\n                return true;\n            }\n            catch (error) {\n                console.error('❌ CRUD test failed with exception:', error);\n                return false;\n            }\n        },\n        checkIndexes: async () => {\n            console.log('🔍 === Checking IndexedDB Indexes ===');\n            if (!serviceWorker.db?.db) {\n                console.error('❌ Database not available');\n                return;\n            }\n            try {\n                const db = serviceWorker.db.db;\n                const storeNames = Array.from(db.objectStoreNames);\n                for (const storeName of storeNames) {\n                    console.log(`📦 Store: ${storeName}`);\n                    // Create a read transaction to inspect the store\n                    const transaction = db.transaction(storeName, 'readonly');\n                    const store = transaction.objectStore(storeName);\n                    console.log(`  📋 Key path: ${store.keyPath}`);\n                    console.log(`  🔢 Auto increment: ${store.autoIncrement}`);\n                    const indexNames = Array.from(store.indexNames);\n                    console.log(`  📚 Indexes (${indexNames.length}):`);\n                    for (const indexName of indexNames) {\n                        const index = store.index(indexName);\n                        console.log(`    - ${indexName}: keyPath=${index.keyPath}, unique=${index.unique}, multiEntry=${index.multiEntry}`);\n                    }\n                }\n            }\n            catch (error) {\n                console.error('❌ Index check failed:', error);\n            }\n        },\n        clearDB: async () => {\n            console.log('🗑️ === CLEARING ALL DATA ===');\n            if (!serviceWorker.db) {\n                console.error('❌ Database not initialized');\n                return;\n            }\n            const confirmed = confirm('⚠️ This will delete ALL bookmarks. Are you sure?');\n            if (!confirmed) {\n                console.log('❌ Operation cancelled');\n                return;\n            }\n            try {\n                const result = await serviceWorker.db.clearAllBookmarks();\n                if (result.success) {\n                    console.log('✅ Database cleared successfully');\n                }\n                else {\n                    console.error('❌ Failed to clear database:', result.error);\n                }\n            }\n            catch (error) {\n                console.error('❌ Clear database error:', error);\n            }\n        },\n        forceReinit: async () => {\n            console.log('🔄 === FORCING DATABASE REINITIALIZATION ===');\n            try {\n                serviceWorker.initialized = false;\n                serviceWorker.db = null;\n                await serviceWorker.initialize();\n                console.log('✅ Database reinitialized successfully');\n            }\n            catch (error) {\n                console.error('❌ Reinitialization failed:', error);\n            }\n        },\n        //\n        // ===== DEVELOPMENT TAG FUNCTIONS =====\n        addRandomTags: async (minTags = 2, maxTags = 4, preserveExisting = true, onlyUntagged = true) => {\n            const CONTENT_TAGS = ['Tech', 'AI', 'Programming', 'Design', 'Music', 'Gaming', 'News', 'Sports', 'Entertainment', 'Science', 'Business', 'Finance', 'Health', 'Travel', 'Food', 'Fashion', 'Art', 'Education', 'Politics', 'Environment'];\n            try {\n                console.log('🏷️ Starting random tag addition process...');\n                await serviceWorker.initialize();\n                if (!serviceWorker.db) {\n                    console.error('❌ Database not initialized');\n                    return { success: false, error: 'Database not initialized' };\n                }\n                const result = await serviceWorker.db.getAllBookmarks({ limit: Limits.maxQueryLimit });\n                if (!result.success || !result.data) {\n                    console.error('❌ Failed to fetch bookmarks:', result.error);\n                    return { success: false, error: result.error };\n                }\n                const allBookmarks = result.data;\n                console.log(`📊 Found ${allBookmarks.length} total bookmarks`);\n                const bookmarksToUpdate = onlyUntagged\n                    ? allBookmarks.filter(bookmark => !bookmark.tags || bookmark.tags.length === 0)\n                    : allBookmarks;\n                console.log(`🎯 Will update ${bookmarksToUpdate.length} bookmarks`);\n                if (bookmarksToUpdate.length === 0) {\n                    console.log('✅ All bookmarks already have tags');\n                    return { success: true, updated: 0, message: 'All bookmarks already tagged' };\n                }\n                const tagUsageStats = {};\n                let updateCount = 0;\n                for (const bookmark of bookmarksToUpdate) {\n                    const numNewTags = Math.floor(Math.random() * (maxTags - minTags + 1)) + minTags;\n                    const selectedTags = [];\n                    const availableForSelection = [...CONTENT_TAGS];\n                    for (let i = 0; i < numNewTags && availableForSelection.length > 0; i++) {\n                        const randomIndex = Math.floor(Math.random() * availableForSelection.length);\n                        const selectedTag = availableForSelection.splice(randomIndex, 1)[0];\n                        selectedTags.push(selectedTag);\n                        tagUsageStats[selectedTag] = (tagUsageStats[selectedTag] || 0) + 1;\n                    }\n                    let finalTags = selectedTags;\n                    if (preserveExisting && bookmark.tags && bookmark.tags.length > 0) {\n                        finalTags = [...new Set([...bookmark.tags, ...selectedTags])];\n                    }\n                    const updateResult = await serviceWorker.db.updateBookmark(bookmark.id, { tags: finalTags });\n                    if (updateResult.success) {\n                        updateCount++;\n                        if (updateCount <= 5 || updateCount % 20 === 0) {\n                            console.log(`🏷️ [${updateCount}/${bookmarksToUpdate.length}] Added [${selectedTags.join(', ')}] to: \"${bookmark.text?.substring(0, 50)}...\"`);\n                        }\n                    }\n                }\n                console.log('🎉 Random tag addition completed!');\n                console.log(`✅ Updated ${updateCount}/${bookmarksToUpdate.length} bookmarks`);\n                console.log(`📊 Tag usage statistics:`, tagUsageStats);\n                return { success: true, updated: updateCount, tagStats: tagUsageStats, totalBookmarks: allBookmarks.length };\n            }\n            catch (error) {\n                console.error('❌ Error adding random tags:', error);\n                return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n            }\n        },\n        getTagStats: async () => {\n            try {\n                await serviceWorker.initialize();\n                if (!serviceWorker.db) {\n                    console.error('❌ Database not initialized');\n                    return { success: false, error: 'Database not initialized' };\n                }\n                const result = await serviceWorker.db.getAllBookmarks({ limit: Limits.maxQueryLimit });\n                if (!result.success || !result.data) {\n                    return { success: false, error: result.error };\n                }\n                const bookmarks = result.data;\n                const tagCounts = {};\n                let taggedCount = 0;\n                bookmarks.forEach(bookmark => {\n                    if (bookmark.tags && bookmark.tags.length > 0) {\n                        taggedCount++;\n                        bookmark.tags.forEach(tag => {\n                            tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n                        });\n                    }\n                });\n                const stats = {\n                    totalBookmarks: bookmarks.length,\n                    taggedBookmarks: taggedCount,\n                    untaggedBookmarks: bookmarks.length - taggedCount,\n                    taggedPercentage: Math.round((taggedCount / bookmarks.length) * 100),\n                    uniqueTags: Object.keys(tagCounts).length,\n                    tagDistribution: Object.entries(tagCounts)\n                        .sort(([, a], [, b]) => b - a)\n                        .reduce((obj, [tag, count]) => ({ ...obj, [tag]: count }), {})\n                };\n                console.log('📊 === TAG STATISTICS ===');\n                console.log(`Total bookmarks: ${stats.totalBookmarks}`);\n                console.log(`Tagged bookmarks: ${stats.taggedBookmarks} (${stats.taggedPercentage}%)`);\n                console.log(`Untagged bookmarks: ${stats.untaggedBookmarks}`);\n                console.log(`Unique tags: ${stats.uniqueTags}`);\n                console.log('Top 10 tags:', Object.entries(stats.tagDistribution).slice(0, 10));\n                return { success: true, stats };\n            }\n            catch (error) {\n                console.error('❌ Error getting tag statistics:', error);\n                return { success: false, error: error.message };\n            }\n        },\n        // Convenience shortcuts\n        addRandomTagsQuick: () => self.testXSaved.addRandomTags(1, 3, true, true),\n        addRandomTagsExtensive: () => self.testXSaved.addRandomTags(3, 5, true, true),\n        // ===============================\n        // DATE DEBUG FUNCTIONS\n        // ===============================\n        /**\n         * Debug bookmark dates - shows raw data and parsed dates\n         */\n        async debugBookmarkDates() {\n            try {\n                console.log('🔍 DEBUG: Analyzing bookmark dates...\\n');\n                const result = await db.searchBookmarks({ limit: Limits.defaultQueryLimit, sortBy: 'created_at', sortOrder: 'asc' });\n                if (!result.success || !result.data || result.data.length === 0) {\n                    console.log('❌ No bookmarks found or error occurred');\n                    return;\n                }\n                console.log(`📊 Analyzing ${result.data.length} bookmarks:\\n`);\n                result.data.forEach((bookmark, index) => {\n                    console.log(`--- Bookmark ${index + 1}: ${bookmark.id} ---`);\n                    console.log(`Raw created_at: \"${bookmark.created_at}\"`);\n                    console.log(`Raw bookmarked_at: \"${bookmark.bookmarked_at}\"`);\n                    console.log(`Raw sortIndex: \"${bookmark.sortIndex || 'N/A'}\"`);\n                    const createdDate = new Date(bookmark.created_at);\n                    const bookmarkedDate = new Date(bookmark.bookmarked_at);\n                    console.log(`Parsed created_at: ${createdDate.toISOString()} (${createdDate.getFullYear()})`);\n                    console.log(`Parsed bookmarked_at: ${bookmarkedDate.toISOString()} (${bookmarkedDate.getFullYear()})`);\n                    if (bookmark.sortIndex) {\n                        try {\n                            const sortIndexDate = getSortIndexDate(bookmark.sortIndex);\n                            console.log(`SortIndex parsed: ${sortIndexDate.toISOString()} (${sortIndexDate.getFullYear()})`);\n                        }\n                        catch (error) {\n                            console.log(`❌ SortIndex parse error: ${error.message}`);\n                        }\n                    }\n                    console.log(`Author: ${bookmark.author}`);\n                    console.log(`Text preview: \"${bookmark.text.substring(0, 50)}...\"`);\n                    console.log(''); // Empty line for readability\n                });\n            }\n            catch (error) {\n                console.error('❌ Debug function failed:', error);\n            }\n        },\n        /**\n         * Validate date consistency across all bookmarks\n         */\n        async validateDateConsistency() {\n            try {\n                console.log('🔍 VALIDATION: Checking date consistency...\\n');\n                const result = await db.searchBookmarks({ limit: Limits.maxQueryLimit, sortBy: 'created_at', sortOrder: 'asc' });\n                if (!result.success || !result.data) {\n                    console.log('❌ Failed to fetch bookmarks for validation');\n                    return;\n                }\n                let issues = {\n                    invalidCreatedAt: 0,\n                    invalidBookmarkedAt: 0,\n                    futureCreatedAt: 0,\n                    futureBookmarkedAt: 0,\n                    epochDates: 0,\n                    inconsistentOrder: 0\n                };\n                const now = new Date();\n                const twitterLaunch = new Date('2006-03-21'); // Twitter launch date\n                console.log(`📊 Validating ${result.data.length} bookmarks...\\n`);\n                result.data.forEach((bookmark, index) => {\n                    const createdDate = new Date(bookmark.created_at);\n                    const bookmarkedDate = new Date(bookmark.bookmarked_at);\n                    // Check for invalid dates\n                    if (isNaN(createdDate.getTime())) {\n                        issues.invalidCreatedAt++;\n                        console.log(`❌ Invalid created_at: ${bookmark.id} - \"${bookmark.created_at}\"`);\n                    }\n                    if (isNaN(bookmarkedDate.getTime())) {\n                        issues.invalidBookmarkedAt++;\n                        console.log(`❌ Invalid bookmarked_at: ${bookmark.id} - \"${bookmark.bookmarked_at}\"`);\n                    }\n                    // Check for future dates\n                    if (createdDate > now) {\n                        issues.futureCreatedAt++;\n                        console.log(`⚠️ Future created_at: ${bookmark.id} - ${createdDate.toISOString()}`);\n                    }\n                    if (bookmarkedDate > now) {\n                        issues.futureBookmarkedAt++;\n                        console.log(`⚠️ Future bookmarked_at: ${bookmark.id} - ${bookmarkedDate.toISOString()}`);\n                    }\n                    // Check for epoch dates (Jan 1, 1970)\n                    if (createdDate.getTime() < twitterLaunch.getTime()) {\n                        issues.epochDates++;\n                        console.log(`⚠️ Pre-Twitter date: ${bookmark.id} - ${createdDate.toISOString()}`);\n                    }\n                    // Check for order consistency (created should generally be <= bookmarked)\n                    if (createdDate > bookmarkedDate) {\n                        issues.inconsistentOrder++;\n                        console.log(`⚠️ Created after bookmarked: ${bookmark.id} - created: ${createdDate.toISOString()}, bookmarked: ${bookmarkedDate.toISOString()}`);\n                    }\n                });\n                console.log('\\n📋 VALIDATION SUMMARY:');\n                console.log(`✅ Total bookmarks checked: ${result.data.length}`);\n                console.log(`❌ Invalid created_at dates: ${issues.invalidCreatedAt}`);\n                console.log(`❌ Invalid bookmarked_at dates: ${issues.invalidBookmarkedAt}`);\n                console.log(`⚠️ Future created_at dates: ${issues.futureCreatedAt}`);\n                console.log(`⚠️ Future bookmarked_at dates: ${issues.futureBookmarkedAt}`);\n                console.log(`⚠️ Pre-Twitter epoch dates: ${issues.epochDates}`);\n                console.log(`⚠️ Inconsistent date order: ${issues.inconsistentOrder}`);\n                const totalIssues = Object.values(issues).reduce((sum, count) => sum + count, 0);\n                if (totalIssues === 0) {\n                    console.log('\\n🎉 All dates look good!');\n                }\n                else {\n                    console.log(`\\n⚠️ Found ${totalIssues} potential issues`);\n                }\n            }\n            catch (error) {\n                console.error('❌ Validation failed:', error);\n            }\n        },\n        /**\n         * Get 20 oldest tweets by bookmarked_at date\n         */\n        async getOldestBookmarkedAt() {\n            try {\n                console.log('🔍 OLDEST BY CREATED_AT: Fetching 20 oldest tweets...\\n');\n                const result = await db.searchBookmarks({ limit: Limits.popularTagsLimit, sortBy: 'created_at', sortOrder: 'asc' });\n                if (!result.success || !result.data || result.data.length === 0) {\n                    console.log('❌ No bookmarks found');\n                    return;\n                }\n                console.log(`📊 Found ${result.data.length} oldest bookmarked tweets:\\n`);\n                result.data.forEach((bookmark, index) => {\n                    const bookmarkedDate = new Date(bookmark.bookmarked_at);\n                    const createdDate = new Date(bookmark.created_at);\n                    console.log(`${index + 1}. ${bookmark.id} (@${bookmark.author})`);\n                    console.log(`   Bookmarked: ${bookmarkedDate.toISOString()} (${bookmarkedDate.getFullYear()})`);\n                    console.log(`   Created: ${createdDate.toISOString()} (${createdDate.getFullYear()})`);\n                    console.log(`   Text: \"${bookmark.text.substring(0, 60)}...\"`);\n                    console.log('');\n                });\n            }\n            catch (error) {\n                console.error('❌ Function failed:', error);\n            }\n        },\n        /**\n         * Get 20 newest tweets by bookmarked_at date\n         */\n        async getNewestBookmarkedAt() {\n            try {\n                console.log('🔍 NEWEST BY CREATED_AT: Fetching 20 newest tweets...\\n');\n                const result = await db.searchBookmarks({ limit: Limits.popularTagsLimit, sortBy: 'created_at', sortOrder: 'desc' });\n                if (!result.success || !result.data || result.data.length === 0) {\n                    console.log('❌ No bookmarks found');\n                    return;\n                }\n                console.log(`📊 Found ${result.data.length} newest bookmarked tweets:\\n`);\n                result.data.forEach((bookmark, index) => {\n                    const bookmarkedDate = new Date(bookmark.bookmarked_at);\n                    const createdDate = new Date(bookmark.created_at);\n                    console.log(`${index + 1}. ${bookmark.id} (@${bookmark.author})`);\n                    console.log(`   Bookmarked: ${bookmarkedDate.toISOString()} (${bookmarkedDate.getFullYear()})`);\n                    console.log(`   Created: ${createdDate.toISOString()} (${createdDate.getFullYear()})`);\n                    console.log(`   Text: \"${bookmark.text.substring(0, 60)}...\"`);\n                    console.log('');\n                });\n            }\n            catch (error) {\n                console.error('❌ Function failed:', error);\n            }\n        },\n        /**\n         * Get 20 oldest tweets by created_at date\n         */\n        async getOldestCreatedAt() {\n            try {\n                console.log('🔍 OLDEST BY CREATED_AT: Fetching 20 oldest created tweets...\\n');\n                const result = await db.searchBookmarks({ limit: Limits.popularTagsLimit, sortBy: 'created_at', sortOrder: 'asc' });\n                if (!result.success || !result.data || result.data.length === 0) {\n                    console.log('❌ No bookmarks found');\n                    return;\n                }\n                console.log(`📊 Found ${result.data.length} oldest created tweets:\\n`);\n                result.data.forEach((bookmark, index) => {\n                    const createdDate = new Date(bookmark.created_at);\n                    const bookmarkedDate = new Date(bookmark.bookmarked_at);\n                    console.log(`${index + 1}. ${bookmark.id} (@${bookmark.author})`);\n                    console.log(`   Created: ${createdDate.toISOString()} (${createdDate.getFullYear()})`);\n                    console.log(`   Bookmarked: ${bookmarkedDate.toISOString()} (${bookmarkedDate.getFullYear()})`);\n                    console.log(`   Text: \"${bookmark.text.substring(0, 60)}...\"`);\n                    console.log('');\n                });\n            }\n            catch (error) {\n                console.error('❌ Function failed:', error);\n            }\n        },\n        /**\n         * Get 20 newest tweets by created_at date\n         */\n        async getNewestCreatedAt() {\n            try {\n                console.log('🔍 NEWEST BY CREATED_AT: Fetching 20 newest created tweets...\\n');\n                const result = await db.searchBookmarks({ limit: Limits.popularTagsLimit, sortBy: 'created_at', sortOrder: 'desc' });\n                if (!result.success || !result.data || result.data.length === 0) {\n                    console.log('❌ No bookmarks found');\n                    return;\n                }\n                console.log(`📊 Found ${result.data.length} newest created tweets:\\n`);\n                result.data.forEach((bookmark, index) => {\n                    const createdDate = new Date(bookmark.created_at);\n                    const bookmarkedDate = new Date(bookmark.bookmarked_at);\n                    console.log(`${index + 1}. ${bookmark.id} (@${bookmark.author})`);\n                    console.log(`   Created: ${createdDate.toISOString()} (${createdDate.getFullYear()})`);\n                    console.log(`   Bookmarked: ${bookmarkedDate.toISOString()} (${bookmarkedDate.getFullYear()})`);\n                    console.log(`   Text: \"${bookmark.text.substring(0, 60)}...\"`);\n                    console.log('');\n                });\n            }\n            catch (error) {\n                console.error('❌ Function failed:', error);\n            }\n        }\n    };\n    // Also expose functions globally for direct access\n    self.addRandomTags = self.testXSaved.addRandomTags;\n    self.getTagStats = self.testXSaved.getTagStats;\n    self.debugBookmarkDates = self.testXSaved.debugBookmarkDates;\n    self.validateDateConsistency = self.testXSaved.validateDateConsistency;\n    self.getOldestBookmarkedAt = self.testXSaved.getOldestBookmarkedAt;\n    self.getNewestBookmarkedAt = self.testXSaved.getNewestBookmarkedAt;\n    self.getOldestCreatedAt = self.testXSaved.getOldestCreatedAt;\n    self.getNewestCreatedAt = self.testXSaved.getNewestCreatedAt;\n    console.log('🔧 === XSaved v2 Debug Console ===');\n    console.log('Available commands:');\n    console.log('  • self.testXSaved.inspectDB() - Database overview');\n    console.log('  • self.testXSaved.listBookmarks(10) - Show recent bookmarks');\n    console.log('  • self.testXSaved.testBookmarkCRUD() - Test all operations');\n    console.log('  • self.testXSaved.checkIndexes() - Inspect database schema');\n    console.log('  • self.testXSaved.getStats() - Get performance stats');\n    console.log('  • self.testXSaved.clearDB() - Clear all data (WARNING!)');\n    console.log('  • self.testXSaved.forceReinit() - Reinitialize database');\n    console.log('  • self.testXSaved.verifyDatabase() - Basic verification');\n    console.log('🏷️ TAG FUNCTIONS (DEV):');\n    console.log('  • addRandomTags() or self.testXSaved.addRandomTags() - Add random tags');\n    console.log('  • addSmartTags() or self.testXSaved.addSmartTags() - Add content-based tags');\n    console.log('  • getTagStats() or self.testXSaved.getTagStats() - Show tag statistics');\n    console.log('📅 DATE DEBUG FUNCTIONS:');\n    console.log('  • debugBookmarkDates() - Show date analysis for first 10 bookmarks');\n    console.log('  • validateDateConsistency() - Check for date inconsistencies');\n    console.log('  • getOldestBookmarkedAt() - Show 20 oldest tweets by bookmark date');\n    console.log('  • getNewestBookmarkedAt() - Show 20 newest tweets by bookmark date');\n    console.log('  • getOldestCreatedAt() - Show 20 oldest tweets by creation date');\n    console.log('  • getNewestCreatedAt() - Show 20 newest tweets by creation date');\n}\n"],"names":[],"sourceRoot":""}