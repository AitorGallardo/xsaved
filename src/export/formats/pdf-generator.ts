/**
 * PDF Generator - Component 5 Phase 1
 * Generates PDF exports for printable reading lists and reports
 */

import { BookmarkEntity } from '../../db/types';
import { ExportOptions, ExportResult } from '../export-manager';

export class PDFGenerator {
  /**
   * Generate PDF export from bookmarks
   */
  async generate(bookmarks: BookmarkEntity[], options: ExportOptions): Promise<ExportResult> {
    try {
      console.log(`üìÑ Generating PDF export for ${bookmarks.length} bookmarks`);

      // Create HTML content for PDF
      const htmlContent = this.generateHTML(bookmarks, options);
      
      // Convert HTML to PDF using browser's print API
      const pdfBlob = await this.htmlToPDF(htmlContent);
      
      const size = pdfBlob.size;
      console.log(`‚úÖ PDF generated: ${size} bytes`);

      return {
        success: true,
        data: pdfBlob,
        filename: options.filename || `bookmarks-${Date.now()}.pdf`,
        size
      };

    } catch (error) {
      console.error('‚ùå PDF generation failed:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'PDF generation failed',
        filename: options.filename || `bookmarks-${Date.now()}.pdf`
      };
    }
  }

  /**
   * Generate HTML content for PDF
   */
  private generateHTML(bookmarks: BookmarkEntity[], options: ExportOptions): string {
    const title = this.generateTitle(options);
    const metadata = this.generateMetadata(bookmarks, options);
    const bookmarksHTML = this.generateBookmarksHTML(bookmarks);

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        @media print {
            body { margin: 0; padding: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #1da1f2; padding-bottom: 20px; }
            .metadata { background: #f8f9fa; padding: 15px; margin-bottom: 30px; border-radius: 5px; }
            .bookmark { margin-bottom: 25px; padding: 15px; border: 1px solid #e1e8ed; border-radius: 8px; page-break-inside: avoid; }
            .bookmark-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; }
            .author { font-weight: bold; color: #1da1f2; }
            .date { color: #657786; font-size: 0.9em; }
            .text { margin: 10px 0; line-height: 1.5; }
            .tags { margin-top: 10px; }
            .tag { display: inline-block; background: #e1f5fe; color: #0277bd; padding: 2px 8px; margin: 2px; border-radius: 12px; font-size: 0.8em; }
            .engagement { color: #657786; font-size: 0.8em; margin-top: 5px; }
            .url { color: #1da1f2; text-decoration: none; word-break: break-all; }
            .footer { margin-top: 30px; text-align: center; color: #657786; font-size: 0.8em; border-top: 1px solid #e1e8ed; padding-top: 20px; }
            @page { margin: 1in; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated by XSaved Extension</p>
    </div>
    
    <div class="metadata">
        ${metadata}
    </div>
    
    <div class="bookmarks">
        ${bookmarksHTML}
    </div>
    
    <div class="footer">
        <p>Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
        <p>Total bookmarks: ${bookmarks.length}</p>
    </div>
</body>
</html>`;
  }

  /**
   * Generate title based on options
   */
  private generateTitle(options: ExportOptions): string {
    if (options.filters?.tags?.length) {
      return `Bookmarks - ${options.filters.tags.join(', ')}`;
    }
    if (options.filters?.author) {
      return `Bookmarks by ${options.filters.author}`;
    }
    if (options.filters?.dateFrom && options.filters?.dateTo) {
      return `Bookmarks from ${options.filters.dateFrom} to ${options.filters.dateTo}`;
    }
    return 'My X.com Bookmarks';
  }

  /**
   * Generate metadata section
   */
  private generateMetadata(bookmarks: BookmarkEntity[], options: ExportOptions): string {
    const totalBookmarks = bookmarks.length;
    const totalLikes = bookmarks.reduce((sum, b) => sum + (b.likes || 0), 0);
    const totalRetweets = bookmarks.reduce((sum, b) => sum + (b.retweets || 0), 0);
    const totalReplies = bookmarks.reduce((sum, b) => sum + (b.replies || 0), 0);
    
    const uniqueAuthors = new Set(bookmarks.map(b => b.author)).size;
    const allTags = bookmarks.flatMap(b => b.tags || []);
    const uniqueTags = new Set(allTags).size;
    
    let filters = '';
    if (options.filters) {
      const filterParts = [];
      if (options.filters.tags?.length) {
        filterParts.push(`Tags: ${options.filters.tags.join(', ')}`);
      }
      if (options.filters.author) {
        filterParts.push(`Author: ${options.filters.author}`);
      }
      if (options.filters.dateFrom && options.filters.dateTo) {
        filterParts.push(`Date range: ${options.filters.dateFrom} to ${options.filters.dateTo}`);
      }
      if (filterParts.length > 0) {
        filters = `<p><strong>Filters:</strong> ${filterParts.join(' | ')}</p>`;
      }
    }

    return `
        <h3>Export Summary</h3>
        <p><strong>Total bookmarks:</strong> ${totalBookmarks}</p>
        <p><strong>Unique authors:</strong> ${uniqueAuthors}</p>
        <p><strong>Unique tags:</strong> ${uniqueTags}</p>
        <p><strong>Total engagement:</strong> ${totalLikes} likes, ${totalRetweets} retweets, ${totalReplies} replies</p>
        ${filters}
    `;
  }

  /**
   * Generate HTML for bookmarks list
   */
  private generateBookmarksHTML(bookmarks: BookmarkEntity[]): string {
    return bookmarks.map(bookmark => `
        <div class="bookmark">
            <div class="bookmark-header">
                <span class="author">@${bookmark.author}</span>
                <span class="date">${new Date(bookmark.created_at).toLocaleDateString()}</span>
            </div>
            <div class="text">${this.escapeHTML(bookmark.text)}</div>
            ${bookmark.tags?.length ? `
                <div class="tags">
                    ${bookmark.tags.map(tag => `<span class="tag">#${tag}</span>`).join('')}
                </div>
            ` : ''}
            <div class="engagement">
                ${bookmark.likes || 0} likes ‚Ä¢ ${bookmark.retweets || 0} retweets ‚Ä¢ ${bookmark.replies || 0} replies
            </div>
            <div class="url">
                <a href="${bookmark.url}" target="_blank">${bookmark.url}</a>
            </div>
        </div>
    `).join('');
  }

  /**
   * Convert HTML to PDF using browser print API
   */
  private async htmlToPDF(htmlContent: string): Promise<Blob> {
    return new Promise((resolve, reject) => {
      try {
        // Create a new window for printing
        const printWindow = window.open('', '_blank');
        if (!printWindow) {
          reject(new Error('Could not open print window'));
          return;
        }

        printWindow.document.write(htmlContent);
        printWindow.document.close();

        // Wait for content to load
        printWindow.onload = () => {
          try {
            // Use browser's print-to-PDF functionality
            printWindow.print();
            
            // For now, return a placeholder blob
            // In a real implementation, you'd capture the print output
            const placeholderContent = 'PDF generation requires browser print API';
            const blob = new Blob([placeholderContent], { type: 'application/pdf' });
            resolve(blob);
            
            // Close the window
            setTimeout(() => printWindow.close(), 1000);
          } catch (error) {
            printWindow.close();
            reject(error);
          }
        };

      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * Escape HTML to prevent XSS
   */
  private escapeHTML(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Generate reading list format
   */
  async generateReadingList(bookmarks: BookmarkEntity[], options: ExportOptions): Promise<ExportResult> {
    try {
      console.log(`üìö Generating reading list PDF for ${bookmarks.length} bookmarks`);

      // Sort by bookmark timestamp (newest first)
      const sortedBookmarks = [...bookmarks].sort((a, b) => 
        new Date(b.bookmarked_at).getTime() - new Date(a.bookmarked_at).getTime()
      );

      const htmlContent = this.generateReadingListHTML(sortedBookmarks, options);
      const pdfBlob = await this.htmlToPDF(htmlContent);

      return {
        success: true,
        data: pdfBlob,
        filename: options.filename || `reading-list-${Date.now()}.pdf`,
        size: pdfBlob.size
      };

    } catch (error) {
      console.error('‚ùå Reading list generation failed:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Reading list generation failed',
        filename: options.filename || `reading-list-${Date.now()}.pdf`
      };
    }
  }

  /**
   * Generate HTML for reading list format
   */
  private generateReadingListHTML(bookmarks: BookmarkEntity[], options: ExportOptions): string {
    const title = 'Reading List - X.com Bookmarks';
    const bookmarksHTML = bookmarks.map((bookmark, index) => `
        <div class="bookmark">
            <div class="bookmark-number">${index + 1}.</div>
            <div class="bookmark-content">
                <div class="text">${this.escapeHTML(bookmark.text)}</div>
                <div class="meta">
                    <span class="author">@${bookmark.author}</span> ‚Ä¢ 
                    <span class="date">${new Date(bookmark.created_at).toLocaleDateString()}</span>
                    ${bookmark.tags?.length ? ` ‚Ä¢ <span class="tags">${bookmark.tags.map(tag => `#${tag}`).join(' ')}</span>` : ''}
                </div>
                <div class="url"><a href="${bookmark.url}" target="_blank">${bookmark.url}</a></div>
            </div>
        </div>
    `).join('');

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        @media print {
            body { margin: 0; padding: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
            .header { text-align: center; margin-bottom: 30px; }
            .bookmark { display: flex; margin-bottom: 20px; page-break-inside: avoid; }
            .bookmark-number { font-weight: bold; margin-right: 15px; min-width: 30px; }
            .bookmark-content { flex: 1; }
            .text { margin-bottom: 8px; line-height: 1.4; }
            .meta { color: #657786; font-size: 0.9em; margin-bottom: 5px; }
            .url { color: #1da1f2; font-size: 0.8em; word-break: break-all; }
            .footer { margin-top: 30px; text-align: center; color: #657786; font-size: 0.8em; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
    </div>
    
    <div class="bookmarks">
        ${bookmarksHTML}
    </div>
    
    <div class="footer">
        <p>Total items: ${bookmarks.length}</p>
    </div>
</body>
</html>`;
  }
} 